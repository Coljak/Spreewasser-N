(function () {
  function r(e, n, t) {
    function o(i, f) {
      if (!n[i]) {
        if (!e[i]) {
          var c = "function" == typeof require && require;
          if (!f && c) return c(i, !0);
          if (u) return u(i, !0);
          var a = new Error("Cannot find module '" + i + "'");
          throw ((a.code = "MODULE_NOT_FOUND"), a);
        }
        var p = (n[i] = { exports: {} });
        e[i][0].call(
          p.exports,
          function (r) {
            var n = e[i][1][r];
            return o(n || r);
          },
          p,
          p.exports,
          r,
          e,
          n,
          t
        );
      }
      return n[i].exports;
    }
    for (
      var u = "function" == typeof require && require, i = 0;
      i < t.length;
      i++
    )
      o(t[i]);
    return o;
  }
  return r;
})()(
  {
    1: [
      function (require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.loadAHPData = loadAHPData;
        exports.removeLayerFromMap = removeLayerFromMap;
        var _map2 = require("./map");
        var _features = require("./features");
        var _chart = require("./chart");
        var _utils = require("./utils");
        function _slicedToArray(arr, i) {
          return (
            _arrayWithHoles(arr) ||
            _iterableToArrayLimit(arr, i) ||
            _nonIterableRest()
          );
        }
        function _nonIterableRest() {
          throw new TypeError(
            "Invalid attempt to destructure non-iterable instance"
          );
        }
        function _iterableToArrayLimit(arr, i) {
          if (
            !(
              Symbol.iterator in Object(arr) ||
              Object.prototype.toString.call(arr) === "[object Arguments]"
            )
          ) {
            return;
          }
          var _arr = [];
          var _n = true;
          var _d = false;
          var _e = undefined;
          try {
            for (
              var _i = arr[Symbol.iterator](), _s;
              !(_n = (_s = _i.next()).done);
              _n = true
            ) {
              _arr.push(_s.value);
              if (i && _arr.length === i) break;
            }
          } catch (err) {
            _d = true;
            _e = err;
          } finally {
            try {
              if (!_n && _i["return"] != null) _i["return"]();
            } finally {
              if (_d) throw _e;
            }
          }
          return _arr;
        }
        function _arrayWithHoles(arr) {
          if (Array.isArray(arr)) return arr;
        }
        /*
Load AHP data from static file. Directory path is generated by Django template in map.html. A file called "files.json" is expected in the same folder where all files to display are listed with their options (for showData).
Build sidebar navigation in Digitalatlas module, containing various accordions.

This function is called once in the beginning from mapMain.
*/ function loadAHPData() {
          // get surrounding UL element to populate
          var accordion = document.getElementById("AHPAccordion");
          if (!_region.projectData || !accordion || _region.filesTask) return; // init accordion
          $("#AHPAccordion").accordion();
          var AHPFileName =
            _AHPFolder + "data/" + _region.projectData + "/files.json"; // fetch and decode file describing other file names
          fetch(AHPFileName, {
            credentials: "same-origin",
            headers: { "Content-Type": "application/json" },
          }).then(function (res) {
            if (!res.ok) return;
            res
              .json()
              .then(function (JSON) {
                // parse successful
                // add stylesheet (for custom markercluster)
                var style_elem = (0, _utils.addElem)(
                  null,
                  null,
                  document.head,
                  "STYLE"
                );
                style_elem.type = "text/css";
                var style = style_elem.sheet; // make year slider usable, add callbacks
                addYearSlider(JSON.years);
                var id_idx = 0; // current id of checkbox
                // accordion pages
                for (var c in JSON.categories) {
                  var category = JSON.categories[c];
                  var content = createAccordionItem(
                    accordion,
                    c,
                    category.options || {}
                  );
                  delete category.options; // populate entries in category
                  for (var e in category) {
                    // item in category
                    var entry = category[e];
                    entry.options = entry.options || {};
                    var griddiv = createEntryDiv(
                      entry,
                      e,
                      false,
                      entry.options
                    );
                    content.appendChild(griddiv);
                    createClusterColor(entry, id_idx, style); // create legend
                    var legend = void 0;
                    if (entry.options.legend) {
                      if (entry.options.legend.classes) {
                        legend = createNominalLegendObject(
                          entry.options.legend.classes
                        );
                      } else if (entry.options.potential) {
                        legend = createLegendObject(
                          chroma.brewer[entry.options.potential],
                          400,
                          40,
                          entry.options.legend.min,
                          entry.options.legend.max
                        );
                      } else {
                        if (_map2.DEBUG)
                          console.log("strange kind of legend...");
                      }
                    } // no subcategory: switch button (fancy checkbox)
                    if (!entry.subcategories) {
                      griddiv.appendChild(createSwitch(entry, id_idx, legend));
                      id_idx++;
                    } // add legend
                    if (legend) {
                      legend.activateFunc(false);
                      griddiv.appendChild(legend.elem);
                    } // subcategories for entry: individual labels+buttons
                    for (var s in entry.subcategories) {
                      var sub = entry.subcategories[s];
                      sub.options = sub.options || {};
                      var _griddiv = createEntryDiv(sub, s, true, sub.options);
                      content.appendChild(_griddiv); // try to create sub_legend before switch: subcategory may not have own legend
                      // append to griddiv AFTER switch
                      var sub_legend = void 0;
                      if (sub.options.legend && sub.options.potential) {
                        sub_legend = createLegendObject(
                          chroma.brewer[sub.options.potential],
                          380,
                          40,
                          sub.options.legend.min,
                          sub.options.legend.max
                        );
                      }
                      if (sub.options.legend) {
                        if (sub.options.legend.classes) {
                          sub_legend = createNominalLegendObject(
                            sub.options.legend.classes
                          );
                        } else if (sub.options.potential) {
                          sub_legend = createLegendObject(
                            chroma.brewer[sub.options.potential],
                            380,
                            40,
                            sub.options.legend.min,
                            sub.options.legend.max
                          );
                        } else {
                          if (_map2.DEBUG)
                            console.log("strange kind of legend...");
                        }
                      }
                      _griddiv.appendChild(
                        createSwitch(sub, id_idx, sub_legend || legend)
                      );
                      createClusterColor(sub, id_idx, style); // add legend
                      if (sub_legend) {
                        sub_legend.activateFunc(false);
                        _griddiv.appendChild(sub_legend.elem);
                      }
                      id_idx++;
                    }
                  }
                } // user-uploaded data
                // show accordion item: all, staff with staff access or staff with content
                var showUserdata =
                  JSON.userdata &&
                  (JSON.userdata == "all" ||
                    (JSON.userdata == "staff" &&
                      (_permissions["ðŸ¥–"] || _region.userFeatures.length > 0))); // show upload button: all, staff with staff access
                var showUserUpload =
                  JSON.userdata &&
                  (JSON.userdata == "all" ||
                    (JSON.userdata == "staff" && _permissions["ðŸ¥–"]));
                if (showUserdata) {
                  var _content = createAccordionItem(
                    accordion,
                    "Benutzerdefinierte Daten"
                  );
                  for (var i = 0; i < _region.userFeatures.length; i++) {
                    var feature = _region.userFeatures[i];
                    var _entry = {
                      GET: "customGeom/?id=" + feature.id,
                      field: "all",
                      options: { color: "#07689F" },
                    };
                    var _griddiv2 = createEntryDiv(
                      _entry,
                      feature.name,
                      false,
                      _entry.options
                    );
                    _content.appendChild(_griddiv2);
                    _griddiv2.appendChild(createSwitch(_entry, id_idx, null));
                    id_idx++;
                  }
                  if (showUserUpload) {
                    // add upload button
                    var uploadDiv = (0, _utils.addElem)(
                      "u-margin--s",
                      null,
                      _content,
                      "DIV"
                    );
                    var userUploadInp =
                      document.getElementById("userUploadInp");
                    var userUploadBtn = (0, _utils.addElem)(
                      "button btn btn--color",
                      "Datei hochladen",
                      uploadDiv,
                      "BUTTON"
                    );
                    userUploadBtn.onclick = function (_) {
                      return userUploadInp.click();
                    };
                    userUploadInp.onchange = function (_) {
                      (0, _utils.fetchPost)("customGeom/", "userUploadForm")
                        .then(function (res) {
                          return res.json();
                        })
                        .then(function (collection) {
                          if (collection.error) alert(collection.error);
                          else {
                            var _entry2 = {
                              GET: "customGeom/?id=" + collection.id,
                              default: true,
                              field: "all",
                              options: { color: "#07689F", fit: true },
                            };
                            var _griddiv3 = createEntryDiv(
                              _entry2,
                              collection.name,
                              false,
                              _entry2.options
                            );
                            _content.insertBefore(_griddiv3, uploadDiv);
                            _griddiv3.appendChild(
                              createSwitch(_entry2, id_idx, null)
                            );
                            id_idx++;
                          }
                        })
                        .catch(function (err) {
                          if (_map2.DEBUG) console.log(err);
                        });
                    };
                  }
                } // activate tab in sidebar
                var layerTab = document.getElementById("tab-layers");
                if (layerTab) {
                  layerTab.classList.remove("disabled-sidebar-tab");
                  var isActive = false;
                  for (
                    var _i = 0;
                    _i < layerTab.parentElement.children.length;
                    _i++
                  ) {
                    var sibling = layerTab.parentElement.children[_i];
                    isActive = isActive || sibling.classList.contains("active");
                  }
                  if (!isActive) {
                    // open sidebar tab if no other tab is open: simulate click on anchor
                    layerTab.firstElementChild.click();
                  }
                } // reset accordion
                var acc = $("#AHPAccordion"); // type: jQuery
                acc.on("accordionbeforeactivate", function (_event, ui) {
                  if (ui.oldHeader[0])
                    ui.oldHeader[0].parentNode.classList.remove("is-active");
                  if (ui.newHeader[0])
                    ui.newHeader[0].parentNode.classList.add("is-active");
                });
                acc.accordion({ heightStyle: "content", collapsible: true });
                acc.accordion("refresh");
                acc.accordion({ active: false });
                var show_switches = document.getElementsByClassName(
                  "switch-default-show"
                );
                for (var _i2 = 0; _i2 < show_switches.length; _i2++) {
                  show_switches[_i2].click();
                }
                var show_items = document.getElementsByClassName(
                  "accordion-item-default-open"
                );
                for (var _i3 = 0; _i3 < show_items.length; _i3++) {
                  show_items[_i3].click();
                }
              })
              .catch(function (e) {
                if (_map2.DEBUG) console.log(e);
              });
          });
          if (_permissions["ðŸ¥–"]) {
            // user has staff permission: fetch and decode general info file
            fetch(
              _AHPFolder + "data/" + _region.projectData + "/general.json",
              {
                credentials: "same-origin",
                headers: { "Content-Type": "application/json" },
              }
            ).then(function (res) {
              if (!res.ok) return;
              res
                .json()
                .then(function (JSON) {
                  // parse successful
                  var accordion = document.getElementById("infoAccordion");
                  $("#infoAccordion").accordion(); // iterate over general data
                  for (var k in JSON) {
                    if (!JSON.hasOwnProperty(k)) continue;
                    var v = JSON[k];
                    var accItem = createAccordionItem(accordion, k); // iterate over entries
                    var _loop = function _loop(i) {
                      var entry = v[i];
                      switch (entry.type) {
                        default:
                        case "text": // plain text: display text with title
                          var title = Object.keys(entry)
                            .filter(function (e) {
                              return e != "type";
                            })
                            .pop();
                          if (!title) break;
                          (0, _utils.addElem)(
                            "grid-x",
                            title + ": " + entry[title],
                            accItem,
                            "DIV"
                          );
                          break;
                        case "pie": // pie chart
                          // title of chart
                          var entryDiv = (0, _utils.addElem)(
                            "u-text--center",
                            entry.title,
                            accItem,
                            "DIV"
                          ); // container for chart
                          var chartDiv = document.createElement("DIV");
                          entryDiv.appendChild(chartDiv); // read data series
                          var series = Object.values(entry.data); // sum of entries
                          var total = series.reduce(function (a, c) {
                            return a + c;
                          }, 0);
                          if (!total) {
                            chartDiv.textContent = "Keine Angabe.";
                            break;
                          } // draw pie chart
                          // set static size of chart container
                          chartDiv.style.width = "250px";
                          chartDiv.style.height = "250px";
                          chartDiv.style.margin = "auto";
                          var chartData = {
                            labels: Object.keys(entry.data),
                            series: Object.entries(entry.data).map(function (
                              e
                            ) {
                              return { meta: e[0] + ":", value: e[1] };
                            }),
                          };
                          var chartOptions = {
                            // no label when slice < 10%
                            labelInterpolationFnc:
                              function labelInterpolationFnc(value) {
                                if (entry.data[value] / total > 0.1)
                                  return value;
                                else return null;
                              },
                            ignoreEmptyValues: true,
                            plugins: [
                              Chartist.plugins.tooltip({
                                anchorToPoint: false,
                                appendToBody: true,
                                class: "ct-tooltip",
                                currency: entry.unit,
                              }),
                            ],
                            width: "250px",
                            height: "250px", // otherwise, Chartist cannot set correct size because of hidden sidebar panel
                            // TODO: redraw chart dynamically on sidebar open (which event?)
                          };
                          new Chartist.Pie(chartDiv, chartData, chartOptions);
                          break;
                      }
                    };
                    for (var i = 0; i < v.length; i++) {
                      _loop(i);
                    }
                  } // show hidden sidebar tab
                  var infoTab = document.getElementById("tab-info");
                  if (infoTab) {
                    infoTab.style.display = "";
                    infoTab.classList.remove("disabled-sidebar-tab");
                  } // reset accordion
                  var acc = $("#infoAccordion");
                  acc.on("accordionbeforeactivate", function (_event, ui) {
                    if (ui.oldHeader[0])
                      ui.oldHeader[0].parentNode.classList.remove("is-active");
                    if (ui.newHeader[0])
                      ui.newHeader[0].parentNode.classList.add("is-active");
                  });
                  acc.accordion({ heightStyle: "content", collapsible: true });
                  acc.accordion("refresh");
                  acc.accordion({ active: false });
                })
                .catch(function (e) {
                  if (_map2.DEBUG) console.log(e);
                });
            });
          }
        } // Generate clickable accordion item with title.
        function createAccordionItem(accordion, name) {
          var options =
            arguments.length > 2 && arguments[2] !== undefined
              ? arguments[2]
              : {};
          var list = (0, _utils.addElem)(
            "accordion-item",
            null,
            accordion,
            "LI"
          );
          list.setAttribute("data-accordion-item", "");
          var a = (0, _utils.addElem)("accordion-title", name, list, "A");
          a.setAttribute("href", "#");
          if (options.openOnStart) {
            a.classList.add("accordion-item-default-open");
          }
          if (options.customClasses) {
            for (var i = 0; i < options.customClasses.length; i++) {
              list.classList.add(options.customClasses[i]);
            }
          }
          var content = (0, _utils.addElem)(
            "accordion-content",
            null,
            list,
            "DIV"
          );
          content.setAttribute("data-tab-content", "");
          return content;
        } // create entry
        // Output: grid DIV for elements
        function createEntryDiv(entry, name, isSub) {
          var options =
            arguments.length > 3 && arguments[3] !== undefined
              ? arguments[3]
              : {};
          var _a;
          var griddiv = (0, _utils.addElem)("grid-x", null, null, "DIV");
          var celldiv = (0, _utils.addElem)(
            "cell small-10 switch__label",
            null,
            griddiv,
            "DIV"
          );
          if (isSub) celldiv.classList.add("switch__label--sub");
          if (entry.options.indented) celldiv.classList.add("indented-entry"); // first item of sub: icon / colored div
          var icon = createIcon(entry);
          if (icon) celldiv.appendChild(icon); // name of entry
          if (
            (_a = options) === null || _a === void 0 ? void 0 : _a.titleIsHtml
          ) {
            var name_span = document.createElement("SPAN");
            name_span.innerHTML = name;
            celldiv.appendChild(document.createTextNode(" "));
            celldiv.appendChild(name_span);
            celldiv.appendChild(document.createTextNode(" "));
          } else {
            celldiv.appendChild(document.createTextNode(" " + name + " "));
          } // info circle
          if (entry.info) {
            var yearslider = document.getElementById("yearslider");
            var infoImg = document.createElement("I");
            infoImg.className = "icon ion-md-information-circle unselectable";
            infoImg.title =
              (yearslider ? entry.info[yearslider.value] : null) || entry.info;
            celldiv.appendChild(infoImg); // title may be year-dependent
            if (yearslider && entry.info instanceof Object) {
              yearslider.addEventListener("input", function (_) {
                // year dependent info. May not be specified for each year!
                infoImg.title =
                  (yearslider ? entry.info[yearslider.value] : null) ||
                  entry.info;
              });
            }
          }
          return griddiv;
        } // create icon for entry, based on entry options
        function createIcon(entry) {
          if (entry.options.icon) {
            var icon = entry.options.icon;
            if (icon.file instanceof Array) icon.file = icon.file[0]; // remove shadow - this removes shadow from map icon as well!
            // set path for images (also for icons on map)
            icon.file = _AHPFolder + "resources/" + icon.file;
            var img = document.createElement("IMG");
            img.src = icon.file;
            img.style.width = (icon.legendWidth || icon.width || 16) + "px";
            img.style.height = (icon.legendHeight || icon.height || 16) + "px";
            img.style.display = "inline-block";
            return img;
          } else if (entry.options.color) {
            var colorDiv = document.createElement("DIV");
            colorDiv.style.display = "inline-block";
            colorDiv.style.width = "1rem";
            colorDiv.style.height = "1rem";
            colorDiv.style.backgroundColor = entry.options.color;
            return colorDiv;
          } else if (entry.options.potential) {
            var gradientDiv = document.createElement("DIV");
            var colorMap = chroma.brewer[entry.options.potential];
            gradientDiv.style.width = "1rem";
            gradientDiv.style.height = "1rem";
            gradientDiv.style.display = "inline-block";
            gradientDiv.style.background = (0, _utils.colormapToCSSGradient)(
              colorMap,
              "to top"
            );
            return gradientDiv;
          } else if (entry.options.heat) {
            var heatDiv = document.createElement("DIV");
            var colormap_select = document.getElementById("colormap-select");
            var _colorMap = chroma.brewer[colormap_select.value];
            heatDiv.style.width = "1rem";
            heatDiv.style.height = "1rem";
            heatDiv.style.display = "inline-block";
            heatDiv.style.background = (0, _utils.colormapToCSSGradient)(
              _colorMap,
              "to top"
            );
            return heatDiv;
          }
          return null;
        } // create fancy switch button (DIV with button and special label)
        function createSwitch(entry, idx, legend) {
          var cell2div = (0, _utils.addElem)(
            "cell small-2 switch__checkbox unselectable",
            null,
            null,
            "DIV"
          );
          var switchdiv = (0, _utils.addElem)(
            "switch tiny unselectable",
            null,
            cell2div,
            "DIV"
          );
          var input = (0, _utils.addElem)(
            "switch-input unselectable",
            null,
            switchdiv,
            "INPUT"
          );
          input.setAttribute("type", "checkbox");
          input.setAttribute("name", "id_" + idx);
          input.setAttribute("id", "id_" + idx); // used to reference associated data
          var label = (0, _utils.addElem)(
            "switch-paddle unselectable",
            null,
            switchdiv,
            "LABEL"
          );
          label.setAttribute("for", "id_" + idx);
          if (entry.file === "none") {
            input.setAttribute("disabled", "");
            label.style.cursor = "not-allowed";
            label.classList.add("switch-paddle-deactivated");
          }
          if (entry.show) {
            input.classList.add("switch-default-show");
          }
          if (legend) _AHPLegends[input.id] = legend;
          if (entry.default) addToMap(entry, input);
          input.onchange = function (_) {
            // toggle display of layer
            if (input.checked) {
              addToMap(entry, input);
            } else {
              removeLayerFromMap(input);
            }
          };
          return cell2div;
        } // add chroma colors to style sheet with custom rule names
        function createClusterColor(entry, idx, style) {
          if (entry.options && entry.options.clusterColor) {
            var bg1 =
              "rgba(" +
              chroma(entry.options.clusterColor["background-color"])
                .alpha(0.5)
                .rgba()
                .toString() +
              ")";
            var bg2 =
              "rgba(" +
              chroma(entry.options.clusterColor["background-color"])
                .alpha(0.85)
                .rgba()
                .toString() +
              ")";
            style.insertRule(
              ".marker-cluster-" +
                idx +
                " {color: " +
                entry.options.clusterColor.color +
                "; background-color: " +
                bg1 +
                ";}"
            );
            style.insertRule(
              ".marker-cluster-" + idx + " div {background-color: " + bg2 + ";}"
            );
            entry.options.clusterClass = "marker-cluster-" + idx;
          }
        }
        /*
Build HTML colormap legend with ticks. This element can be toggled on and off.

Inputs:
    colormapArr: array with HTML colors ("#rrggbb")
    width:  width of legend in pixels
    height: height of legend in pixels
    minVal: minimum legend value
    maxVal: maximum legend value
Outputs:
    activateFunc: function to toggle legend on and off
    elem: generated legend object
*/ function createLegendObject(colormapArr, width, height, minVal, maxVal) {
          var gradientOffset = 10;
          var gradientWidth = width - gradientOffset * 2 - 8;
          var gradientHeight = 14;
          var canv = (0, _utils.addElem)(
            "canvas-colormap-legend",
            null,
            null,
            "CANVAS"
          );
          var ctx = canv.getContext("2d");
          canv.width = width;
          canv.height = height;
          var activate = function activate(active) {
            ctx.clearRect(0, 0, width, height); // draw gradient
            if (active) {
              var gradient = ctx.createLinearGradient(
                gradientOffset,
                0,
                gradientWidth + gradientOffset,
                0
              );
              for (var i = 0; i < colormapArr.length; i++) {
                gradient.addColorStop(
                  i / (colormapArr.length - 1.0),
                  "rgba(" + chroma(colormapArr[i]).rgba().toString() + ")"
                );
              }
              ctx.fillStyle = gradient;
              ctx.fillRect(gradientOffset, 0, gradientWidth, gradientHeight);
            } else {
              ctx.fillStyle = "rgba(0, 0, 0, 0.1)";
              ctx.fillRect(gradientOffset, 0, gradientWidth, gradientHeight);
            } // draw ticks
            {
              var minTickDist = 20;
              var diffVal = maxVal - minVal;
              var valPerPx = diffVal / gradientWidth;
              var log10 = Math.log(minTickDist * valPerPx) / Math.log(10);
              var scale = Math.ceil(log10);
              var step = Math.pow(10.0, scale);
              var smallStep = step * 0.1;
              var numSmallTicks = 10;
              if (smallStep * (1.0 / valPerPx) < 5) {
                smallStep = step * 0.5;
                numSmallTicks = 2;
              }
              if (active) {
                ctx.fillStyle = "#000000";
                ctx.strokeStyle = "#000000";
              } else {
                ctx.fillStyle = "rgba(0, 0, 0, 0.5)";
                ctx.strokeStyle = "rgba(0, 0, 0, 0.5)";
              }
              ctx.textBaseline = "top"; // big ticks
              var bigTstartVal = Math.trunc(minVal / step) * step;
              {
                var x = 0.0;
                var _i4 = 0;
                var last_text_end = -100.0;
                while (x < gradientWidth + gradientOffset && _i4 < 100) {
                  var value = bigTstartVal + step * _i4;
                  x = gradientOffset + (value - minVal) * (1.0 / valPerPx);
                  if (
                    x >= gradientOffset &&
                    x <= gradientOffset + gradientWidth
                  ) {
                    ctx.beginPath();
                    ctx.moveTo(x, 14);
                    ctx.lineTo(x, 24);
                    ctx.stroke();
                    var text =
                      "" +
                      (scale >= 0
                        ? Math.round(value)
                        : (0, _utils.roundToStr)(value, -scale));
                    var textm = ctx.measureText(text);
                    var textx = Math.max(0.0, x - textm.width * 0.5);
                    if (textx >= last_text_end + 4) {
                      ctx.fillText(text, textx, 26);
                      last_text_end = textx + textm.width;
                    }
                  }
                  _i4++;
                }
              } // small ticks
              var smallTstartVal = bigTstartVal - step;
              {
                var _x = 0.0;
                var _i5 = 0;
                while (_x < gradientWidth + gradientOffset && _i5 < 300) {
                  var v = smallTstartVal + smallStep * _i5;
                  _x = gradientOffset + (v - minVal) * (1.0 / valPerPx);
                  if (
                    _i5 % numSmallTicks != 0 &&
                    _x >= gradientOffset &&
                    _x <= gradientOffset + gradientWidth
                  ) {
                    ctx.beginPath();
                    ctx.moveTo(_x, 14);
                    ctx.lineTo(_x, 18);
                    ctx.stroke();
                  }
                  _i5++;
                }
              }
            }
          };
          return { activateFunc: activate, elem: canv };
        }
        /*
Create legend with names instead of numbers.

Input:
    classes: dictionary object with color (HTML) and name keys for each member
Output:
    activateFunc: function to toggle legend on and off
    elem: created legend HTML object
*/ function createNominalLegendObject(classes) {
          var ul = (0, _utils.addElem)("nominal-legend", null, null, "UL");
          ul.style.display = "none";
          for (var i = 0; i < classes.length; i++) {
            var li = (0, _utils.addElem)(null, null, ul, "LI");
            {
              var colorDiv = (0, _utils.addElem)(null, null, li, "DIV");
              colorDiv.style.display = "inline-block";
              colorDiv.style.width = "1rem";
              colorDiv.style.height = "1rem";
              colorDiv.style.backgroundColor = classes[i].color;
            }
            (0, _utils.addElem)(null, classes[i].name, li, "SPAN");
          }
          var activate = function activate(active) {
            ul.style.display = active ? "" : "none";
          };
          return { activateFunc: activate, elem: ul };
        }
        /*
Add layer to map.
First time: build layer. Otherwise, re-add layer to map from _AHPlayers (dict by input id).
Layer may depend on timeslider (color, tooltip)

Inputs:
    entry: object loaded from json file.
    input: toggle switch HTML element
No output.
*/ function addToMap(entry, input) {
          var _a, _b;
          input.disabled = true;
          var checkInput = function checkInput() {
            input.checked = true;
            input.disabled = false;
            if (_AHPLegends[input.id]) {
              _AHPLegends[input.id].activateFunc(true);
            }
          }; // hide previous layer of exclusive group
          var group = entry.exclusiveGroup;
          if (group) {
            if (_AHPExclusiveGroups[group]) {
              // hide old layer
              var old_input = document.getElementById(
                _AHPExclusiveGroups[group]
              );
              removeLayerFromMap(old_input);
            }
            _AHPExclusiveGroups[group] = input.id;
          } // get yearslider, so user inputs can be detected
          var yearslider = document.getElementById("yearslider");
          if (!_AHPLayers[input.id]) {
            // not loaded before: get data
            // If a tile layer is available -> Do not load the geojson file, just add this tile layer.
            if (entry.tileLayer || entry.tileLayerYears) {
              // get absolute path for tile URL
              var abs_tile_url = function abs_tile_url(path) {
                if (path.startsWith("https://") || path.startsWith("http://")) {
                  return path;
                } else {
                  return (
                    _AHPFolder + "data/" + _region.projectData + "/" + path
                  );
                }
              };
              var tileUrl;
              if (
                yearslider &&
                entry.tileLayerYears &&
                entry.tileLayerYears[yearslider.value]
              ) {
                tileUrl = abs_tile_url(entry.tileLayerYears[yearslider.value]);
              } else {
                tileUrl = abs_tile_url(entry.tileLayer);
              }
              var pane_id = "tilepane_" + input.id;
              _map.createPane(pane_id);
              _map.getPane(pane_id).style.zIndex =
                450 +
                (((_a = entry.options) === null || _a === void 0
                  ? void 0
                  : _a.zIndexOffset) || 0);
              _map.getPane(pane_id).style.pointerEvents = "none";
              _map.getPane(pane_id).style["mix-blend-mode"] =
                ((_b = entry.options) === null || _b === void 0
                  ? void 0
                  : _b.mixBlendMode) || "normal";
              var layer = L.tileLayer(tileUrl, {
                attribution: "",
                maxZoom: Math.min(18, _map2.MAX_ZOOM),
                pane: pane_id, //bounds: L.polyline(_region.geom.coordinates).getBounds()
              }).addTo(_map); // save absolute tile URLs for each year in layer object
              if (entry.tileLayerYears) {
                var tile_urls = {};
                for (var key in entry.tileLayerYears) {
                  tile_urls[key] = abs_tile_url(entry.tileLayerYears[key]);
                }
                layer.tileLayerYears = tile_urls;
                layer.isYearLayer = true; // yearslider change: update layer URL if year dependent
                if (yearslider) {
                  yearslider.parentElement.classList.remove("invisible");
                  yearslider.addEventListener("input", function (_) {
                    var year = yearslider.value;
                    if (
                      layer.tileLayerYears[year] &&
                      layer._url !== layer.tileLayerYears[year]
                    ) {
                      layer._url = layer.tileLayerYears[year];
                      layer.redraw();
                    }
                  });
                }
              }
              _AHPLayers[input.id] = layer; // set checkbox
              checkInput();
              return;
            } // flatten structure and append leaves to the given array.
            //
            // flat_extend([], 23) === [23]
            // flat_extend([], [23, 100]) === [23, 100]
            // flat_extend([], [23, {'x': 42, 'y': [17, 2]}]) === [23, 42, 17, 2]
            var flat_extend = function flat_extend(arr, other) {
              if (other instanceof Array) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;
                try {
                  for (
                    var _iterator = other[Symbol.iterator](), _step;
                    !(_iteratorNormalCompletion = (_step = _iterator.next())
                      .done);
                    _iteratorNormalCompletion = true
                  ) {
                    var x = _step.value;
                    arr = flat_extend(arr, x);
                  }
                } catch (err) {
                  _didIteratorError = true;
                  _iteratorError = err;
                } finally {
                  try {
                    if (
                      !_iteratorNormalCompletion &&
                      _iterator.return != null
                    ) {
                      _iterator.return();
                    }
                  } finally {
                    if (_didIteratorError) {
                      throw _iteratorError;
                    }
                  }
                }
              } else if (other instanceof Object) {
                for (
                  var _i6 = 0, _Object$values = Object.values(other);
                  _i6 < _Object$values.length;
                  _i6++
                ) {
                  var val = _Object$values[_i6];
                  arr = flat_extend(arr, val);
                }
              } else {
                arr.push(other);
              }
              return arr;
            }; // not shown on map before -> create new layer
            loadAHPEntry(entry)
              .then(function (json) {
                input.disabled = false;
                var data = json.data;
                var options = json.options;
                var field = entry.field || entry.years;
                var find_current_year = function find_current_year() {
                  var year = null;
                  if (yearslider.value in entry.years) {
                    year = yearslider.value;
                  } else {
                    // find last year that is <= slider value
                    for (
                      var _i7 = 0, _Object$keys = Object.keys(entry.years);
                      _i7 < _Object$keys.length;
                      _i7++
                    ) {
                      var y = _Object$keys[_i7];
                      if (parseInt(y) <= parseInt(yearslider.value)) {
                        year = y;
                      }
                    }
                  }
                  return year;
                };
                if (options.potential) {
                  // potential: get relevant field. May be dependent on timeslider
                  try {
                    // Find min and max value of all features and all fields
                    var fields = flat_extend([], field);
                    var min = entry.min || 0;
                    var max = entry.max || 0;
                    var _iteratorNormalCompletion2 = true;
                    var _didIteratorError2 = false;
                    var _iteratorError2 = undefined;
                    try {
                      for (
                        var _iterator2 = data.features[Symbol.iterator](),
                          _step2;
                        !(_iteratorNormalCompletion2 = (_step2 =
                          _iterator2.next()).done);
                        _iteratorNormalCompletion2 = true
                      ) {
                        var _feat4 = _step2.value;
                        var _iteratorNormalCompletion7 = true;
                        var _didIteratorError7 = false;
                        var _iteratorError7 = undefined;
                        try {
                          for (
                            var _iterator7 = fields[Symbol.iterator](), _step7;
                            !(_iteratorNormalCompletion7 = (_step7 =
                              _iterator7.next()).done);
                            _iteratorNormalCompletion7 = true
                          ) {
                            var _f2 = _step7.value;
                            min = (0, _utils.safeMin)(
                              min,
                              _feat4.properties[_f2]
                            );
                            max = (0, _utils.safeMax)(
                              max,
                              _feat4.properties[_f2]
                            );
                          }
                        } catch (err) {
                          _didIteratorError7 = true;
                          _iteratorError7 = err;
                        } finally {
                          try {
                            if (
                              !_iteratorNormalCompletion7 &&
                              _iterator7.return != null
                            ) {
                              _iterator7.return();
                            }
                          } finally {
                            if (_didIteratorError7) {
                              throw _iteratorError7;
                            }
                          }
                        }
                      } // Set potential value for each feature.
                      // Differentiate between combinations of years availabe and potential2d.
                    } catch (err) {
                      _didIteratorError2 = true;
                      _iteratorError2 = err;
                    } finally {
                      try {
                        if (
                          !_iteratorNormalCompletion2 &&
                          _iterator2.return != null
                        ) {
                          _iterator2.return();
                        }
                      } finally {
                        if (_didIteratorError2) {
                          throw _iteratorError2;
                        }
                      }
                    }
                    var scale = 1.0 / (max - min);
                    if (field instanceof Array && options.potential2d) {
                      // field: potential2d
                      var _iteratorNormalCompletion3 = true;
                      var _didIteratorError3 = false;
                      var _iteratorError3 = undefined;
                      try {
                        for (
                          var _iterator3 = data.features[Symbol.iterator](),
                            _step3;
                          !(_iteratorNormalCompletion3 = (_step3 =
                            _iterator3.next()).done);
                          _iteratorNormalCompletion3 = true
                        ) {
                          var feat = _step3.value;
                          feat.properties.potential = {};
                          feat.properties.potential[field[0]] =
                            (feat.properties[field[0]] - min) * scale;
                          feat.properties.potential[field[1]] =
                            (feat.properties[field[1]] - min) * scale;
                        }
                      } catch (err) {
                        _didIteratorError3 = true;
                        _iteratorError3 = err;
                      } finally {
                        try {
                          if (
                            !_iteratorNormalCompletion3 &&
                            _iterator3.return != null
                          ) {
                            _iterator3.return();
                          }
                        } finally {
                          if (_didIteratorError3) {
                            throw _iteratorError3;
                          }
                        }
                      }
                    } else if (typeof field === "string") {
                      // field: simple field
                      var _iteratorNormalCompletion4 = true;
                      var _didIteratorError4 = false;
                      var _iteratorError4 = undefined;
                      try {
                        for (
                          var _iterator4 = data.features[Symbol.iterator](),
                            _step4;
                          !(_iteratorNormalCompletion4 = (_step4 =
                            _iterator4.next()).done);
                          _iteratorNormalCompletion4 = true
                        ) {
                          var _feat = _step4.value;
                          _feat.properties.potential = {};
                          _feat.properties.potential[field] =
                            (_feat.properties[field] - min) * scale;
                        }
                      } catch (err) {
                        _didIteratorError4 = true;
                        _iteratorError4 = err;
                      } finally {
                        try {
                          if (
                            !_iteratorNormalCompletion4 &&
                            _iterator4.return != null
                          ) {
                            _iterator4.return();
                          }
                        } finally {
                          if (_didIteratorError4) {
                            throw _iteratorError4;
                          }
                        }
                      }
                    } else if (field instanceof Object && options.potential2d) {
                      // field: yearslider + potential2d
                      var _iteratorNormalCompletion5 = true;
                      var _didIteratorError5 = false;
                      var _iteratorError5 = undefined;
                      try {
                        for (
                          var _iterator5 = data.features[Symbol.iterator](),
                            _step5;
                          !(_iteratorNormalCompletion5 = (_step5 =
                            _iterator5.next()).done);
                          _iteratorNormalCompletion5 = true
                        ) {
                          var _feat2 = _step5.value;
                          _feat2.properties.potential = {};
                          for (
                            var _i8 = 0,
                              _Object$entries = Object.entries(field);
                            _i8 < _Object$entries.length;
                            _i8++
                          ) {
                            var _Object$entries$_i = _slicedToArray(
                                _Object$entries[_i8],
                                2
                              ),
                              year = _Object$entries$_i[0],
                              f = _Object$entries$_i[1];
                            var a = _feat2.properties[f[0]];
                            var b = _feat2.properties[f[1]];
                            if (a !== null && b != null) {
                              _feat2.properties.potential[year] = [
                                (a - min) * scale,
                                (b - min) * scale,
                              ];
                            } else {
                              _feat2.properties.potential[year] = [
                                a || undefined,
                                b || undefined,
                              ];
                            }
                          }
                        }
                      } catch (err) {
                        _didIteratorError5 = true;
                        _iteratorError5 = err;
                      } finally {
                        try {
                          if (
                            !_iteratorNormalCompletion5 &&
                            _iterator5.return != null
                          ) {
                            _iterator5.return();
                          }
                        } finally {
                          if (_didIteratorError5) {
                            throw _iteratorError5;
                          }
                        }
                      }
                    } else if (field instanceof Object) {
                      // field: yearslider without potential2d
                      var _iteratorNormalCompletion6 = true;
                      var _didIteratorError6 = false;
                      var _iteratorError6 = undefined;
                      try {
                        for (
                          var _iterator6 = data.features[Symbol.iterator](),
                            _step6;
                          !(_iteratorNormalCompletion6 = (_step6 =
                            _iterator6.next()).done);
                          _iteratorNormalCompletion6 = true
                        ) {
                          var _feat3 = _step6.value;
                          _feat3.properties.potential = {};
                          for (
                            var _i9 = 0,
                              _Object$entries2 = Object.entries(field);
                            _i9 < _Object$entries2.length;
                            _i9++
                          ) {
                            var _Object$entries2$_i = _slicedToArray(
                                _Object$entries2[_i9],
                                2
                              ),
                              _year = _Object$entries2$_i[0],
                              _f = _Object$entries2$_i[1];
                            var val = _feat3.properties[_f];
                            if (val !== null) {
                              _feat3.properties.potential[_year] =
                                (val - min) * scale;
                            } else {
                              _feat3.properties.potential[_year] = undefined;
                            }
                          }
                        }
                      } catch (err) {
                        _didIteratorError6 = true;
                        _iteratorError6 = err;
                      } finally {
                        try {
                          if (
                            !_iteratorNormalCompletion6 &&
                            _iterator6.return != null
                          ) {
                            _iterator6.return();
                          }
                        } finally {
                          if (_didIteratorError6) {
                            throw _iteratorError6;
                          }
                        }
                      }
                    }
                    if (yearslider && field instanceof Object) {
                      // get selected year
                      field = find_current_year();
                    }
                  } catch (e) {
                    if (_map2.DEBUG) console.log(e);
                  } // write gradient color to feature, depending on scaled potential
                  var scale2d = chroma
                    .scale(["#4392d3", "#5add46", "#f8c621"])
                    .nodata("rgba(255, 255, 255, 0.0)")
                    .mode("lab");
                  var scale2dcolor = function scale2dcolor(x, y) {
                    // make sure to handle null and undefined correctly
                    var sum = (x || 0) + (y || 0);
                    var t = 0;
                    if (x) {
                      t = x / sum;
                    } else if (y) {
                      t = 1 - y / sum;
                    } else {
                      t = null;
                    }
                    var col = scale2d(t).hex(); // linear scale -> log scale. Seems to work with sum=0
                    var log_sum = Math.min(1 / (1 - Math.log10(sum)), 1);
                    var w = chroma
                      .scale(["rgba(255, 255, 255, 0.0)", col])
                      .mode("lab");
                    return w(log_sum);
                  };
                  var colorScale = chroma.scale(
                    chroma.brewer[options.potential]
                  );
                  data.features.map(function (d) {
                    var t = d.properties.potential[field];
                    if (options.potential2d) {
                      var colorStr =
                        "rgba(" + scale2dcolor(t[0], t[1]).rgba() + ")";
                      d.properties.color = colorStr;
                    } else {
                      // color gradients
                      var _colorStr =
                        "rgba(" + colorScale(t).alpha(0.7).rgba() + ")";
                      d.properties.color = _colorStr;
                    }
                  });
                  if (yearslider) {
                    // yearslider change: update layer color
                    yearslider.addEventListener("input", function (_) {
                      var year = find_current_year(); // at this point, the layer must have been added to map
                      var layer = _AHPLayers[input.id];
                      layer.eachLayer(function (l) {
                        if (
                          l &&
                          l.properties &&
                          l.properties.potential &&
                          colorScale
                        ) {
                          // potential is dependent on year
                          if (!(year in l.properties.potential)) return;
                          var t = l.properties.potential[year];
                          if (options.potential2d) {
                            var colorStr =
                              "rgba(" + scale2dcolor(t[0], t[1]).rgba() + ")";
                            if (l.setStyle) {
                              l.setStyle({
                                color: colorStr,
                                fillColor: colorStr,
                              });
                              l.redraw();
                            } else if (l.getElement && l.getElement()) {
                              l.getElement().firstChild.style.backgroundColor =
                                colorStr;
                            }
                          } else {
                            var _colorStr2 =
                              "rgba(" + colorScale(t).alpha(0.7).rgba() + ")";
                            if (l.setStyle) {
                              l.setStyle({
                                color: _colorStr2,
                                fillColor: _colorStr2,
                              });
                              l.redraw();
                            } else if (l.getElement && l.getElement()) {
                              l.getElement().firstChild.style.backgroundColor =
                                _colorStr2;
                            }
                          }
                        }
                      });
                    });
                  }
                }
                if (options.heat && !options.heatmax) {
                  options.heatmax = data.features.reduce(function (acc, cur) {
                    return Math.max(acc, cur.properties[options.heat]);
                  }, 0.0);
                }
                var layer = (0, _features.showData)(
                  data.features,
                  json.options
                );
                if (
                  yearslider &&
                  entry.years &&
                  entry.years instanceof Object
                ) {
                  layer.isYearLayer = true;
                  yearslider.parentElement.classList.remove("invisible"); // layer tooltips may be dependent on year
                  yearslider.addEventListener("input", function (_) {
                    var year = find_current_year();
                    layer.eachLayer(function (l) {
                      if (
                        l.properties &&
                        l.properties.descByYear &&
                        typeof l.properties.descByYear[year] !== "undefined"
                      ) {
                        // marker= popup, polygons: tooltip
                        l.setTooltipContent(l.properties.descByYear[year]);
                        l.setPopupContent(l.properties.descByYear[year]);
                      }
                    });
                  });
                }
                _AHPLayers[input.id] = layer; //if (options.heat)
                //_heatLayer = _AHPLayers[input.id];
                // set checkbox
                checkInput();
              })
              .catch(function (error) {
                if (_map2.DEBUG) console.log(error);
              });
          } else {
            // layer has been loaded before: re-add to map
            var _layer = _AHPLayers[input.id];
            if (yearslider && _layer.isYearLayer)
              yearslider.parentElement.classList.remove("invisible");
            _map.addLayer(_layer); // set checkbox
            checkInput();
          }
        } // remove layer from map
        // input: toggle switch HTML element with specific ID
        function removeLayerFromMap(input) {
          var layer = _AHPLayers[input.id];
          if (layer) _map.removeLayer(layer); // uncheck checkbox
          input.checked = false; // hide yearslider if no active year layer
          var yearslider = document.getElementById("yearslider");
          if (yearslider) {
            var yearslider_visible = Object.values(_AHPLayers).reduce(function (
              acc,
              l
            ) {
              return acc || (l && l.isYearLayer && _map.hasLayer(l));
            },
            false);
            if (yearslider_visible)
              yearslider.parentElement.classList.remove("invisible");
            else yearslider.parentElement.classList.add("invisible");
          } // disable legend if no other active element depends on it
          if (_AHPLegends[input.id]) {
            var legend = _AHPLegends[input.id].elem;
            var hideLegend = Object.entries(_AHPLegends).reduce(function (
              acc,
              cur
            ) {
              var curLegend = cur[1].elem;
              var item = document.getElementById(cur[0]);
              return acc || (curLegend === legend && item.checked);
            },
            false);
            _AHPLegends[input.id].activateFunc(hideLegend);
          }
        } // add data layer to map
        // called when selecting item from sidebar.
        // may be data from file or from server (fetched with GET request).
        // build description of each item.
        function loadAHPEntry(entry) {
          var p = new Promise(function (resolve, reject) {
            var to_fetch = "";
            if (entry.file)
              to_fetch =
                _AHPFolder +
                "data/" +
                _region.projectData +
                "/data/" +
                entry.file;
            if (entry.GET) {
              to_fetch = entry.GET;
              var spinner = document.getElementById("map-spinner");
              if (spinner) spinner.style.visibility = "visible";
            } //if(to_fetch.length == 0)
            //throw new Error("No source specified");
            // load individual AHP entry from file: read out data
            fetch(to_fetch, {
              credentials: "same-origin",
              headers: { "Content-Type": "application/json" },
            })
              .then(function (res) {
                return res.json();
              }) // parse file
              .then(function (data) {
                // get display options
                var options = entry.options || {}; // fix icon path
                //if(options.icon)
                //options.icon.file = _AHPFolder + 'markers/' + options.icon.file;
                options.name = ""; // don't show in layer selection
                // prepare layers for display on map
                data.features.map(function (d) {
                  //if(DEBUG) console.log(d);
                  // fix feature geom (lnglat->latlng), write info to description
                  (0, _features.reverseCoordinates)(d.geometry); // convert property (any type) to description string with
                  // optional unit
                  var prop_to_str = function prop_to_str(prop) {
                    var unit =
                      arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : null;
                    if (prop === null || typeof prop === "undefined") {
                      return "k.A.";
                    } else if (typeof unit === "string") {
                      return "" + prop + " " + unit;
                    } else {
                      return "" + prop;
                    }
                  }; // field: for mouseover text. may be single field, dictionary or "all"
                  // descFields: Analogous to 'field' but strictly for displaying the description. If it is present it overrides 'field'.
                  // chartFields: Analogous to 'descFields' but only for charts. If present overrides other two.
                  // order of importance
                  var fields =
                    entry.chartFields || entry.descFields || entry.field;
                  if (fields) {
                    // Render a description table row
                    var get_table_row = function get_table_row(key, value) {
                      var unit =
                        entry.units && entry.units[key] ? entry.units[key] : "";
                      return (
                        "<tr><td><b>" +
                        key +
                        '</b></td><td style="word-break: break-word;">' +
                        prop_to_str(value, unit) +
                        "</td></tr>"
                      );
                    };
                    var desc = ""; // special case all: get all property keys
                    if (fields == "all") {
                      for (var _p in d.properties) {
                        desc += get_table_row(_p, d.properties[_p]);
                      }
                    } else if (fields instanceof Array) {
                      for (var i = 0; i < fields.length; i++) {
                        desc += get_table_row(
                          fields[i],
                          d.properties[fields[i]]
                        );
                      }
                    } else if (fields instanceof Object) {
                      // dictionary: build table from field items
                      for (var key in fields) {
                        desc += get_table_row(key, d.properties[fields[key]]);
                      }
                    } else {
                      // single entry
                      desc += get_table_row(fields, d.properties[fields]);
                    }
                    if (desc) {
                      d.properties.desc =
                        '<table style="width:100%;">' + desc + "</table>";
                    } else {
                      d.properties.desc = "";
                    }
                  }
                  if (entry.chart) {
                    // save description (put in div next to chart)
                    if (entry.chartFields)
                      d.properties._chartDesc = d.properties.desc;
                    if (entry.chart.type == "line") {
                      d.properties.desc = (0, _chart.getLineChartDesc)(
                        d.properties,
                        entry.chart
                      );
                    } else if (entry.chart.type == "pie") {
                      d.properties.desc = (0, _chart.getPieChartDesc)(
                        d.properties
                      );
                    } else {
                      console.log(
                        "unsupported chart type: " + entry.chart.type
                      );
                    }
                  }
                  if (entry.years && entry.years instanceof Object) {
                    d.properties.descByYear = {};
                    Object.entries(entry.years).map(function (tuple) {
                      var key = tuple[1];
                      var year = tuple[0]; // Build description HTML
                      var desc = "";
                      if (key instanceof Array) {
                        // potential2d -> there are two keys
                        var unit_a =
                          entry.units && entry.units[key[0]]
                            ? entry.units[key[0]]
                            : "";
                        var unit_b =
                          entry.units && entry.units[key[1]]
                            ? entry.units[key[1]]
                            : "";
                        desc =
                          '<table style="width:100%;"><tr><td></td><td>Prognose</td></tr><tr><td><b>' +
                          entry.options.potential2d.descX +
                          " (" +
                          year +
                          ")" +
                          "</b></td><td>" +
                          prop_to_str(d.properties[key[0]], unit_a) +
                          "</td></tr><tr><td><b>" +
                          entry.options.potential2d.descY +
                          " (" +
                          year +
                          ")" +
                          "</b></td><td>" +
                          prop_to_str(d.properties[key[1]], unit_b) +
                          "</td></tr></table>";
                      } else {
                        // there is just a simple string key
                        var unit =
                          entry.units && entry.units[key]
                            ? entry.units[key]
                            : "";
                        desc =
                          '<table style="width:100%;"><tr><td><b>Jahr</b></td><td>Prognose</td></tr><tr><td><b>' +
                          year +
                          "</b></td><td>" +
                          prop_to_str(d.properties[key], unit) +
                          "</td></tr></table>";
                      } // Add description
                      if (d.properties.desc) {
                        d.properties.descByYear[year] =
                          d.properties.desc + desc;
                      } else {
                        d.properties.descByYear[year] = desc;
                      }
                    }); // set desc for current year
                    var yearslider = document.getElementById("yearslider");
                    if (yearslider) {
                      d.properties.desc =
                        d.properties.descByYear[yearslider.value];
                    } //d.properties.desc = '<b>Jahr ' + _currentYear + '</b>: ' + d.properties[entry.years[_currentYear]];
                    d.properties.years = entry.years;
                  }
                });
                resolve({ data: data, options: options });
              })
              .catch(function (error) {
                // Oops. Somewhere, something broke. Good luck.
                if (_map2.DEBUG) console.log(entry);
                if (_map2.DEBUG) console.log(error);
                reject(error);
              })
              .finally(function () {
                var spinner = document.getElementById("map-spinner");
                if (spinner) spinner.style.visibility = "hidden";
              });
          });
          return p;
        } // Add year slider to map
        function addYearSlider(years) {
          // Move year_div to map controls
          var yeardiv = document.getElementById("yearslider_div");
          var destination = document.querySelector(
            "div.leaflet-bottom.leaflet-left"
          );
          if (yeardiv && destination && years) {
            (function () {
              yeardiv = yeardiv.parentElement.removeChild(yeardiv);
              destination.appendChild(yeardiv); //yeardiv.classList.remove('invisible')
              yeardiv.style.margin = "0 1rem 1rem 480px"; // top - right - bottom - left
              var yearslider = (0, _utils.addElem)(
                "yearslider",
                null,
                yeardiv,
                "INPUT"
              );
              yearslider.id = "yearslider";
              yearslider.type = "range"; // add year slider ticks
              var yearticks = (0, _utils.addElem)(
                "yearsliderticks unselectable",
                null,
                yeardiv,
                "DIV"
              );
              var _loop2 = function _loop2(i) {
                var label = years[i]; // Hide every other tick label to avoid overlap.
                // TODO There is a clever generalization for higher
                // numbers of ticks which involves at least taking the
                // logarithm of the number of ticks to arrive at the
                // nearest number of skips necessary (one of
                // [1,2,5,10,20,50,100,200,...]).
                if (years.length > 11 && i % 2 != 0) {
                  label = "";
                }
                var elem = (0, _utils.addElem)(null, label, yearticks, "P");
                elem.addEventListener("click", function (_) {
                  yearslider.value = years[i];
                });
              };
              for (var i = 0; i < years.length && yearticks != undefined; i++) {
                _loop2(i);
              } // Set year values
              yearslider.min = years[0];
              yearslider.max = years[years.length - 1];
              yearslider.value =
                (window.sessionStorage
                  ? window.sessionStorage.currentYear
                  : undefined) || years[0]; // save selected year for later return
              // input AND change: ["input", "change"].forEach(evt => yearslider.addEventListener(evt, _ => ..., false));
              yearslider.addEventListener("input", function (_) {
                if (window.sessionStorage)
                  window.sessionStorage.currentYear = yearslider.value;
              }); // init time slider
              L.DomEvent.on(sidebar, "opening", function (_) {
                yeardiv.style.margin = "0 1rem 1rem 480px";
              });
              L.DomEvent.on(sidebar, "closing", function (_) {
                yeardiv.style.margin = "0 1rem 1rem 75px";
              });
            })();
          } // Prevent click events propagation to map
          L.DomEvent.disableClickPropagation(yeardiv); // Prevent right click event propagation to map
          L.DomEvent.on(yeardiv, "contextmenu", function (ev) {
            L.DomEvent.stopPropagation(ev);
          }); // Prevent scroll events propagation to map when cursor on the div
          L.DomEvent.disableScrollPropagation(yeardiv);
        }
      },
      { "./chart": 2, "./features": 6, "./map": 9, "./utils": 14 },
    ],
    2: [
      function (require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.getLineChartDesc = getLineChartDesc;
        exports.getPieChartDesc = getPieChartDesc;
        function _toConsumableArray(arr) {
          return (
            _arrayWithoutHoles(arr) ||
            _iterableToArray(arr) ||
            _nonIterableSpread()
          );
        }
        function _nonIterableSpread() {
          throw new TypeError(
            "Invalid attempt to spread non-iterable instance"
          );
        }
        function _iterableToArray(iter) {
          if (
            Symbol.iterator in Object(iter) ||
            Object.prototype.toString.call(iter) === "[object Arguments]"
          )
            return Array.from(iter);
        }
        function _arrayWithoutHoles(arr) {
          if (Array.isArray(arr)) {
            for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
              arr2[i] = arr[i];
            }
            return arr2;
          }
        }
        function getLineChartDesc(layerProperties, chartEntry) {
          // Read data series
          var series = [];
          if (chartEntry.seriesKey) {
            // copy series
            series = _toConsumableArray(layerProperties[chartEntry.seriesKey]);
          } else {
            // read series, key by key
            for (var i = 0; i < chartEntry.seriesKeys.length; i++) {
              series.push(layerProperties[chartEntry.seriesKeys[i]]);
            }
          }
          var data = { series: [series], labels: chartEntry.labels || [] }; // Apply simple box convolution to smoothen lines and create a separate series
          if (chartEntry.convolution) {
            var _series = data.series[0];
            var kernel = chartEntry.convolution;
            var conv_data = [];
            for (var _i = 0; _i < _series.length; _i++) {
              var sum = 0;
              for (var k = 0; k < kernel; k++) {
                var n = _i + k - Math.floor(kernel / 2); // bounds checking
                n = Math.min(_series.length - 1, Math.max(0, n));
                sum += _series[n];
              }
              conv_data.push(sum / kernel);
            }
            data.series.push(conv_data);
          } // CSS classes for charts
          var classNames = { line: "ct-line-green", area: "ct-area-green" };
          if (chartEntry.convolution) {
            classNames = { line: "ct-line-map", area: "ct-area-green" };
          } // Display only every x label on X axis
          var everyXLabel = chartEntry.everyXLabel || 1; // Create description as a function
          var desc = function desc() {
            var elem = document.createElement("div");
            var chartElem = document.createElement("div");
            chartElem.style.width = "250px";
            chartElem.style.height = "250px"; // display old description in own div
            if (layerProperties._chartDesc) {
              elem.innerHTML = layerProperties._chartDesc;
            } // append chart div (below optional description)
            elem.appendChild(chartElem);
            var options = {
              showPoint: false,
              axisX: {
                showGrid: true,
                labelInterpolationFnc: function labelInterpolationFnc(
                  value,
                  index
                ) {
                  return index % everyXLabel === 0 ? value : null;
                },
                axisTitle: chartEntry.axisXTitle || "",
              },
              axisY: { showGrid: true },
              classNames: classNames,
              plugins: [
                Chartist.plugins.ctAxisTitle({
                  axisX: {
                    axisTitle: chartEntry.axisXTitle || "",
                    offset: { x: 0, y: 30 },
                  },
                  axisY: {
                    axisTitle: chartEntry.axisYTitle || "",
                    offset: { x: 0, y: 10 },
                    flipTitle: true,
                  },
                }),
              ],
            }; // assign options from entry to chartist options
            if (chartEntry.options) {
              options = Object.assign(options, chartEntry.options);
            }
            new Chartist.Line(chartElem, data, options);
            return elem;
          };
          return desc;
        }
        function getPieChartDesc(layerProperties) {
          // Read data series
          var data = { labels: [], series: [] };
          var additional_info = [];
          for (
            var _i2 = 0, _Object$entries = Object.entries(layerProperties);
            _i2 < _Object$entries.length;
            _i2++
          ) {
            var p = _Object$entries[_i2];
            if (isNaN(Number(p[1]))) {
              //additional_info.push(Object.fromEntries([p]));
              var entry = {};
              entry[p[0]] = p[1];
              additional_info.push(entry);
            } else {
              data.labels.push(p[0]);
              data.series.push({ meta: p[0] + ":", value: Number(p[1]) });
            }
          }
          var total = data.series.reduce(function (a, c) {
            return a + c;
          }, 0);
          var desc = function desc() {
            var elem = document.createElement("div");
            elem.style.width = "250px";
            elem.style.height = "250px"; //elem.textContent = additional_info;
            if (!total) return elem;
            new Chartist.Pie(elem, data, {
              // no label when slice < 10%
              //labelInterpolationFnc: function(value) {if ((data[value] / total) > 0.1) return value; else return null;},
              ignoreEmptyValues: true,
              plugins: [
                Chartist.plugins.tooltip({
                  anchorToPoint: false,
                  appendToBody: true,
                  class: "ct-tooltip",
                }),
              ],
              width: "250px",
              height: "250px", // otherwise, Chartist cannot set correct size because of hidden sidebar panel
            });
            return elem;
          };
          return desc;
        }
      },
      {},
    ],
    3: [
      function (require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.renderSidebarChat = renderSidebarChat;
        exports.handleChatRefresh = handleChatRefresh;
        exports.handleChatSubmit = handleChatSubmit;
        exports.renderChat = renderChat;
        var _map = require("./map");
        var _lis_modal = require("./lis_modal");
        var _utils = require("./utils");
        function renderSidebarChat() {
          renderChat(_chat_messages, "chatboxes", function (x) {
            return !x.msgtype.startsWith("Comment");
          });
        }
        function handleChatRefresh() {
          // fetch POST request with empty message to refresh the chat
          var button = document.getElementById("chat_refresh_btn");
          var form = document.getElementById("chatform");
          var form_data = new FormData();
          if (!button || !form) {
            return;
          }
          form_data.append("region", form.chat_region.value);
          form_data.append(
            "csrfmiddlewaretoken",
            form.csrfmiddlewaretoken.value
          );
          form_data.append("message", "");
          button.disabled = true;
          (0, _utils.fetchPost)("chat/", form_data, 30000)
            .then(function (response) {
              return response.json();
            })
            .then(function (msg) {
              _chat_messages = msg;
              renderSidebarChat();
              form.scrollIntoView();
            })
            .catch(function (err) {
              if (_map.DEBUG) console.log(err);
            })
            .finally(function () {
              button.disabled = false;
            });
        }
        function handleChatSubmit() {
          var button = document.getElementById("chat_submit_btn");
          var message_area = document.getElementById("chatarea");
          if (!message_area || !button) {
            return; //oops
          }
          button.disabled = true;
          (0, _utils.fetchPost)("chat/", "chatform", 120000)
            .then(function (response) {
              return response.json();
            })
            .then(function (msg) {
              _chat_messages = msg;
              renderSidebarChat();
              var form = document.getElementById("chatform");
              form.scrollIntoView();
            })
            .catch(function (err) {
              if (_map.DEBUG) console.log(err);
            })
            .finally(function () {
              message_area.value = "";
              button.disabled = false;
            });
        } // Turn a message with an event (= not a simple chat message) to an element
        // and place it inside the given parent element.
        // timeHM should be a string that contains the event time.
        // lisDict should be a dictionary(/object) with LIS-id as keys and LIS-objects as values.
        function addChatEventElement(
          message,
          users,
          parentElem,
          timeHM,
          lisDict
        ) {
          var msgtype = message.msgtype;
          var user = users[message.user];
          var username = user
            ? user.first_name + " " + user.last_name
            : "Eine NutzerIn";
          var region_name = _region.name || false;
          var lis = lisDict[message.LIS];
          var lis_elem;
          if (lis) {
            lis_elem = document.createElement("A");
            lis_elem.textContent = lis.name;
            lis_elem.classList.add("chat-message-link");
            lis_elem.addEventListener("click", function (_) {
              (0, _lis_modal.highlightCCP)(lis.id);
              return false;
            });
          } else {
            lis_elem = document.createElement("SPAN");
            lis_elem.textContent = "einen Ladestandort";
          }
          var addEvent = function addEvent(textA, elem, textB, msgtype) {
            var div = (0, _utils.addElem)("chat-event", "", parentElem, "DIV");
            if (msgtype) {
              div.classList.add("chat-event-" + msgtype);
            }
            (0, _utils.addElem)("chat-user", username, div, "SPAN");
            if (textA) {
              (0, _utils.addElem)("", " " + textA, div, "SPAN");
            }
            if (elem) {
              div.appendChild(elem);
            }
            if (textB) {
              (0, _utils.addElem)("", textB, div, "SPAN");
            }
            (0, _utils.addElem)("chat-time", " - " + timeHM, div, "SPAN");
            return div;
          };
          switch (msgtype) {
            case "Comment_created":
              addEvent("hat einen Kommentar erstellt", null, null, msgtype);
              break;
            case "Comment_removed":
              addEvent("hat einen Kommentar entfernt", null, null, msgtype);
              break;
            case "Project_created":
              if (region_name) {
                addEvent(
                  "hat das Projekt " + region_name + " erstellt",
                  null,
                  null,
                  msgtype
                );
              } else {
                addEvent("hat dieses Projekt erstellt", null, null, msgtype);
              }
              break;
            case "Evaluation_started":
              addEvent("hat eine Bewertung gestartet", null, null, msgtype);
              break;
            case "LIS_created":
              addEvent("hat ", lis_elem, " erstellt", msgtype);
              break;
            case "LIS_checklist":
              addEvent(
                "hat die Checkliste fÃ¼r ",
                lis_elem,
                " verÃ¤ndert",
                msgtype
              );
              break;
            case "LIS_desc": // legacy
              addEvent("hat ", lis_elem, " kommentiert", msgtype);
              break;
            case "LIS_description": // not legacy, kinda new
              addEvent(
                "hat die Beschreibung fÃ¼r ",
                lis_elem,
                " bearbeitet",
                msgtype
              );
              break;
            case "LIS_file_added":
              addEvent(
                "hat eine Datei fÃ¼r ",
                lis_elem,
                " hochgeladen",
                msgtype
              );
              break;
            case "LIS_file_removed":
              addEvent("hat eine Datei von ", lis_elem, " entfernt", msgtype);
              break;
            case "LIS_message_created":
              addEvent(
                "hat eine Nachricht fÃ¼r ",
                lis_elem,
                " erstellt",
                msgtype
              );
              break;
            case "LIS_moved":
              addEvent("hat ", lis_elem, " verschoben", msgtype);
              break;
            case "LIS_power_table":
              addEvent("hat ", lis_elem, " erweitert", msgtype);
              break;
            case "LIS_removed":
              addEvent("hat ", lis_elem, " entfernt", msgtype);
              break;
            case "LIS_renamed":
              addEvent("hat ", lis_elem, " umbenannt", msgtype);
              break;
            case "LIS_search_created":
              addEvent(
                "hat einen Suchraum fÃ¼r ",
                lis_elem,
                " bestimmt",
                msgtype
              );
              break;
            case "LIS_search_removed":
              addEvent(
                "hat einen Suchraum fÃ¼r ",
                lis_elem,
                " entfernt",
                msgtype
              );
              break;
            case "User_invited":
              addEvent("hat einen neuen User eingeladen", null, null, msgtype);
              break;
            case "User_removed":
              addEvent("hat einen User ausgeladen", null, null, msgtype);
              break;
            default:
              console.log("Unexpected message type", msgtype);
          }
        }
        function renderChat(messages_obj) {
          var chatId =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : "chatboxes";
          var messagesFilter = arguments.length > 2 ? arguments[2] : undefined;
          var context =
            arguments.length > 3 && arguments[3] !== undefined
              ? arguments[3]
              : "region";
          var chatboxes = document.getElementById(chatId);
          if (!chatboxes) return; // remove all chat messages
          chatboxes.innerHTML = "";
          var users = messages_obj["users"];
          var messages = messages_obj["messages"];
          if (messagesFilter) {
            messages = messages.filter(messagesFilter);
          }
          var lisDict = {};
          for (var _i = 0; _i < _markers.length; _i++) {
            lisDict[_markers[_i].properties.id] = _markers[_i].properties;
          }
          var getTimeHM = function getTimeHM(datetime) {
            return (
              datetime.getHours().toString().padStart(2, "0") +
              ":" +
              datetime.getMinutes().toString().padStart(2, "0")
            );
          };
          var day = "";
          var i = 0;
          for (i = 0; i < messages.length; i++) {
            var box = document.createElement("P");
            var datetime = new Date(messages[i].timestamp * 1000); // day
            var cur_day = datetime.toDateString();
            if (cur_day !== day) {
              day = cur_day;
              (0, _utils.addElem)(
                "chat-date",
                datetime.toLocaleDateString(),
                box,
                "DIV"
              );
            } // chat message header
            var chat_header = document.createElement("SPAN");
            {
              chat_header.classList.add("chat-header");
              if (messages[i].user) {
                var user = users[messages[i].user];
                if (user) {
                  var span = (0, _utils.addElem)(
                    "chat-user",
                    user.first_name + " " + user.last_name,
                    chat_header,
                    "SPAN"
                  );
                  if (user.is_self) {
                    span.classList.add("chat-user-is-self");
                  }
                  chat_header.appendChild(document.createTextNode(" ("));
                  (0, _utils.addElem)(
                    "chat-user-company",
                    user.company,
                    chat_header,
                    "SPAN"
                  );
                  chat_header.appendChild(document.createTextNode(") - "));
                }
              }
              (0, _utils.addElem)(
                "chat-time",
                getTimeHM(datetime),
                chat_header,
                "SPAN"
              );
            }
            var user_id = messages[i].user;
            var lis_id = messages[i].LIS;
            var should_display_message = function should_display_message(
              message
            ) {
              return (
                (context === "region" &&
                  message.message &&
                  message.msgtype !== "LIS_message_created") ||
                (context === "lis" && message.message)
              );
            };
            if (should_display_message(messages[i])) {
              box.appendChild(chat_header);
              if (messages[i].LIS) {
                (function () {
                  //TODO this if block can be removed if we don't care anymore
                  // about the correct rendering of old messages.
                  var id = messages[i].LIS; // place link for this LIS
                  var div = (0, _utils.addElem)("chat-message", "", box, "DIV");
                  var ancor = (0, _utils.addElem)(
                    "chat-message-link",
                    messages[i].message,
                    div,
                    "A"
                  );
                  ancor.addEventListener("click", function (_) {
                    (0, _lis_modal.highlightCCP)(id);
                    return false;
                  });
                })();
              } else {
                // chat message itself
                (0, _utils.addElem)(
                  "chat-message",
                  messages[i].message,
                  box,
                  "DIV"
                );
              }
            } else {
              // Peek at next messages.
              // Look for similar LIS messages that can be grouped into a block
              var blockLength = 0;
              for (var k = i; k < messages.length && lis_id; k++) {
                var cur_user_id = messages[k].user;
                var cur_lis_id = messages[k].LIS;
                var msgtype = messages[k].msgtype;
                var k_day = datetime.toDateString();
                if (k_day != cur_day) {
                  // do not create blocks spanning over midnight
                  break;
                } else if (
                  should_display_message(messages[k]) ||
                  msgtype === "LIS_created" ||
                  msgtype === "LIS_removed"
                ) {
                  break;
                } else if (cur_user_id == user_id && cur_lis_id == lis_id) {
                  blockLength++;
                } else {
                  break; // last message with same user and lis
                }
              }
              if (blockLength <= 1) {
                addChatEventElement(
                  messages[i],
                  messages_obj.users,
                  box,
                  getTimeHM(datetime),
                  lisDict
                );
              } else {
                var dt;
                (function () {
                  // create block of events
                  var block = document.createElement("div");
                  {
                    block.classList.add("chat-event-block");
                    block.style.maxHeight = "" + 0;
                    for (var m = i; m < i + blockLength; m++) {
                      dt = new Date(messages[m].timestamp * 1000);
                      addChatEventElement(
                        messages[m],
                        messages_obj.users,
                        block,
                        getTimeHM(dt),
                        lisDict
                      );
                    }
                  } // create block header
                  {
                    var lis = lisDict[lis_id];
                    var lis_elem;
                    if (lis) {
                      lis_elem = document.createElement("A");
                      lis_elem.textContent = lis.name;
                      lis_elem.classList.add("chat-message-link");
                      lis_elem.addEventListener("click", function (_) {
                        (0, _lis_modal.highlightCCP)(lis.id);
                        return false;
                      });
                    } else {
                      lis_elem = document.createElement("SPAN");
                      lis_elem.textContent = "einen Ladestandort";
                    }
                    {
                      var div = (0, _utils.addElem)(
                        "chat-event",
                        "",
                        box,
                        "DIV"
                      );
                      div.classList.add("chat-event-block-header");
                      var _user = users[user_id];
                      if (_user) {
                        var username = _user.first_name + " " + _user.last_name;
                        (0, _utils.addElem)("chat-user", username, div, "SPAN");
                        (0, _utils.addElem)("", " hat ", div, "SPAN");
                      }
                      div.appendChild(lis_elem);
                      (0, _utils.addElem)("", " editiert", div, "SPAN"); // add time span (last timestamp of block)
                      // dt is still set from looping over events
                      (0, _utils.addElem)(
                        "chat-time",
                        " - " + getTimeHM(dt),
                        div,
                        "SPAN"
                      );
                      var toggle = document.createElement("SPAN");
                      toggle.classList.add(
                        "chat-event-block-toggle",
                        "block-hidden"
                      );
                      toggle.appendChild(document.createElement("i"));
                      div.appendChild(toggle);
                      toggle.addEventListener("click", function (_) {
                        if (toggle.classList.contains("block-hidden")) {
                          toggle.classList.remove("block-hidden");
                          block.style.maxHeight = block.scrollHeight + "px";
                        } else {
                          toggle.classList.add("block-hidden");
                          block.style.maxHeight = "" + 0;
                        }
                      });
                    }
                  } // add block after header
                  box.appendChild(block); // skip messages that have been processed
                  if (blockLength > 1) {
                    i += blockLength - 1;
                  }
                })();
              }
            }
            chatboxes.appendChild(box);
          }
        }
      },
      { "./lis_modal": 8, "./map": 9, "./utils": 14 },
    ],
    4: [
      function (require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.createComment = createComment;
        exports.updateComment = updateComment;
        exports.handleCommentRefresh = handleCommentRefresh;
        exports.handleCommentSubmit = handleCommentSubmit;
        exports.deleteComment = deleteComment;
        var _map = require("./map");
        var _features = require("./features");
        var _chat = require("./chat");
        var _utils = require("./utils");
        function createComment(e) {
          // create new comment in backend
          // populate form
          var form = document.getElementById("comment_form");
          form.comment_id.value = "";
          form.comment_msg.value = (0, _utils.geoJSONdumps)(e.latlng);
          (0, _utils.fetchPost)("comment/", "comment_form", 10000)
            .then(function (response) {
              return response.json();
            })
            .then(function (data) {
              if (data.comment) {
                _region.comment = data.comment; // display comments (because of rejectDouble, only last will be added)
                (0, _features.showResult)(data); // get new comment (last comment added)
                var numComments = _commentLayer.getLayers().length;
                var lastComment = _commentLayer.getLayers()[numComments - 1]; // open popup of new comment
                updateComment(lastComment);
              }
              if (data.message) {
                alert(data.message);
              }
            })
            .catch(function (err) {
              if (_map.DEBUG) console.log(err);
            });
        }
        function renderComment(comment_id) {
          (0, _chat.renderChat)(_chat_messages, "comment_chat", function (c) {
            return c.comment == comment_id;
          });
        }
        function updateComment(comment) {
          if (!comment) return;
          var form = document.getElementById("comment_form");
          form.comment_id.value = comment.properties.id;
          form.comment_msg.value = "";
          renderComment(comment.properties.id);
          $("#comment_modal").foundation("open");
          form.comment_msg.focus();
        }
        function handleCommentRefresh() {
          // fetch POST request with empty message to refresh the chat
          var button = document.getElementById("comment_refresh_btn");
          var form = document.getElementById("comment_form");
          if (!button || !form) {
            return;
          }
          var oldMsg = form.comment_msg.value;
          form.comment_msg.value = "";
          button.disabled = true;
          (0, _utils.fetchPost)("comment/", "comment_form", 5000)
            .then(function (response) {
              return response.json();
            })
            .then(function (msg) {
              if (msg.comment) {
                _region.comment = msg.comment;
              }
              if (msg.messages) {
                _chat_messages = msg.messages;
              }
              var cid = document.getElementById("comment_id");
              renderComment(cid.value);
            })
            .catch(function (err) {
              if (_map.DEBUG) console.log(err);
            })
            .finally(function () {
              button.disabled = false;
            });
          form.comment_msg.value = oldMsg;
        }
        function handleCommentSubmit() {
          (0, _utils.fetchPost)("comment/", "comment_form", 5000)
            .then(function (response) {
              return response.json();
            })
            .then(function (msg) {
              if (msg.comment) {
                _region.comment = msg.comment;
              }
              if (msg.messages) {
                _chat_messages = msg.messages;
              }
              var cid = document.getElementById("comment_id");
              renderComment(cid.value);
            })
            .catch(function (err) {
              if (_map.DEBUG) console.log(err);
            })
            .finally(function () {
              document.getElementById("comment_msg").value = "";
            });
        }
        function deleteComment(target) {
          var form = document.getElementById("comment_form");
          form.comment_id.value = -target.properties.id;
          (0, _utils.fetchPost)("comment/", "comment_form", 10000)
            .then(function (_) {
              target.remove();
            })
            .catch(function (err) {
              if (_map.DEBUG) console.log(err);
            });
        }
      },
      { "./chat": 3, "./features": 6, "./map": 9, "./utils": 14 },
    ],
    5: [
      function (require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.renderDebugInfo = renderDebugInfo;
        function renderDebugInfo() {
          var ta = document.getElementById("debug_info_textarea");
          if (ta) {
            ta.value = JSON.stringify(_debug_info, null, 4);
          }
        }
      },
      {},
    ],
    6: [
      function (require, module, exports) {
        "use strict"; //(window as any).$ = $;
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.reverseCoordinates = reverseCoordinates;
        exports.showResult = showResult;
        exports.obj2FeatureArray = obj2FeatureArray;
        exports.showData = showData;
        exports.setHeatColormap = setHeatColormap;
        exports.exportLISasCSV = exportLISasCSV;
        exports.exportLISasJSON = exportLISasJSON;
        exports.exportPotential = exportPotential;
        var _map2 = require("./map");
        var _layer = require("./layer");
        var _lis_modal = require("./lis_modal");
        var _comment_modal = require("./comment_modal");
        var _utils = require("./utils");
        function _slicedToArray(arr, i) {
          return (
            _arrayWithHoles(arr) ||
            _iterableToArrayLimit(arr, i) ||
            _nonIterableRest()
          );
        }
        function _nonIterableRest() {
          throw new TypeError(
            "Invalid attempt to destructure non-iterable instance"
          );
        }
        function _iterableToArrayLimit(arr, i) {
          if (
            !(
              Symbol.iterator in Object(arr) ||
              Object.prototype.toString.call(arr) === "[object Arguments]"
            )
          ) {
            return;
          }
          var _arr = [];
          var _n = true;
          var _d = false;
          var _e = undefined;
          try {
            for (
              var _i = arr[Symbol.iterator](), _s;
              !(_n = (_s = _i.next()).done);
              _n = true
            ) {
              _arr.push(_s.value);
              if (i && _arr.length === i) break;
            }
          } catch (err) {
            _d = true;
            _e = err;
          } finally {
            try {
              if (!_n && _i["return"] != null) _i["return"]();
            } finally {
              if (_d) throw _e;
            }
          }
          return _arr;
        }
        function _arrayWithHoles(arr) {
          if (Array.isArray(arr)) return arr;
        } // swap items in two-item array
        function swap(tuple) {
          if (tuple.length != 2) return;
          var tmp = tuple[0];
          tuple[0] = tuple[1];
          tuple[1] = tmp;
        } // lnglat <-> latlng
        function reverseCoordinates(geom) {
          if (!geom || !geom.type || !geom.coordinates) return geom; // depends on geometry type
          switch (geom.type) {
            default:
              console.log(
                'Unknown geometry type detected: "' +
                  geom.type +
                  '". Reverting to Point.'
              );
              console.log(geom);
              swap(geom.coordinates);
              break;
            case "Point":
              swap(geom.coordinates);
              break;
            case "LineString":
            case "MultiPoint":
              geom.coordinates.map(function (coords) {
                swap(coords);
              });
              break;
            case "Polygon":
            case "MultiLineString":
              geom.coordinates.map(function (node) {
                node.map(function (coords) {
                  swap(coords);
                });
              });
              break;
            case "MultiPolygon":
              geom.coordinates.map(function (polygon) {
                polygon.map(function (node) {
                  node.map(function (coords) {
                    swap(coords);
                  });
                });
              });
              break;
          }
          return geom;
        }
        /************************ geoJSON ************************/ /* Show data on map.
    data: object with JSON-array entries, usually as computation result
    params: optional form parameter
        - radius: array with radius from form - [area, demand]
        - icon: path to image to display on map/legend. may be array with second element as shadow
*/ function showResult(data) {
          // default values
          var params = data.params || {};
          if (data.potential)
            // update heat layer
            _heatLayer = showData(obj2FeatureArray(data.potential), {
              name: "Potenzial",
              heat: "int",
              radius: params.radius,
            });
          if (data.LIS)
            showData(obj2FeatureArray(data.LIS), {
              name: "Bestands-LIS",
              fit: !data.border && !data.POI_coverage && !data.POI_demand,
              color: _map2.COLORS.LIS,
              clustered: true,
              clusterClass: "marker-cluster-lis",
              clusterPolyColor: _map2.COLORS.LIS, //radius: params.radius,
              rejectDoubles: "id",
              rejectDoubleRadius: "id",
              icon: [_mapIconPaths.ex_LIS, _mapIconPaths.shadow],
            });
          if (data.POI_demand && data.POI_demand.length > 0) {
            //let ordered = data.POI_demand.sort((a,b) => {return a.order > b.order;});
            showData(obj2FeatureArray(data.POI_demand), {
              name: "SuchrÃ¤ume",
              fit: !data.border,
              color: _map2.COLORS.proposed,
              clustered: true,
              clusterClass: "marker-cluster-poi-demand",
              clusterPolyColor: _map2.COLORS.proposed,
              customCP: true,
              radius: -params.radius,
            });
          }
          if (data.recommend && data.recommend.length > 0) {
            showData(obj2FeatureArray(data.recommend), {
              name: "VorschlÃ¤ge",
              fit: false,
              color: _map2.COLORS.proposed,
              clustered: true,
              clusterClass: "marker-cluster-poi-demand",
              clusterPolyColor: _map2.COLORS.proposed,
              customCP: true,
              icon: [_mapIconPaths.normal_proposed, _mapIconPaths.shadow],
            });
          }
          if (data.customLIS) {
            // update marker layer
            _markerLayer = showData(obj2FeatureArray(data.customLIS), {
              name: "Meine Ladestandorte",
              fit: false,
              color: _map2.COLORS.POI_custom,
              clustered: true,
              clusterClass: "marker-cluster-poi-custom",
              clusterPolyColor: _map2.COLORS.POI_custom,
              customCP: true,
              rejectDoubles: "id",
              divIconFunc: "custom_cp",
              markerGroup: _markerLayer,
              icon: [
                _mapIconPaths.CCP,
                _mapIconPaths.CCP_locked,
                _mapIconPaths.shadow,
              ],
            });
          }
          if (data.comment)
            showData(obj2FeatureArray(data.comment), {
              name: "",
              fit: false,
              clustered: false,
              comment: true,
              markerGroup: _commentLayer,
              rejectDoubles: "id",
              icon: { file: _mapIconPaths.dot, height: 20, width: 20 },
            });
          if (
            data.params &&
            data.params.restricted &&
            data.params.restricted.length > 0
          )
            showData(obj2FeatureArray(data.params.restricted), {
              name: "Verbotene Zonen",
              fit: false,
              color: _map2.COLORS.restricted,
              rejectDoubles: "id",
              restricted: true,
            });
          if (data.evaluation)
            showEvaluation(obj2FeatureArray(data.evaluation[0])[0]);
        } // Convert (geo)JSON object to array of features with geometry and properties members
        function obj2FeatureArray(obj) {
          //if(!(obj instanceof Array)){
          if (!(obj.length >= 0)) {
            obj = [obj];
          }
          var features = obj.map(function (o) {
            // build feature
            var feature = { type: "Feature", properties: {} }; //if(o instanceof Object){ // Objects may come from form -> object-like. Hope for the best.
            for (var key in o) {
              if (!o.hasOwnProperty(key)) continue; // skip prototype properties
              if (key === "geom") feature.geometry = o.geom;
              else feature.properties[key] = o[key];
            } //}
            reverseCoordinates(feature.geometry);
            return feature;
          });
          return features;
        } // Create a Custom CP Icon
        // Its different parts (image, shadow, number) can be accessed by classes.
        function createCustomCPIcon(layerOptions, feature) {
          var icon = document.createElement("div");
          var img = document.createElement("img"); //img.src = feature.properties.locked? layerOptions.icon[1] : layerOptions.icon[0];
          img.src = layerOptions.icon[feature.properties.locked + 0];
          img.width = 40;
          img.height = 33;
          var shadow = document.createElement("img");
          shadow.src = _mapIconPaths.shadow; //if (feature.properties.power_table){
          //let num = document.createElement('div');
          //num.textContent = feature.properties.power_table.reduce((a,c) => a+c.count, 0);
          //num.classList.add('custom-cp-icon-number');
          //icon.appendChild(num);
          //}
          icon.appendChild(shadow);
          icon.appendChild(img); // CSS classes
          img.classList.add("custom-cp-icon-img");
          shadow.classList.add("custom-cp-icon-shadow");
          return {
            html: icon,
            className: "custom-cp-icon",
            iconSize: [40, 33],
            iconAnchor: [20, 33],
            popupAnchor: [0, -25],
          }; //return {html: icon, className: "custom-cp-icon"};
        } // Create a Existing LIS Icon
        // Its different parts (image, shadow, number) can be accessed by classes.
        function createExistingLISIcon(_layerOptions, feature) {
          var icon = document.createElement("div");
          var img = document.createElement("img");
          if (feature.properties.power < 22.0) {
            img.src = _AHPFolder + "resources/Icon_existing_low_power.svg";
          } else if (feature.properties.power <= 75.0) {
            img.src = _AHPFolder + "resources/Icon_existing_medium_power.svg";
          } else {
            img.src = _AHPFolder + "resources/Icon_existing_high_power.svg";
          }
          img.width = 37;
          img.height = 45;
          var shadow = document.createElement("img");
          shadow.src = _mapIconPaths.shadow;
          var num = document.createElement("div");
          num.textContent = feature.properties.count || "ðŸ—²";
          icon.appendChild(shadow);
          icon.appendChild(img);
          icon.appendChild(num); // CSS classes
          img.classList.add("existing-lis-icon-img");
          shadow.classList.add("existing-lis-icon-shadow");
          num.classList.add("existing-lis-icon-number");
          return {
            html: icon,
            className: "existing-lis-icon",
            iconSize: [37, 45],
            iconAnchor: [37 * 0.5, 45],
            popupAnchor: [0, -45],
          };
        } // Create an H2 order icon.
        // Its different parts (shadow, base_image, image, ...) can be accessed by classes.
        function createH2OrderIcon(_layerOptions, feature) {
          var icon = document.createElement("div");
          var order = feature.properties;
          var base = document.createElement("img");
          base.src = _AHPFolder + "resources/Icon_h2order.svg";
          base.width = 37;
          base.height = 45;
          var img = document.createElement("img");
          img.src = order.icon.file;
          img.width = order.icon.width;
          img.height = order.icon.height;
          var shadow = document.createElement("img");
          shadow.src = _mapIconPaths.shadow;
          var typ = document.createElement("div");
          if (order.order_type == 1) {
            typ.classList.add("h2order-icon-typ-buy");
          } else if (order.order_type == 2) {
            typ.classList.add("h2order-icon-typ-sell");
          }
          icon.appendChild(shadow);
          icon.appendChild(base);
          icon.appendChild(img);
          icon.appendChild(typ); // CSS classes
          shadow.classList.add("h2order-icon-shadow");
          base.classList.add("h2order-icon-base");
          img.classList.add("h2order-icon-img");
          typ.classList.add("h2order-icon-typ");
          return {
            html: icon,
            className: "h2order-icon",
            iconSize: [37, 45],
            iconAnchor: [37 * 0.5, 45],
            popupAnchor: [0, -45],
          };
        } // Create a funded LIS Icon
        // Its different parts (image, shadow) can be accessed by classes.
        function createFundedLisColorIcon(_layerOptions, feature, color_name) {
          var icon = document.createElement("div");
          var img = document.createElement("img");
          if (feature.properties.lpTyp === "NLP") {
            img.src =
              _AHPFolder + "resources/Icon_funded_" + color_name + "_n.svg";
          } else if (feature.properties.lpTyp === "SLP1") {
            img.src =
              _AHPFolder + "resources/Icon_funded_" + color_name + "_s1.svg";
          } else if (feature.properties.lpTyp === "SLP2") {
            img.src =
              _AHPFolder + "resources/Icon_funded_" + color_name + "_s2.svg";
          } else {
            img.src = _AHPFolder + "resources/Icon_existing_low_power.svg";
          }
          img.width = 37;
          img.height = 45;
          var shadow = document.createElement("img");
          shadow.src = _mapIconPaths.shadow;
          icon.appendChild(shadow);
          icon.appendChild(img); // CSS classes
          img.classList.add("existing-lis-icon-img");
          shadow.classList.add("existing-lis-icon-shadow");
          return {
            html: icon,
            className: "existing-lis-icon",
            iconSize: [37, 45],
            iconAnchor: [37 * 0.5, 45],
            popupAnchor: [0, -45],
          };
        } // Create a funded LIS Icon
        function createFundedLisGreenIcon(_layerOptions, feature) {
          return createFundedLisColorIcon(_layerOptions, feature, "green");
        } // Create a funded LIS Icon
        function createFundedLisRedIcon(_layerOptions, feature) {
          return createFundedLisColorIcon(_layerOptions, feature, "red");
        } // Create a funded LIS Icon
        function createFundedLisBlueIcon(_layerOptions, feature) {
          return createFundedLisColorIcon(_layerOptions, feature, "blue");
        } // Select a suitable function to draw a DIV icon
        function getDivIconFunc(func_id) {
          if (func_id == "existing_lis") {
            return createExistingLISIcon;
          } else if (func_id == "custom_cp") {
            return createCustomCPIcon;
          } else if (func_id == "h2order") {
            return createH2OrderIcon;
          } else if (func_id == "funded_lis_green") {
            return createFundedLisGreenIcon;
          } else if (func_id == "funded_lis_red") {
            return createFundedLisRedIcon;
          } else if (func_id == "funded_lis_blue") {
            return createFundedLisBlueIcon;
          }
          console.log("div icon func not found: " + func_id);
          return null;
        }
        /*  display feature collection on map

    input:
    data: array of features.
    Each feature contains:
        - type: ignored (['Feature'])
        - geometry
            - coordinates (WGS84): lat/lng array
            - type ([Point], LineString, Polygon, MultiPolygon)
        - properties
            - desc (optional): description. May be string or array [opacity, description text] for polyLine features
            - color (optional): individual color for each feature.
            - (Custom keys, like id: OSM id of POI, 0 for virtual POIs)
    options so far:
        clustered - cluster features when they are close to each other. You can specify a clusterRadius in pixels. [false]
        clusterClass - custom class for markerCluster. Possible suffixes for different cluster sizes: "-small", "-medium", "-large" (See app.css, e.g. marker-cluster-poi-small)
        clusterPolyColor - custom color for markerCluster polygon
        color - color of all shapes. Supports HTML colors ("#0000FF", "rgba(0,1,2,0.5)", "Green") [random]
        customCP - point can be permanently added to region, or already is (id is given) [false]
        divIconFunc - ID of function that will be called with current
            options and features object as arguments. The return value
            will be used as the argument for the divIcon constructor.
            This can be used to create "dynamic" markers that change
            appearance based on feature values.
        fit - zoom map to show all features. [false]
        fillOpacity - fillColor of points and polygons
        fillColor - fillColor of polygons, same type as color
        heat - show heatmap of points. Given argument is attribute used for intensity (0.0 - heatmax)
        heatmax - maximum value for heatmap intensity [1.0]
        icon - icon to use. This is set in the layer name as well. []
        lineDarken - darkens stroke color, by using chroma.darken function. value > 1.0 = darker color, value < 1.0 = lighter color
        lineOpacity - stroke opacity from 0.0 to 1.0, for lines and polygons
        lineWidth - stroke weight for lines and polygons in pixels
        name - displayed name of layer. Empty name: layer not listed in control box
        radius - radius around points, shown as semi-transparent circle. Can be negative (draws only circles). Defines dash pattern of lines. []
        rejectDoubles - check first for given key values in the current markerGroup. []
        rejectDoubleRadius - check previous feature for same property value, whether radius is already present []
        restricted - feature collection defines restricted zones. [false]
        markerGroup - use existing markerGroup instead of new one. []
        radiusGroup - use existing radiusGroup instead of new one. []
        smoothFactor - set simplification factor of polygons: 3 = pretty rough, 0.6 = lots details

    output: layers where features were added. May be featureGroup, markerClusterGroup or array
*/ function showData(data, options) {
          var _a, _b;
          if (!data || data.length == 0) return;
          options = options || []; //default (empty) options
          // no name -> no entry in layer control
          if (!options.name) options.name = ""; // search for name in overlays
          options.radiusGroupName = options.name + " Radius"; // icon: add to layer control name (but not to radius name)
          if (options.name && options.icon) {
            if (options.icon instanceof Array)
              options.name =
                " <img src=" +
                options.icon[0] +
                ' style="height: 1.6rem; width: 1.3rem;"> ' +
                options.name;
            else
              options.name =
                " <img src=" + options.icon.file + "> " + options.name;
          }
          options.markerGroup =
            options.markerGroup || (0, _layer.getLayerFromName)(options.name); // show layer on map
          if (options.markerGroup && !_map.hasLayer(options.markerGroup))
            _map.addLayer(options.markerGroup);
          options.radiusGroup =
            options.radiusGroup ||
            (0, _layer.getLayerFromName)(options.radiusGroupName);
          if (options.radiusGroup && !_map.hasLayer(options.radiusGroup))
            _map.addLayer(options.radiusGroup);
          var bbox = null;
          var markerGroup = getOrCreateMarkerGroup(options); // clustered radius: extra radius layer
          if (options.radius > 0 && options.clustered)
            var radiusGroup = getOrCreateRadiusGroup(options);
          var deflateGroup = null;
          if (options.deflate != null) {
            // wrap polys in a deflate feature group so they can be deflated
            if (options.deflate.markerType == "circleMarker") {
              options.deflate.markerType = L.circleMarker;
            }
            var icon =
              (_a = options.deflate.markerOptions) === null || _a === void 0
                ? void 0
                : _a.icon;
            if ((_b = icon) === null || _b === void 0 ? void 0 : _b.iconUrl) {
              icon.iconUrl = _AHPFolder + "resources/" + icon.iconUrl;
              options.deflate.markerOptions.icon = L.icon(icon);
            }
            deflateGroup = L.deflate(options.deflate);
          } // temporarily store created markers/lines in array for fast adding to map
          var markerArray = [];
          var radiusArray = []; // prepare list of features to check for doubles (rejectDoubles option)
          if (options.rejectDoubles) {
            var featureValues = [];
            markerGroup.eachLayer(function (l) {
              if (l.properties && l.properties[options.rejectDoubles])
                featureValues.push(l.properties[options.rejectDoubles]);
            });
          } // store last value set (rejectDoubleRadius option)
          var lastValue = null;
          data.forEach(function (feature) {
            // reject doubles or add new entry to check against
            if (
              options.rejectDoubles &&
              feature.properties[options.rejectDoubles]
            ) {
              if (
                featureValues.includes(
                  feature.properties[options.rejectDoubles]
                )
              )
                return;
              else
                featureValues.push(feature.properties[options.rejectDoubles]);
            } // get color from properties, options or RNG
            var color =
              feature.properties.color ||
              options.color ||
              "#" +
                (
                  "0" + ((Math.random() * 0xffffff) & 0xffffff).toString(16)
                ).slice(-6); // process geometry
            switch (feature.geometry.type) {
              case "Point":
              case "MultiPoint":
              default: // coords in latlng
              // existing custom CP (already has id): extra options
              // comment marker
              // add description to marker
                var lat = 0.0;
                var lng = 0.0;
                if (feature.geometry.type === "Point") {
                  lat = Number(feature.geometry.coordinates[0]);
                  lng = Number(feature.geometry.coordinates[1]);
                } else if (feature.geometry.type === "MultiPoint") {
                  if (feature.geometry.coordinates > 1) {
                    console.log("Only first point of MultiPoint used!");
                    console.log(feature.geojson);
                  }
                  lat = Number(feature.geometry.coordinates[0][0]);
                  lng = Number(feature.geometry.coordinates[0][1]);
                }
                var marker = null;
                if (isNaN(lat) || isNaN(lng)) {
                  // faulty coordinates
                  console.log(feature);
                  return;
                }
                if (options.heat) {
                  // add point to heatmap
                  markerGroup.addLatLng([
                    lat,
                    lng,
                    feature.properties[options.heat],
                  ]);
                  return;
                }
                var leaflet_icon;
                if (options.divIconFunc) {
                  var func = getDivIconFunc(options.divIconFunc);
                  leaflet_icon = L.divIcon(func(options, feature));
                } else if (feature.properties.icon) {
                  leaflet_icon = L.ImageIcon(feature.properties.icon);
                } else if (options.icon) {
                  leaflet_icon = L.ImageIcon(options.icon);
                } else {
                  leaflet_icon = L.colorIcon(color);
                }
                var fillOpacity =
                  options.fillOpacity === undefined ? 0.4 : options.fillOpacity;
                if (options.customCP && feature.properties.id) {
                  // add special CP marker
                  marker = L.marker([lat, lng], {
                    icon: leaflet_icon,
                    interactive: true,
                    draggable:
                      _permissions.lisAccess >= 2 && !feature.properties.locked,
                    riseOnHover: true,
                    zIndexOffset: 100,
                    contextmenu:
                      _permissions.lisAccess >= 2 && !feature.properties.locked,
                    contextmenuInheritItems: false,
                    contextmenuItems: [
                      {
                        // this has to be the first entry!
                        text: feature.properties.search
                          ? "Entferne Suchraum"
                          : "Bestimme Suchraum",
                        iconCls: feature.properties.search
                          ? "ion ion-md-close"
                          : "ion ion-md-create",
                        callback: feature.properties.search
                          ? _lis_modal.removeSearchPoly
                          : _lis_modal.addSearchPoly,
                      },
                      {
                        text: "Entferne Ladestandort",
                        iconCls: "ion ion-md-trash",
                        callback: function callback(e) {
                          (0, _lis_modal.removeCustomCPCallback)(
                            e.relatedTarget
                          );
                        },
                      },
                    ],
                  });
                  if (feature.properties.search && !feature.properties.locked) {
                    marker.searchPoly = L.geoJSON(feature.properties.search, {
                      style: function style(_) {
                        return {
                          stroke: true,
                          color: _map2.COLORS.searchPolygon,
                          opacity: 1,
                          weight: 2,
                          interactive: false,
                          fill: true,
                          fillColor: _map2.COLORS.searchPolygon,
                          fillOpacity: fillOpacity,
                          noClip: true,
                        };
                      },
                    });
                  }
                  markerArray.push(marker); //marker.addTo(markerGroup);
                  // post processing: actually add marker to map
                  (0, _lis_modal.addCustomCPToMap)({
                    marker: marker,
                    properties: feature.properties,
                  });
                  return; // important (no popup)
                }
                if (options.comment) {
                  marker = L.marker([lat, lng], {
                    icon: leaflet_icon,
                    interactive: true,
                    draggable: false,
                    riseOnHover: true,
                    zIndexOffset: 100,
                    contextmenu: true,
                    contextmenuInheritItems: false,
                    contextmenuItems:
                      _permissions.chatAccess < 2
                        ? []
                        : [
                            {
                              text: "Entferne Kommentar",
                              iconCls: "ion ion-md-trash",
                              callback: function callback(e) {
                                (0, _comment_modal.deleteComment)(
                                  e.relatedTarget
                                );
                              },
                            },
                          ],
                  }); //marker.addTo(markerGroup);
                  markerArray.push(marker);
                  marker.properties = feature.properties;
                  if (!marker.properties.images) marker.properties.images = []; // callback for click: open modal window
                  marker.on("click", function (_) {
                    (0, _comment_modal.updateComment)(marker);
                  });
                  return; // important (no popup)
                }
                if (!(options.radius < 0)) {
                  //radius null or not negative: add marker
                  marker = L.marker([lat, lng], {
                    icon: leaflet_icon,
                    interactive: typeof feature.properties !== "undefined",
                  });
                  markerArray.push(marker);
                } else {
                  // radius negative: no marker -> circle only
                  // may be search radius of proposed LIS site
                  marker = L.circle([lat, lng], -options.radius, {
                    stroke: !options.customCP,
                    color: color,
                    fill: true,
                    fillColor: color,
                    fillOpacity: fillOpacity,
                    interactive: typeof feature.properties !== "undefined",
                  });
                  markerArray.push(marker);
                }
                marker.properties = feature.properties;
                if (marker && options.customCP && feature.properties) {
                  var table = ""; //let table = "<tr><td><b>Beschreibung</b></td><td>" + feature.properties.desc + "</td></tr>";
                  if (feature.properties.count)
                    table +=
                      "<tr><td><b>Anzahl</b></td><td>" +
                      feature.properties.count +
                      "</td></tr>";
                  if (feature.properties.order)
                    table +=
                      "<tr><td><b>Platzierung</b></td><td>" +
                      feature.properties.order +
                      "</td></tr>"; // add other feature properties, like nearby POI. Go wild.
                  table = '<table style="width:100%;">' + table + "</table>";
                  if (_map2.HAS_TOUCH) marker.bindPopup(table);
                  else
                    marker.bindTooltip(table, {
                      direction: "top",
                      offset: [-1, 1],
                      sticky: true,
                    });
                } else if (marker && feature.properties.desc) marker.bindPopup(feature.properties.desc);
                if (options.radius > 0) {
                  // radius positive: add semi-transparent circle around marker
                  // check if this feature already has a radius (multiple features with same property)
                  if (options.rejectDoubleRadius) {
                    if (
                      feature.properties[options.rejectDoubleRadius] ===
                      lastValue
                    )
                      return;
                    else
                      lastValue =
                        feature.properties[options.rejectDoubleRadius];
                  }
                  var circle = L.circle([lat, lng], options.radius, {
                    stroke: false,
                    fill: true,
                    fillColor: color,
                    fillOpacity: fillOpacity,
                    interactive: false,
                  });
                  if (options.clustered) {
                    //circle.addTo(radiusGroup);
                    radiusArray.push(circle);
                  } else {
                    //circle.addTo(markerGroup);
                    markerArray.push(circle);
                  }
                }
                if (options.fit) {
                  // update bounding box to fit all features in viewing port
                  if (bbox == null)
                    bbox = [
                      [lat, lng],
                      [lat, lng],
                    ];
                  bbox[0][0] = Math.min(bbox[0][0], lat);
                  bbox[0][1] = Math.min(bbox[0][1], lng);
                  bbox[1][0] = Math.max(bbox[1][0], lat);
                  bbox[1][1] = Math.max(bbox[1][1], lng);
                }
                break;
              case "LineString":
              case "MultiLineString":
              case "Polygon":
              case "MultiPolygon": //lines/polygons: array of latlngs
                // if (DEBUG) console.log(feature)
                var desc = feature.properties.desc;
                var opacity =
                  options.fillOpacity === undefined ? 1.0 : options.fillOpacity; // special description format: opacity and text
                if (desc && desc instanceof Array && desc.length > 1) {
                  opacity = desc[0];
                  desc = desc[1];
                }
                var lineColor =
                  options.lineDarken != null
                    ? chroma(color).darken(options.lineDarken)
                    : color;
                var fillColor = options.fillColor || color;
                var polyOptions = {
                  stroke: true,
                  color: lineColor,
                  opacity:
                    options.lineOpacity != null ? options.lineOpacity : opacity,
                  weight: options.lineWidth != null ? options.lineWidth : 2,
                  dashArray: options.radius,
                  interactive: desc != undefined,
                  fill:
                    feature.geometry.type.includes("Polygon") &&
                    (options.fillColor || desc != undefined)
                      ? true
                      : false,
                  fillColor: fillColor,
                  fillOpacity: opacity,
                  noClip: true,
                  smoothFactor:
                    options.smoothFactor != null ? options.smoothFactor : 1.0,
                };
                var poly = feature.geometry.type.includes("Polygon")
                  ? L.polygon(feature.geometry.coordinates, polyOptions)
                  : L.polyline(feature.geometry.coordinates, polyOptions);
                poly.properties = feature.properties;
                if (desc) {
                  // add tooltip to marker
                  if (_map2.HAS_TOUCH) poly.bindPopup(desc);
                  else
                    poly.bindTooltip(desc, { direction: "top", sticky: true });
                  poly.properties.desc = desc;
                }
                if (options.deflate != null) {
                  poly.addTo(deflateGroup);
                } else {
                  //poly.addTo(markerGroup);
                  markerArray.push(poly);
                } // fit map to show feature collection
                if (options.fit) {
                  if (bbox == null) {
                    bbox = poly.getBounds();
                  } else {
                    // update bounding box to fit all features in viewing port
                    bbox.extend(poly.getBounds());
                  }
                } // feature collection is restricted zone
                if (options.restricted) _restrictPoly.push(poly);
                break;
            }
          });
          if (options.deflate != null) {
            markerArray.push(deflateGroup);
          } //add feature layer to map
          if (markerGroup.addLayers) {
            // chunkedLoading really improves performance with large datasets
            markerGroup.addLayers(markerArray, { chunkedLoading: true });
          } else {
            for (var i = 0; i < markerArray.length; i++) {
              markerGroup.addLayer(markerArray[i]);
            }
          }
          if (radiusGroup) {
            if (radiusGroup.addLayers) radiusGroup.addLayers(radiusArray);
            else
              for (var _i = 0; _i < radiusArray.length; _i++) {
                radiusGroup.addLayer(radiusArray[_i]);
              }
          } // if desired, fit map to features
          if (options.fit && bbox != null) _map.fitBounds(bbox); // return layer group(s)
          if (radiusGroup) {
            return [markerGroup, radiusGroup];
          } else return markerGroup;
        } // Generate DIV icon drawing function for cluster. Depends on options.clusterClass
        function newIconCreateFunction(options) {
          return function (cluster) {
            var childCount = cluster.getChildCount();
            var c = "";
            if (options.clusterClass) {
              c = options.clusterClass + " " + options.clusterClass;
              if (childCount < 10) {
                c += "-small";
              } else if (childCount < 100) {
                c += "-medium";
              } else {
                c += "-large";
              }
            }
            var icon = new L.DivIcon({
              html: "<div><span>" + childCount + "</span></div>",
              className: "marker-cluster " + c,
              iconSize: new L.Point(40, 40),
            });
            return icon;
          };
        } // create radius group from options
        function getOrCreateRadiusGroup(options) {
          // get or create radiusGroup
          if (options.radiusGroup) return options.radiusGroup;
          var clusterRadius = parseFloat(options.clustered) || 80;
          var radiusGroup = L.markerClusterGroup({
            maxClusterRadius: clusterRadius,
            clusterPane: "overlayPane",
            disableClusteringAtZoom: 18,
            polygonOptions: { color: options.clusterPolyColor || "#0080ff" },
            iconCreateFunction: newIconCreateFunction(options),
          });
          if (options.name)
            _ctrlLayer.addOverlay(radiusGroup, options.radiusGroupName);
          _map.addLayer(radiusGroup);
          return radiusGroup;
        } // create markerGroup from options
        function getOrCreateMarkerGroup(options) {
          // get markerGroup from options when existing
          if (options.markerGroup) return options.markerGroup; //create new featureGroup for feature collection
          if (options.heat) {
            // new heatmap
            options.radius = options.radius || 100;
            options.heatmax = options.heatmax || 1.0; // var markerGroup = new HeatmapOverlay({
            // maxOpacity: 0.5,
            // valueField: 'intensity'
            // });
            // maxZoom option is set to map min zoom. Everything below maxZoom changes heatmap presentation at zoom (intesity). MaxZoom is a leaflet layer option, though: it disables layer toggling when zoom is below maxZoom. This is disabled in map.js.
            //_map.createPane('heatPane').style.opacity = 0.5;
            _map.createPane("heatPane").style.zIndex = 300;
            var colormap_select = document.getElementById("colormap-select");
            var markerGroup = L.heatLayer([], {
              pane: "heatPane",
              radius: (0, _utils.metersInPixels)(options.radius),
              blur: (0, _utils.metersInPixels)(options.radius) / 2,
              _maxZoom: _map.getMinZoom(),
              abs_radius: options.radius,
              max: options.heatmax,
              gradient: (0, _utils.colormapToGradient)(colormap_select.value),
              blendMultiply: true,
            }); // make heatmap legend toggle with layer
            var legend = document.getElementById("heat_legend");
            markerGroup.on("add", function (_) {
              if (legend) {
                legend.style.visibility = "visible";
              }
            });
            markerGroup.on("remove", function (_) {
              if (legend) legend.style.visibility = "hidden";
            });
          } else if (options.clustered) {
            // special cluster options
            var clusterRadius = parseFloat(options.clustered) || 80; // default
            var clusterRadiusFct = function clusterRadiusFct(zoom) {
              return zoom >= _map2.MAX_ZOOM ? 25 : clusterRadius;
            }; // max zoom: reduce cluster radius to 25 px / ~10 m
            var markerGroup = L.markerClusterGroup({
              maxClusterRadius: clusterRadiusFct,
              polygonOptions: {
                color: options.clusterPolyColor || _map2.COLORS.defaultCluster,
              },
              iconCreateFunction: newIconCreateFunction(options),
            });
          } else {
            var markerGroup = L.featureGroup(); //var markerGroup = L.markerClusterGroup({
            //disableClusteringAtZoom: 1
            //});
          } // add to map and control
          if (options.name) _ctrlLayer.addOverlay(markerGroup, options.name);
          _map.addLayer(markerGroup);
          return markerGroup;
        } // Update the colormap used on the map.
        function setHeatColormap(colormapName) {
          if (chroma.brewer[colormapName]) {
            var select_elem = document.getElementById("colormap-select");
            if (!select_elem) return;
            if (select_elem.value != colormapName) {
              select_elem.value = colormapName;
            }
            var legend = document.getElementById("heat_legend");
            var legend_2 = document.getElementById("heat_legend_2");
            var bg =
              "linear-gradient(to right, " +
              chroma.brewer[colormapName].join(",") +
              ")";
            legend.style.background = bg;
            legend_2.style.background = bg;
            if (_heatLayer) {
              _heatLayer.setOptions({
                gradient: (0, _utils.colormapToGradient)(colormapName),
              });
            }
          } else {
            console.log("not a colormap:", colormapName);
          }
        } /************************  Evaluation  ************************/ // Callback to show evaluation data on map. User is given option to add spot permanently. Called from form.html.
        // Input: data - standard feature with geometry and properties (including description)
        function showEvaluation(data) {
          // bad feature
          if (!data.geometry || !data.properties) return; //if (DEBUG) console.log(data.properties);
          //generate HTML popup
          var popup = (0, _utils.addElem)(
            "eval_popup",
            null,
            document.body,
            "DIV"
          ); //let popupHeader = addElem("eval_popup_header", "Bewertung", popup, "P");
          var popupContent = (0, _utils.addElem)(null, null, popup, "DIV");
          var table = (0, _utils.addElem)(
            "eval_popup_table",
            null,
            popupContent,
            "TABLE"
          );
          var tableBody = (0, _utils.addElem)("tbody", null, table, "TBODY");
          var tableRow = (0, _utils.addElem)(null, null, tableBody, "TR");
          (0, _utils.addElem)(
            "eval_popup_table_key",
            "Potenzial",
            tableRow,
            "TD"
          );
          (0, _utils.addElem)(
            "eval_popup_table_val",
            data.properties.potential + "%",
            tableRow,
            "TD"
          ); // rows of table with similar structure. key/text dictionary
          var rows = {
            POI: "POI",
            residents: "Einwohner",
            LIS: "Existierende Ladepunkte",
            CLIS: "Eigene Standorte",
          };
          for (var r in rows) {
            var _tableRow = (0, _utils.addElem)(null, null, tableBody, "TR");
            (0, _utils.addElem)(
              "eval_popup_table_key",
              rows[r] + " innerhalb " + data.properties.distance + "m",
              _tableRow,
              "TD"
            );
            (0, _utils.addElem)(
              "eval_popup_table_val",
              data.properties[r],
              _tableRow,
              "TD"
            );
          }
          if (!data.properties.street)
            (0, _utils.addElem)(
              null,
              "MÃ¶glicherweise nicht in der NÃ¤he einer StraÃŸe!",
              popupContent,
              "P"
            ); // evaluation conclusion with smiley. Unicode smileys in too high block (U+1F642 is happy face), so prefix is needed.
          if (data.properties.potential > 66)
            (0, _utils.addElem)(
              "eval_popup_good",
              "Platzierung: " +
                data.properties.place.join(" / ") +
                " \uD83D\uDE42",
              popupContent,
              "P"
            );
          else if (data.properties.potential < 33)
            (0, _utils.addElem)(
              "eval_popup_bad",
              "Platzierung: " +
                data.properties.place.join(" / ") +
                " \uD83D\uDE41",
              popupContent,
              "P"
            );
          else
            (0, _utils.addElem)(
              "eval_popup_ugly",
              "Platzierung: " +
                data.properties.place.join(" / ") +
                " \uD83D\uDE10",
              popupContent,
              "P"
            ); // add buttons with callbacks
          var btnDiv = (0, _utils.addElem)(
            "eval_popup_center_div",
            null,
            popup,
            "DIV"
          );
          btnDiv.style = "text-align:center;";
          if (_permissions.lisAccess >= 2) {
            var addBtn = (0, _utils.addElem)(
              "button btn--cta eval_popup_button",
              null,
              btnDiv,
              "INPUT"
            );
            addBtn.type = "button";
            addBtn.value = "Platziere Ladestandort";
            addBtn.title = "Hier einen Ladestandort setzen";
            L.DomEvent.on(addBtn, "click", function (_) {
              (0,
              _lis_modal.addCustomCPCallback)({ latlng: { lat: data.geometry.coordinates[0], lng: data.geometry.coordinates[1] } });
              _map.closePopup();
            });
          }
          var betterBtn = (0, _utils.addElem)(
            "button btn--cta eval_popup_button",
            null,
            btnDiv,
            "INPUT"
          );
          betterBtn.type = "button";
          betterBtn.value = "Alternative";
          if (data.properties.better) {
            L.DomEvent.on(betterBtn, "click", function (_) {
              _map.closePopup();
              swap(data.properties.better.coordinates);
              _map.openPopup(
                "Besserer Standort",
                data.properties.better.coordinates
              );
            });
            betterBtn.title =
              "Alternativen Standort in der Umgebung vorschlagen";
          } else {
            betterBtn.disabled = true;
            betterBtn.title =
              "Kein besserer Standort in der Umgebung verfÃ¼gbar";
          } // open popup
          _map.openPopup(popup, data.geometry.coordinates, {
            closeOnClick: false,
          });
        } /************************  features ************************/ // let user download a text file
        // build clickable link in background
        // input:
        // 	stringArray - array of strings to export. Each element is a line.
        //	mimetype - MIME type of blob, e.g. 'text/json', 'text/csv', 'text/plain', ...
        //	linebreak - customizable linebreak characters. Appended to each line. Defaults to \r\n
        function exportTextBlob(stringArray) {
          var filename =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : "data.txt";
          var mimetype =
            arguments.length > 2 && arguments[2] !== undefined
              ? arguments[2]
              : "text/plain";
          var linebreak =
            arguments.length > 3 && arguments[3] !== undefined
              ? arguments[3]
              : "\r\n"; // join stringArray to one long string
          var chars = stringArray.join(linebreak); // build downloadable link
          if (window.navigator.msSaveOrOpenBlob) {
            var blob = new Blob([encodeURIComponent(chars)], {
              type: mimetype,
            });
            window.navigator.msSaveBlob(blob, filename); // IE?
          } else {
            var link = window.document.createElement("a"); // link.href = window.URL.createObjectURL(blob);
            // write text to link
            link.href =
              "data:" +
              mimetype +
              ";charset=utf-8," +
              encodeURIComponent(chars);
            link.target = "_blank";
            link.download = filename; // append and execute
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
          }
        } // callback to all custom placed LIS as CSV
        // only possible for LIS read permission, so power table can be read as well
        function exportLISasCSV() {
          var separator =
            arguments.length > 0 && arguments[0] !== undefined
              ? arguments[0]
              : "\t";
          var locale =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : "de-DE";
          if (!_markers.length) {
            alert("Keine Ladestandorte vorhanden.");
            return;
          }
          var lines = []; // write header
          {
            var line = [
              "name",
              "latitude",
              "longitude",
              "power",
              "access_rating",
              "area_rating",
              "competition_rating",
            ]; // Add column names for evaluation
            for (
              var _i2 = 0,
                _Object$entries = Object.entries(
                  _markers[0].properties.evaluation
                );
              _i2 < _Object$entries.length;
              _i2++
            ) {
              var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),
                key = _Object$entries$_i[0],
                entry = _Object$entries$_i[1];
              var powers = [];
              var counts = [];
              for (var i = 0; i < entry.length; i++) {
                var d = entry[i];
                powers.push(key + "kW_" + d.year + "_power");
                counts.push(key + "kW_" + d.year + "_count");
              }
              line = line.concat(powers, counts);
            }
            line.push("description");
            lines.push(line.join(separator));
          } // write rows
          // Use localized number format to satisfy Excel
          var localize_num = function localize_num(num) {
            return num.toLocaleString(locale, {
              maximumSignificantDigits: 10,
              useGrouping: false,
            });
          }; // order markers by id asc
          _markers = _markers.sort(function (a, b) {
            return a.properties.id - b.properties.id;
          }); // cycle through custom markers and stringify them
          for (var _i3 = 0; _i3 < _markers.length; _i3++) {
            var m = _markers[_i3];
            var _line = [
              (0, _utils.escapeCsvStringUgly)(m.properties.name),
              localize_num(m.getLatLng().lat),
              localize_num(m.getLatLng().lng),
              (0, _utils.escapeCsvStringUgly)(
                m.properties.power_table
                  .map(function (p) {
                    return (
                      p.count +
                      "x" +
                      localize_num(p.power) +
                      "kW(x" +
                      localize_num(p.demand_factor) +
                      ")"
                    );
                  })
                  .join(" ")
              ),
              localize_num(m.properties.rating.access),
              localize_num(m.properties.rating.area),
              localize_num(m.properties.rating.competition),
            ]; // Add evaluation values
            for (
              var _i4 = 0,
                _Object$values = Object.values(m.properties.evaluation);
              _i4 < _Object$values.length;
              _i4++
            ) {
              var _entry = _Object$values[_i4];
              var _powers = [];
              var _counts = [];
              for (var _i5 = 0; _i5 < _entry.length; _i5++) {
                var _d2 = _entry[_i5];
                _powers.push(localize_num(_d2.power));
                _counts.push(localize_num(_d2.count));
              }
              _line = _line.concat(_powers, _counts);
            } // append description
            _line.push(
              (0, _utils.escapeCsvStringUgly)(m.properties.description)
            );
            lines.push(_line.join(separator));
          } // create a nice file name
          var file_name = "Ladestandorte_Export";
          if (_region && _region.name) {
            file_name += "_" + (0, _utils.stringToFileName)(_region.name);
          }
          file_name += ".csv"; // export
          exportTextBlob(lines, file_name, "text/csv");
        } // callback to all custom placed LIS as JSON
        // only possible for LIS read permission, so power table can be read as well
        function exportLISasJSON() {
          if (!_markers.length) {
            alert("Keine Ladestandorte vorhanden.");
            return;
          }
          var lis_list = []; // order markers by id asc
          _markers = _markers.sort(function (a, b) {
            return a.properties.id - b.properties.id;
          }); // cycle through custom markers and stringify them
          for (var i = 0; i < _markers.length; i++) {
            var m = _markers[i];
            var lis = {
              type: "Feature",
              properties: {
                id: m.properties.id,
                type: m.properties["public_type"],
                name: m.properties.name,
                description: m.properties.description,
                files: m.properties.images.map(function (i) {
                  return new URL(i.url, window.location.href);
                }),
                power_table: m.properties.power_table,
                checklist: m.properties.checklist,
                rating: m.properties.rating,
                search: m.properties.search,
                evaluation: m.properties.evaluation,
              },
              geometry: {
                type: "Point",
                coordinates: [m.getLatLng().lng, m.getLatLng().lat],
              },
            };
            lis_list.push(lis);
          }
          var json = {
            type: "FeatureCollection",
            name: _region.name,
            url: window.location.href,
            timestamp: Date.now(),
            crs: {
              type: "name",
              properties: { name: "urn:ogc:def:crs:OGC:1.3:CRS84" },
            },
            features: lis_list,
          };
          var json_str = JSON.stringify(json, null, 2); // create a nice file name
          var file_name = "Ladestandorte_Export";
          if (_region && _region.name) {
            file_name += "_" + (0, _utils.stringToFileName)(_region.name);
          }
          file_name += ".geojson";
          exportTextBlob([json_str], file_name, "text/json");
        } // Export shown potential to json file
        function exportPotential() {
          if (!_heatLayer || !_heatLayer._latlngs) {
            alert(
              "Kein Potential zum Exportieren vorhanden.\nStarte dafÃ¼r vorher eine Berechnung!"
            );
            return null;
          }
          var points = _heatLayer._latlngs;
          var geojson = { type: "FeatureCollection", features: [] };
          for (var i = 0; i < points.length; i++) {
            var point = {
              type: "Feature",
              geometry: {
                type: "Point",
                coordinates: [points[i][1], points[i][0]],
              },
              properties: { potential: points[i][2] },
            };
            geojson.features.push(point);
          }
          var json_str = JSON.stringify(geojson, null, 2);
          exportTextBlob([json_str], "export_potential.geojson", "text/json");
        }
      },
      {
        "./comment_modal": 4,
        "./layer": 7,
        "./lis_modal": 8,
        "./map": 9,
        "./utils": 14,
      },
    ],
    7: [
      function (require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.removeLayers = removeLayers;
        exports.removeLayer = removeLayer;
        exports.getLayerFromName = getLayerFromName;
        var _AHP = require("./AHP");
        var _map2 = require("./map"); /** Remove layer(s) **/ // callback for context menu entry: remove all overlays from map and layer control
        // CCP: custom charging points. If set, custom charging points layer is preserved
        // This method has to reset global variables as well
        function removeLayers(_event, CCP) {
          // remove all overlays: number of layers changes -> no iteration update of i
          for (var i = 0; i < _ctrlLayer._layers.length; ) {
            var l = _ctrlLayer._layers[i];
            if (!l.overlay) i++; // skip non-overlays
            else if (l.layer === _markerLayer)
              i++; // skip custom CP layer on option
            else {
              if (l.layer.clearLayers) l.layer.clearLayers();
              _ctrlLayer.removeLayer(l.layer);
              _map.removeLayer(l.layer);
            }
          }
          if (_heatLayer) {
            _heatLayer = null;
          }
          if (!CCP) _map.removeLayer(_markerLayer);
          while (_restrictPoly.length) {
            (0, _map2.removeRestrictPoly)(_restrictPoly.pop());
          } // remove AHP data layers
          Object.keys(_AHPLayers).forEach(function (key) {
            var input = document.getElementById(key);
            (0, _AHP.removeLayerFromMap)(input);
          }); // disable computation save
          var saveBtn = document.getElementById("querysave");
          if (saveBtn) {
            saveBtn.style.visibility = "hidden";
            saveBtn.value = "";
          }
        } // remove single layer by layer name or reference
        function removeLayer(layer) {
          if (typeof layer === "string") layer = getLayerFromName(layer);
          if (!layer) return;
          if (layer.clearLayers) layer.clearLayers();
          _ctrlLayer.removeLayer(layer);
          _map.removeLayer(layer); // custom marker layer deleted? Hide CCP from map
          if (layer === _markerLayer) {
            _map.removeLayer(_markerLayer);
          } // heat layer deleted?
          if (_heatLayer && layer._leaflet_id === _heatLayer._leaflet_id) {
            _heatLayer = null;
          }
        } // get layer from layer name in layer control menu
        function getLayerFromName(layerName) {
          for (var i = 0; i < _ctrlLayer._layers.length; i++) {
            var l = _ctrlLayer._layers[i];
            if (l.overlay && l.name === layerName) {
              return l.layer;
            }
          }
          return null;
        }
      },
      { "./AHP": 1, "./map": 9 },
    ],
    8: [
      function (require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.resetLISForm = resetLISForm;
        exports.addCustomCPCallback = addCustomCPCallback;
        exports.updateLisModal = updateLisModal;
        exports.markDirty = markDirty;
        exports.saveLisChanges = saveLisChanges;
        exports.openLisModal = openLisModal;
        exports.addCustomCPToMap = addCustomCPToMap;
        exports.highlightCCP = highlightCCP;
        exports.addSearchPoly = addSearchPoly;
        exports.removeSearchPoly = removeSearchPoly;
        exports.removeCustomCPCallback = removeCustomCPCallback;
        exports.removeCustomCPFromMap = removeCustomCPFromMap;
        exports.handleNewLisDescription = handleNewLisDescription;
        exports.handleNewLisMessage = handleNewLisMessage;
        exports.addNewLisChecklistItem = addNewLisChecklistItem;
        exports.addLisPowerTableRow = addLisPowerTableRow;
        exports.evalLisPowerTable = evalLisPowerTable;
        exports.handleNewLisImg = handleNewLisImg;
        exports.handleDeleteLISFile = handleDeleteLISFile;
        exports.handleLisSurvey = handleLisSurvey;
        var _map2 = require("./map");
        var _features = require("./features");
        var _chat = require("./chat");
        var _table = require("./table");
        var _utils = require("./utils");
        function _slicedToArray(arr, i) {
          return (
            _arrayWithHoles(arr) ||
            _iterableToArrayLimit(arr, i) ||
            _nonIterableRest()
          );
        }
        function _nonIterableRest() {
          throw new TypeError(
            "Invalid attempt to destructure non-iterable instance"
          );
        }
        function _iterableToArrayLimit(arr, i) {
          if (
            !(
              Symbol.iterator in Object(arr) ||
              Object.prototype.toString.call(arr) === "[object Arguments]"
            )
          ) {
            return;
          }
          var _arr = [];
          var _n = true;
          var _d = false;
          var _e = undefined;
          try {
            for (
              var _i = arr[Symbol.iterator](), _s;
              !(_n = (_s = _i.next()).done);
              _n = true
            ) {
              _arr.push(_s.value);
              if (i && _arr.length === i) break;
            }
          } catch (err) {
            _d = true;
            _e = err;
          } finally {
            try {
              if (!_n && _i["return"] != null) _i["return"]();
            } finally {
              if (_d) throw _e;
            }
          }
          return _arr;
        }
        function _arrayWithHoles(arr) {
          if (Array.isArray(arr)) return arr;
        } // reset hidden LIS form fields. Returns handle to LIS form.
        function resetLISForm() {
          var lisform = document.getElementById("lisform");
          if (lisform && lisform.elements) {
            for (var i = 1; i < lisform.elements.length; i++) {
              // element 0: csrf cookie
              var input = lisform.elements[i];
              if (input.type == "hidden") input.value = "";
            }
          }
          return lisform;
        }
        /*callback for context menu entry: add custom charging point to map and Django DB with given properties
    property options:
        region: id, defaults to currently selected region
        osm_id: string, optional
    callback argument e needs latlng field
*/ function addCustomCPCallback(e) {
          var properties = e.properties || {}; // populate form
          var lisform = resetLISForm();
          if (!lisform) return;
          lisform.geom.value = (0, _utils.geoJSONdumps)(e.latlng);
          lisform.osm_id.value = properties.osm_id || "";
          (0, _utils.fetchPost)("lis/create/", "lisform", 10000)
            .then(function (response) {
              return response.json();
            })
            .then(function (data) {
              var lis = data.customLIS;
              var nearby = data.nearby || [];
              if (lis) {
                (0, _features.showResult)(data);
                _region.customLIS.push(lis); // enable clicking on marker
                var marker = _markers.find(function (m) {
                  return m.properties.id == lis.id;
                });
                if (marker)
                  marker.on("click", function (_) {
                    openLisModal(lis.id);
                  }); // can new lis be placed?
                var customLisDisabled =
                  _region.lisLimit !== null &&
                  _markers.length >= _region.lisLimit; // find context menu entry by string, may disable it
                _map.contextmenu.setDisabled(
                  (0, _utils.getCMItemByLabel)("Platziere Ladestandort"),
                  customLisDisabled
                );
              }
              var _loop = function _loop(i) {
                // reset evaluation of all nearby markers
                var nearbyMarker = _markers.find(function (m) {
                  return m.properties.id == nearby[i];
                });
                if (nearbyMarker) nearbyMarker.properties.evaluation = null;
              };
              for (var i = 0; i < nearby.length; i++) {
                _loop(i);
              }
              if (data.message) {
                alert(data.message);
              }
            })
            .catch(function (err) {
              if (_map2.DEBUG) console.log(err);
            });
        } // Render event log messages in LIS modal
        function renderLisEventLog(lis_id) {
          (0, _chat.renderChat)(
            _chat_messages,
            "lis-event-log-messages",
            function (m) {
              return m.LIS == lis_id;
            },
            "lis"
          );
        } // Fill LIS modal popup with all infos from marker.
        function updateLisModal(marker) {
          // reset lisform
          var lisform = resetLISForm();
          var lis_id = document.getElementById("lis_id");
          if (!(marker && lisform && lis_id)) return;
          lis_id.value = marker.properties.id; // set LIS name
          updateLisName(marker.properties.name, marker.properties.locked); // update (potentially editable) coords input
          updateLisPositionField(marker.getLatLng(), marker.properties.locked); // set LIS type
          var radio = document.getElementById(
            "lis-type-" + marker.properties.public_type
          );
          if (radio) radio.checked = true; // LIS survey
          updateLisSurvey(_region.lis_survey, marker.properties.survey); // set LIS images
          updateLisImages(marker.properties.images); // power_table
          updateLisPowerTable(marker.properties.power_table || []); // checklist
          updateLisChecklist(marker.properties.checklist || []); // event log
          renderLisEventLog(marker.properties.id); // set invite link
          var inviteAnchor = document.getElementById("id_invite");
          if (inviteAnchor) {
            var url = new URL(inviteAnchor.href);
            url.searchParams.set("lis", marker.properties.id);
            url.searchParams.set("next", "map");
            inviteAnchor.href = url.toString();
          } // description
          if (_simplemde) {
            var desc_text = document.getElementById("lis-description-textarea");
            _simplemde.value(marker.properties.description);
            desc_text.value = marker.properties.description;
            _simplemde.codemirror.refresh();
          } // display locked status, allow (un)locking
          updateLisLock(marker);
          updateLisRating(marker.properties.rating); // evaluation results
          updateLisEvaluation(marker.properties); // no changes yet: reset dirty bits
          markClean();
        } // mark property as changed (dirty)
        function markDirty(item) {
          var box = document.getElementById("dirty-" + item);
          if (box) box.checked = true;
        } // mark LIS as unchanged (clean): unselect all checkboxes
        function markClean() {
          var dirty_boxes = document.getElementsByClassName("chk-dirty");
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;
          try {
            for (
              var _iterator = dirty_boxes[Symbol.iterator](), _step;
              !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
              _iteratorNormalCompletion = true
            ) {
              var box = _step.value;
              box.checked = false;
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        } // save changes when closing modal view
        $("#lis-modal").on("closed.zf.reveal", saveLisChanges); // send LIS data to backend when it has changed (check dirty bit)
        function saveLisChanges() {
          //let form: HTMLFormElement = resetLISForm(); // don't reset form: overwrites hidden name field
          var form = document.getElementById("lisform"); // form and id have to be present
          var lis_id = document.getElementById("lis_id");
          if (!(form && lis_id)) return; // find out if changes were made
          var dirty = false;
          var dirty_names = [
            "name",
            "position",
            "type",
            "list",
            "power",
            "rating",
          ]; // loop over dirty bits
          for (var i = 0; i < dirty_names.length; i++) {
            var name = dirty_names[i];
            var box = document.getElementById("dirty-" + name);
            if (box && box.checked) {
              // bit set
              dirty = true;
              switch (name) {
                case "position": // set updated position
                  var latlng = (0, _utils.getLatLngFromString)(
                    form.position.value
                  );
                  form.geom.value = (0, _utils.geoJSONdumps)(latlng);
                  break;
                case "list": // get updated checklist
                  var checklist = getLisChecklist();
                  form.checklist.value = JSON.stringify(checklist);
                  break;
                case "power": // write out updated power table
                  form.power_table.value = JSON.stringify(evalLisPowerTable());
                  break;
                case "rating": // write out ratings
                  var rating_values = {};
                  for (
                    var _i = 0, _arr = ["access", "area", "competition"];
                    _i < _arr.length;
                    _i++
                  ) {
                    var category = _arr[_i];
                    var input = document.getElementById(category + "-rating");
                    if (input) rating_values[category] = input.value;
                  }
                  form.rating.value = JSON.stringify(rating_values);
                  break;
              }
            }
          } // no changes made: no need to save
          if (!dirty) return; // mark as clean again
          markClean(); // send form. Timeout: 30s
          (0, _utils.fetchPost)(
            "lis/" + lis_id.value + "/update/",
            "lisform",
            30000
          )
            .then(function (response) {
              return response.json();
            })
            .then(function (data) {
              var marker = _markers.find(function (m) {
                return m.properties.id == lis_id.value;
              });
              if (marker) {
                (function () {
                  var lis_info = data.customLIS;
                  var nearby = data.nearby || []; // update current LIS with returned info
                  var feature = (0, _features.obj2FeatureArray)(lis_info)[0];
                  marker.setLatLng(feature.geometry.coordinates); // set position on map
                  Object.assign(marker.properties, feature.properties); // copy properties
                  // reset evaluation of all nearby markers
                  var _loop2 = function _loop2(_i2) {
                    var nearbyMarker = _markers.find(function (m) {
                      return m.properties.id == nearby[_i2];
                    });
                    if (nearbyMarker) nearbyMarker.properties.evaluation = null;
                  };
                  for (var _i2 = 0; _i2 < nearby.length; _i2++) {
                    _loop2(_i2);
                  } // update site manager
                  (0, _table.renderSiteManagerTable)();
                })();
              } else {
                console.log("marker not found from response:");
                console.log(data);
              }
            })
            .catch(function (err) {
              if (_map2.DEBUG) console.log(err);
            });
        }
        /* Open the LIS modal with data from LIS with lis_id.
         *
         * open_tab: Open the accordion tab with the given jquery selector.
         */ function openLisModal(lis_id) {
          var open_tab =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : null;
          var marker = _markers.find(function (m) {
            return m.properties.id == lis_id;
          });
          if (marker) {
            updateLisModal(marker); // open modal window
            $("#lis-modal").foundation("open"); // open accordion tab
            if (typeof open_tab === "string") {
              $("#lis_modal_accordion").foundation("down", $(open_tab));
            }
            if (_simplemde) {
              _simplemde.togglePreview();
              _simplemde.togglePreview();
              _simplemde.codemirror.refresh(); // enter edit mode when description is empty
              if (!marker.properties.description) {
                setTimeout(function (_) {
                  if (_simplemde.isPreviewActive()) {
                    _simplemde.togglePreview();
                    _simplemde.codemirror.refresh();
                  }
                }, 200);
              }
            }
          }
        } // adds custom charging point to mapJSON
        // data: marker and feature properties (at least id from DB query)
        function addCustomCPToMap(data) {
          {
            var marker = data.marker;
            marker.properties = data.properties;
            if (!marker.properties.images) {
              marker.properties.images = [];
            } // add marker to custom marker array
            _markers.push(marker);
          } // mouseover: show search poylgon
          data.marker.on("mouseover", function (_) {
            if (data.marker.searchPoly) _map.addLayer(data.marker.searchPoly);
          });
          data.marker.on("mouseout", function (_) {
            if (data.marker.searchPoly)
              _map.removeLayer(data.marker.searchPoly);
          });
          data.marker.on("movestart", function (_) {
            data.marker._origin = data.marker.getLatLng();
          }); // callback for dragging: update DB geom
          data.marker.on("moveend", function (_) {
            var lisform = resetLISForm();
            if (lisform)
              lisform.geom.value = (0, _utils.geoJSONdumps)(
                data.marker.getLatLng()
              );
            else return;
            (0, _utils.fetchPost)(
              "lis/" + data.properties.id + "/update/",
              "lisform",
              10000
            )
              .then(function (response) {
                return response.json();
              })
              .then(function (result) {
                var nearby = result.nearby || [];
                var _loop3 = function _loop3(i) {
                  // reset evaluation of all nearby markers
                  var nearbyMarker = _markers.find(function (m) {
                    return m.properties.id == nearby[i];
                  });
                  if (nearbyMarker) nearbyMarker.properties.evaluation = null;
                };
                for (var i = 0; i < nearby.length; i++) {
                  _loop3(i);
                }
              })
              .catch(function (err) {
                if (_map2.DEBUG) console.log(err);
                data.marker.setLatLng(data.marker._origin);
              });
          });
        } // go to marker and let it bounce a bit
        function highlightCCP(id) {
          var id_field = document.getElementById("lis_id");
          if (id_field) id = id || id_field.value;
          var marker = _markers.find(function (m) {
            return m.properties.id == id;
          });
          if (!marker) return; // zoom to region? user feedback?
          _map.flyTo(marker.getLatLng(), _map2.MAX_ZOOM); // animate marker
          L.DomUtil.addClass(marker._icon, "bounce");
          setTimeout(function (_) {
            L.DomUtil.removeClass(marker._icon, "bounce");
          }, 3000);
        } // begin draw mode: let user define polygon around LIS
        function addSearchPoly(e) {
          _map.pm.enableDraw("Poly", {
            allowSelfIntersection: false,
            snappable: true,
            snapDistance: 20,
            tooltips: false,
            templineStyle: { color: _map2.COLORS.searchPolygon },
            hintlineStyle: {
              color: _map2.COLORS.searchPolygon,
              dashArray: [5, 5],
            },
            pathOptions: {
              interactive: false,
              color: _map2.COLORS.searchPolygon,
              fillColor: _map2.COLORS.searchPolygon,
              fillOpacity: 0.4,
            },
            cursorMarker: true,
          });
          _drawingMode = { search: e.relatedTarget };
          _map.getContainer().focus(); // focus on map to listen for key events
        } // remove search polygon from LIS. Update in backend as well.
        function removeSearchPoly(e) {
          // send to backend
          var lisform = resetLISForm();
          if (lisform) lisform.search.value = "removed";
          else return;
          (0, _utils.fetchPost)(
            "lis/" + e.relatedTarget.properties.id + "/update/",
            "lisform",
            10000
          )
            .then(function (response) {
              response.json().then(function (_data) {
                // remove on map
                _map.removeLayer(e.relatedTarget.searchPoly); // adjust context menu
                e.relatedTarget.options.contextmenuItems[0] = {
                  text: "Bestimme Suchraum",
                  iconCls: "ion ion-md-create",
                  callback: addSearchPoly,
                }; // unlink polygon layer from marker
                e.relatedTarget.searchPoly = null; // update customLIS container
                //Object.assign(_region.customLIS[_region.customLIS.findIndex(lis => lis.id === _data.id)], _data);
              });
            })
            .catch(function (err) {
              alert("Suchraum konnte nicht gelÃ¶scht werden.");
              if (_map2.DEBUG) console.log(err);
            });
        } // callback for context menu: remove targeted charging point.
        function removeCustomCPCallback(marker) {
          // remove from DB, but ask user first
          var lisform = resetLISForm();
          if (
            lisform &&
            confirm("Sind Sie sicher, dass dieser Punkt gelÃ¶scht werden soll?")
          ) {
            (0, _utils.fetchPost)(
              "lis/" + marker.properties.id + "/delete/",
              "lisform",
              10000
            )
              .then(function (response) {
                response.json().then(function (result) {
                  removeCustomCPFromMap(marker); // user that can delete LIS can also create LIS
                  // check if new LIS can be placed
                  var customLisDisabled =
                    _region.lisLimit !== null &&
                    _markers.length >= _region.lisLimit; // find context menu entry by string, may enable it
                  _map.contextmenu.setDisabled(
                    (0, _utils.getCMItemByLabel)("Platziere Ladestandort"),
                    customLisDisabled
                  );
                  var nearby = result.nearby || [];
                  var _loop4 = function _loop4(i) {
                    // reset evaluation of all nearby markers
                    var nearbyMarker = _markers.find(function (m) {
                      return m.properties.id == nearby[i];
                    });
                    if (nearbyMarker) nearbyMarker.properties.evaluation = null;
                  };
                  for (var i = 0; i < nearby.length; i++) {
                    _loop4(i);
                  }
                });
              })
              .catch(function (err) {
                if (_map2.DEBUG) console.log(err);
              });
          } else return;
        } // remove user-placed LIS from marker layer. Does not remove LIS from DB (use removeCustomCPCallback instead)
        function removeCustomCPFromMap(marker) {
          // remove marker from layer
          if (_markerLayer) _markerLayer.removeLayer(marker); // remove marker from custom marker array
          _markers = _markers.filter(function (m) {
            return m._leaflet_id != marker._leaflet_id;
          });
          marker.remove();
        } // update field at top of LIS modal
        function updateLisName(name, locked) {
          var nameSpan = document.getElementById("id_lisname");
          var nameInput = document.getElementById("id_lisname_input");
          var nameEdit = document.getElementById("id_lisname_edit"); // old (edited) name may still be in background -> revert changes
          if (nameSpan && nameInput && nameInput.type !== "hidden") {
            nameInput.type = "hidden";
            nameSpan.style.display = "";
          } // set marker name as title of window
          if (nameSpan) nameSpan.textContent = name;
          if (nameSpan && nameEdit && nameInput) {
            // can't edit locked LIS
            nameEdit.style.visibility = locked ? "hidden" : "initial"; // click on edit icon
            nameEdit.onclick = function (_) {
              if (nameInput.type === "hidden") {
                // no input: create input and callback
                nameSpan.style.display = "none"; // hide title
                nameInput.type = ""; // show input
                nameInput.focus();
                nameInput.value = name;
                nameInput.onchange = function (_) {
                  // name changed: mark LIS as dirty
                  if (nameInput.value != nameSpan.textContent)
                    markDirty("name"); // display new name
                  nameSpan.textContent = nameInput.value;
                  nameSpan.style.display = ""; // show title
                  nameInput.type = "hidden"; // hide input
                };
              } else {
                // edit button clicked while editing: apply changes
                nameInput.onchange(null);
              }
            };
          }
        } // update position field
        function updateLisPositionField(latlng, locked) {
          // update google maps link
          var gmaps_link = document.getElementById("google_maps_link");
          gmaps_link.href =
            "http://maps.google.com/maps?t=k&q=loc:" +
            latlng.lat.toFixed(6) +
            "+" +
            latlng.lng.toFixed(6);
          var coordSpan = document.getElementById("id_liscoords");
          var coordInput = document.getElementById("id_liscoords_input");
          var coordEdit = document.getElementById("id_liscoords_edit"); // old (edited) position may still be in background -> revert changes
          if (coordSpan && coordInput && coordInput.type !== "hidden") {
            coordInput.type = "hidden";
            coordSpan.style.display = "";
          } // show marker position in human-readable form
          var lat = Math.abs(latlng.lat).toFixed(_map2.PRECISION);
          lat += latlng.lat < 0 ? "Â°S" : "Â°N";
          var lng = Math.abs(latlng.lng).toFixed(_map2.PRECISION);
          lng += latlng.lng < 0 ? "Â°W" : "Â°O";
          coordSpan.textContent = lat + "; " + lng;
          coordSpan.style.color = "unset"; // reset any error coloring
          if (coordSpan && coordEdit && coordInput) {
            // can't edit locked LIS
            coordEdit.style.visibility = locked ? "hidden" : "initial"; // click on edit icon
            coordEdit.onclick = function (_) {
              if (coordInput.type === "hidden") {
                // no input: show input, create callback
                coordSpan.style.display = "none"; // hide span
                coordInput.type = ""; // show input
                coordInput.focus();
                coordInput.value = coordSpan.textContent;
                coordInput.onchange = function (_) {
                  // try to parse entered value
                  try {
                    (0, _utils.getLatLngFromString)(coordInput.value);
                    coordSpan.style.color = "unset"; // reset any error color
                  } catch (e) {
                    // can't parse: reset field, mark as error
                    coordInput.value = coordSpan.textContent;
                    coordSpan.style.color = _map2.COLORS.error;
                  } // coord changed: mark LIS as dirty
                  if (coordInput.value != coordSpan.textContent)
                    markDirty("position");
                  coordSpan.textContent = coordInput.value;
                  coordSpan.style.display = ""; // show title
                  coordInput.type = "hidden"; // hide input
                };
              } else {
                // edit button clicked while editing: apply changes
                coordInput.onchange(null);
              }
            };
          }
        } // display lock status, allow (un)locking
        function updateLisLock(marker) {
          var lockIcon = document.getElementById("lis-lock");
          if (!lockIcon) return;
          var lockIcons = ["ion-md-unlock", "ion-md-lock"];
          lockIcon.className =
            "lis-lock icon " + lockIcons[marker.properties.locked + 0];
          lockIcon.onclick = function (_) {
            // can't unlock while evaluation is in process
            if (marker.properties.locked && _region.lis_evaluation.running)
              return; // POST change: re-use LIS form
            var token =
              document.getElementById("lisform").csrfmiddlewaretoken.value;
            var form_data = new FormData();
            form_data.append("lock", !marker.properties.locked + "");
            form_data.append("csrfmiddlewaretoken", token);
            (0, _utils.fetchPost)(
              "lis/" + marker.properties.id + "/update/",
              form_data
            )
              .then(function (response) {
                return response.json();
              })
              .then(function (result) {
                // Lock status affects map display -> redraw on map.
                // This invalidates marker reference, so close modal view
                var markerdata = result.customLIS;
                $("#lis-modal").foundation("close");
                marker.removeFrom(_map);
                marker.removeFrom(_markerLayer);
                _markers = _markers.filter(function (l) {
                  return l._leaflet_id != marker.leafletID;
                });
                (0, _features.showResult)({ customLIS: markerdata });
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;
                try {
                  var _loop5 = function _loop5() {
                    var m = _step2.value; // set correct ID for opening
                    m.on("click", function (_) {
                      openLisModal(m.properties.id);
                    });
                  };
                  for (
                    var _iterator2 = _markers[Symbol.iterator](), _step2;
                    !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next())
                      .done);
                    _iteratorNormalCompletion2 = true
                  ) {
                    _loop5();
                  }
                } catch (err) {
                  _didIteratorError2 = true;
                  _iteratorError2 = err;
                } finally {
                  try {
                    if (
                      !_iteratorNormalCompletion2 &&
                      _iterator2.return != null
                    ) {
                      _iterator2.return();
                    }
                  } finally {
                    if (_didIteratorError2) {
                      throw _iteratorError2;
                    }
                  }
                }
                _markers = _markerLayer.getLayers();
              })
              .catch(function (e) {
                if (_map2.DEBUG) console.log(e); // fail: notify user
                alert(
                  "Aktion nicht mÃ¶glich. Findet gerade eine Berechnung statt?"
                );
              });
          };
        } // **************** evaluation **************** //
        function showRating(category, value) {
          for (var i = 1; i <= 5; i++) {
            var star = document.getElementById(category + "-rating-" + i);
            if (!star) continue;
            if (i <= value) {
              star.classList.remove("ion-md-star-outline");
              star.classList.add("ion-md-star");
            } else {
              star.classList.remove("ion-md-star");
              star.classList.add("ion-md-star-outline");
            }
          }
        }
        function updateLisRating(ratings) {
          var _loop6 = function _loop6(category) {
            var rating = ratings[category];
            showRating(category, rating); // interactivity
            var input = document.getElementById(category + "-rating");
            var div = document.getElementById(category + "-rating-div");
            if (!input || !div) return "continue";
            input.value = rating;
            var _loop7 = function _loop7(i) {
              var star = document.getElementById(category + "-rating-" + i);
              if (!star) return "continue";
              star.style.cursor = "pointer";
              star.onclick = function (_) {
                if (i != rating) {
                  input.value = i + "";
                  markDirty("rating");
                  showRating(category, i);
                }
              };
              star.onmouseover = function (_) {
                showRating(category, i);
              };
            };
            for (
              var i = 1;
              i <= 5 && _permissions.evaluateCustomLis >= 2;
              i++
            ) {
              var _ret2 = _loop7(i);
              if (_ret2 === "continue") continue;
            }
            div.onmouseleave = function (_) {
              showRating(category, input.value);
            };
          }; // update rating
          for (var category in ratings) {
            var _ret = _loop6(category);
            if (_ret === "continue") continue;
          }
        }
        function updateLisEvaluation(properties) {
          // fill LIS evaluation table
          var eval_div = document.getElementById("lis-eval-wrapper-div");
          if (eval_div) {
            if (!properties.evaluation) {
              // hide evaluation table if no evaluation for this LIS is found
              eval_div.style.display = "none";
              return;
            } else {
              // make sure evaluation table is visible
              eval_div.style.display = "";
            }
          }
          var eval_fields = [
            "year",
            "score_population",
            "score_poi",
            "score_traffic",
            "power",
            "count",
          ];
          var nearby_fields = [
            "pop",
            "income",
            "green",
            "poi",
            "traffic",
            "lis",
          ];
          var highway_fields = ["motorway", "trunk", "primary", "secondary"];
          var dnetz_fields = [
            "search_area_id",
            "los_id",
            "region_name_full",
            "category_full",
          ];
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;
          try {
            for (
              var _iterator3 = (_region.lis_evaluation.types || [])[
                  Symbol.iterator
                ](),
                _step3;
              !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done);
              _iteratorNormalCompletion3 = true
            ) {
              var key = _step3.value; // fill evaluation table
              var table = document.getElementById("lis-eval-table" + key);
              if (!table) continue;
              var evaluation = properties.evaluation[key];
              if (eval_fields.length != table.rows[0].cells.length) {
                console.log(
                  "width mismatch: " +
                    eval_fields.length +
                    " vs " +
                    table.rows[0].cells.length
                );
                continue;
              }
              var body = table.tBodies[0]; // reset table body
              body.innerHTML = "";
              for (var index in evaluation) {
                // index is string: careful with arithmetic
                var row = body.insertRow(-1);
                for (var j = 0; j < eval_fields.length; j++) {
                  var value = (0, _utils.roundToStr)(
                    evaluation[index][eval_fields[j]],
                    0
                  );
                  (0, _utils.addElem)("", value, row, "TD");
                }
              } // update info spans
              var ex_lis_span = document.getElementById(
                "existing_lis_span_" + key
              );
              if (ex_lis_span) {
                if (evaluation.length)
                  ex_lis_span.innerText =
                    (0, _utils.roundToStr)(
                      evaluation[0].score_existing_lis * 100.0,
                      0
                    ) + "%";
                else ex_lis_span.innerText = "-";
              } // update proximity info
              for (var i = 0; i < nearby_fields.length; i++) {
                var field = nearby_fields[i];
                var info = {};
                var radius_span = document.getElementById(
                  "radius_" + field + "_span_" + key
                );
                var value_span = document.getElementById(
                  "value_" + field + "_span_" + key
                );
                try {
                  info = properties.evaluation.info.scenarios[key][field];
                } catch (_) {}
                if (radius_span) radius_span.innerText = info.radius || "-";
                if (value_span) value_span.innerText = info.value || "-";
              } // update nearest highway info
              for (var _i3 = 0; _i3 < highway_fields.length; _i3++) {
                var _field = highway_fields[_i3];
                var _info = {};
                var elem = document.getElementById(
                  "value_nearest_highway_" + _field + "_" + key
                );
                try {
                  _info = properties.evaluation.info.highways[_field];
                } catch (_) {}
                if (elem) {
                  if (_info) {
                    var km = _info.distance / 1000.0;
                    var decimals = Math.min(
                      3,
                      Math.max(0, 5 - Math.log10(_info.distance))
                    );
                    var text = (0, _utils.roundToStr)(km, decimals) + " km";
                    if (_info.name) {
                      text = text + " (" + _info.name + ")";
                    }
                    elem.innerText = text;
                  } else {
                    elem.innerText = "-";
                  }
                }
              } // update dnetz info
              for (var _i4 = 0; _i4 < dnetz_fields.length; _i4++) {
                var _field2 = dnetz_fields[_i4];
                var _info2 = null;
                var _elem = document.getElementById(
                  "evaluation_" + _field2 + "_" + key
                );
                try {
                  _info2 =
                    properties.evaluation.info.dnetz_search_area[_field2];
                } catch (_) {}
                if (_elem) {
                  if (_info2) {
                    _elem.innerText = _info2;
                  } else {
                    _elem.innerText = "-";
                  }
                }
              }
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                _iterator3.return();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
        } // **************** description and chat **************** //
        // Callback when someone wrote a new LIS description.
        function handleNewLisDescription() {
          var lis_id = document.getElementById("lis_id");
          var button = document.getElementById("lis-description-submit-btn");
          var textarea = document.getElementById("lis-description-textarea");
          if (!lis_id || !textarea || !button) {
            return; //oops
          } // This is needed because value is empty when editing with simplemde...
          textarea.value = _simplemde.value();
          button.disabled = true;
          (0, _utils.fetchPost)(
            "lis/" + lis_id.value + "/update/",
            "lis-description-form",
            30000
          )
            .then(function (response) {
              return response.json();
            })
            .then(function (data) {
              var marker = _markers.find(function (m) {
                return m.properties.id == lis_id.value;
              });
              if (marker) {
                // update current LIS with returned info
                var feature = (0, _features.obj2FeatureArray)(
                  data.customLIS
                )[0];
                Object.assign(marker.properties, feature.properties); // copy properties
                // set preview mode for markdown editor
                if (!_simplemde.isPreviewActive()) {
                  _simplemde.togglePreview();
                }
              }
            })
            .catch(function (err) {
              if (_map2.DEBUG) console.log(err);
            })
            .finally(function () {
              button.disabled = false;
            });
        } // Callback when someone wrote a new message in LIS chat.
        // Send to backend, show in frontend.
        function handleNewLisMessage() {
          var lisform = resetLISForm();
          var lis_id = document.getElementById("lis_id");
          var button = document.getElementById("new-lis-message-submit-btn");
          var message_area = document.getElementById("new-lis-message-text");
          if (!lisform || !lis_id || !message_area || !button) {
            return; //oops
          }
          button.disabled = true;
          (0, _utils.fetchPost)(
            "lis/" + lis_id.value + "/message/new/",
            "new-lis-message-form",
            30000
          )
            .then(function (response) {
              return response.json();
            })
            .then(function (msg) {
              _chat_messages = msg;
              renderLisEventLog(parseInt(lis_id.value, 10));
            })
            .catch(function (err) {
              if (_map2.DEBUG) console.log(err);
            })
            .finally(function () {
              message_area.value = "";
              button.disabled = false;
            });
        } // **************** checklist **************** //
        // create new checklist item with given item dictionary
        // members of item may be label, checked, default, user and modified - none is required (e.g. empty item)
        function createLisChecklistItem(item) {
          // get containing checklist div
          var checklist = document.getElementById("lis-checklist");
          if (!checklist) return null; // create cell
          var cell = (0, _utils.addElem)(
            "cell checklist__item",
            null,
            null,
            "DIV"
          );
          var isDefault = Boolean(item.default);
          if (isDefault) cell.classList.add("checklist__item--default");
          else cell.classList.add("checklist__item--custom"); // create div containing checkbox, label and infobox
          var checkDiv = (0, _utils.addElem)(
            "checklist__checkbox",
            null,
            cell,
            "DIV"
          );
          var checkbox = null; // create checkbox
          checkbox = (0, _utils.addElem)(
            "lis-checkbox",
            null,
            checkDiv,
            "input"
          );
          checkbox.type = "checkbox";
          checkbox.checked = Boolean(item.checked);
          checkbox.id = "checkbox_" + checklist.childElementCount;
          checkbox.disabled = _permissions.checklistAccess < 2;
          checkbox.onclick = function (_) {
            markDirty("list"); // made change -> mark as changed
            updateChecklistProgressBar(); // redraw progress bar
          }; // create label for checkbox
          var label = item.label || "";
          var checklbl = (0, _utils.addElem)(null, label, checkDiv, "label");
          checklbl.htmlFor = checkbox ? checkbox.id : null;
          checklbl.setAttribute("isdefault", isDefault.toString());
          checklbl.title = label; // create info div for checkbox (user, last edit)
          var user = item.user; // user first/last name. May be null/undefined
          var modified = item.modified; // UNIX timestamp. May be null/undefined
          if (user) {
            var infodiv = (0, _utils.addElem)(
              "icon icon--small ion-md-information-circle",
              null,
              checkDiv,
              "i"
            );
            infodiv.title = "Letzte Ã„nderung von " + user;
            if (modified) {
              // have fun with timestamps and different time formats
              // Django TS: unix in full seconds, JS: milliseconds
              var modDate = new Date(modified * 1000); // is modified from today?
              if (new Date().toDateString() === modDate.toDateString()) {
                // modified today: show time
                infodiv.title +=
                  " um " + modDate.toLocaleTimeString("de").substr(0, 5);
              } else {
                // not modified today: show date
                infodiv.title += " am " + modDate.toLocaleDateString("de");
              }
            }
          }
          if (!isDefault && _permissions.checklistAccess >= 2) {
            // non-default: make editable and removable
            // create input box to replace label
            var checkInput = (0, _utils.addElem)("", "", null, "input"); // create edit icon
            var editDiv = (0, _utils.addElem)(
              "icon icon--small ion-md-create",
              null,
              checkDiv,
              "i"
            ); // is this item in editable state?
            var editState = false;
            editDiv.onclick = function (_) {
              if (!editState) {
                // replace label with text input (same content)
                checkDiv.replaceChild(checkInput, checklbl);
                checkInput.value = checklbl.textContent;
                checkInput.focus();
                editState = true;
                checkInput.onchange = function (_) {
                  // finished editing -> replace text input with label
                  if (checklbl.textContent != checkInput.value)
                    markDirty("list"); // made change -> enable saving
                  checklbl.textContent = checkInput.value;
                  checkDiv.replaceChild(checklbl, checkInput);
                  editState = false;
                  checklbl.title = checkInput.value;
                };
              } else {
                // clicked on edit button while editing: finished editing
                checkInput.onchange(null);
              }
            }; // delete button: delete cell
            // create delete icon
            var delDiv = (0, _utils.addElem)(
              "checklist__delete",
              null,
              cell,
              "DIV"
            );
            (0, _utils.addElem)(
              "icon icon--medium ion-md-close",
              null,
              delDiv,
              "i"
            );
            delDiv.onclick = function (_) {
              checklist.removeChild(cell);
              markDirty("list"); // made change -> enable saving
              updateChecklistProgressBar(); // redraw progress bar
            };
          }
          return cell;
        } // redraw modal LIS view checklist
        function updateLisChecklist(checklist) {
          var checkDiv = document.getElementById("lis-checklist");
          if (!checkDiv) return; // empty checklist
          checkDiv.innerHTML = ""; // re-build checklist items
          for (var i = 0; i < checklist.length; i++) {
            var cell = createLisChecklistItem(checklist[i]);
            checkDiv.appendChild(cell);
          } // set progress bar
          updateChecklistProgressBar();
        } // add new empty item to LIS checklist
        function addNewLisChecklistItem() {
          var checklist = document.getElementById("lis-checklist");
          if (!checklist) return;
          var cell = createLisChecklistItem({});
          checklist.appendChild(cell); // open input for cell to edit -> simulate click on edit button
          cell.firstChild.children[2].click(); // made change: redraw progress bar, enable save
          updateChecklistProgressBar();
          markDirty("list");
        } // the current LIS checklist as array of dicts for ease of transportation
        function getLisChecklist() {
          var checklist = [];
          var checkListDiv = document.getElementById("lis-checklist"); // loop over checklist items
          for (
            var i = 0;
            checkListDiv && i < checkListDiv.childElementCount;
            i++
          ) {
            var cell = checkListDiv.children[i];
            var checkDiv = cell.firstChild;
            var checkbox = checkDiv.firstChild;
            var label = checkDiv.children[1];
            if (label.textContent != "") {
              checklist.push({
                label: label.textContent,
                default: label.getAttribute("isdefault") === "true",
                checked: checkbox.checked,
              });
            }
          }
          return checklist;
        } // update width of checklist progress bar
        function updateChecklistProgressBar() {
          var progress = document.getElementById("checklist-progress-bar");
          if (!progress)
            // can't update non-existent progress bar
            return; // get all checkboxes by special class
          var checkboxes = document.getElementsByClassName("lis-checkbox"); // get number of checked boxes
          var percent = 0;
          var _iteratorNormalCompletion4 = true;
          var _didIteratorError4 = false;
          var _iteratorError4 = undefined;
          try {
            for (
              var _iterator4 = checkboxes[Symbol.iterator](), _step4;
              !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done);
              _iteratorNormalCompletion4 = true
            ) {
              var box = _step4.value;
              percent += box.checked ? 1 : 0;
            }
          } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
                _iterator4.return();
              }
            } finally {
              if (_didIteratorError4) {
                throw _iteratorError4;
              }
            }
          }
          if (checkboxes.length == 0) {
            progress.style.display = "none";
            document.getElementsByClassName(
              "lis-checklist-noitems"
            )[0].style.display = "";
          } else {
            progress.style.display = "";
            document.getElementsByClassName(
              "lis-checklist-noitems"
            )[0].style.display = "none";
          } // calculate fraction of checked boxes
          percent = percent ? (percent * 100) / checkboxes.length : 0; // redraw progress bar (width, caption)
          (0, _utils.setProgressbarValue)(progress, Math.round(percent));
        } // **************** power table **************** //
        // remake power table
        function updateLisPowerTable(power_table) {
          // empty power table
          removeLisPowerTableRows();
          for (var i = 0; i < power_table.length; i++) {
            // add a row for each entry
            addLisPowerTableRow(
              power_table[i].id,
              power_table[i].count,
              power_table[i].power,
              power_table[i].demand_factor
            );
          }
        } // remove all rows from power table
        function removeLisPowerTableRows() {
          var table = document.getElementById("lis-power-table");
          if (!table) return;
          var rowcount = table.rows.length; // remove all user-created rows -> header and footer rows are retained
          for (var i = 0; i + 2 < rowcount; i++) {
            table.deleteRow(1); // delete current (second) row
          } // change -> evaluate
          evalLisPowerTable();
        } // add single row in power table. May give defaults for fields.
        // This does not constitute a change and does not enable saving.
        function addLisPowerTableRow(id, count, power, demand_factor) {
          var table = document.getElementById("lis-power-table");
          if (!table) return null; // add new row at bottom
          var row = table.tBodies[0].insertRow(-1); // add table data element for hidden id
          var td0 = (0, _utils.addElem)("", "", row, "TD");
          td0.hidden = true;
          var row_id = (0, _utils.addElem)("", "", td0, "DIV");
          row_id.hidden = true;
          row_id.textContent = String(id); // id may be undefined
          // add table data element for number of CP
          var td1 = (0, _utils.addElem)("", "", row, "TD");
          var number = (0, _utils.addElem)("", "", td1, "INPUT");
          number.type = "number";
          number.min = "1";
          number.max = "999";
          number.value = (count || 1) + "";
          number.size = 4;
          number.disabled = _permissions.lisAccess < 2;
          number.onchange = function (_) {
            number.value =
              Math.min(Math.max(number.value, number.min), number.max) + "";
            evalLisPowerTable();
          }; // add table data element for power (dropdown menu)
          var td2 = (0, _utils.addElem)("", "", row, "TD");
          var select = (0, _utils.addElem)("", "", td2, "SELECT");
          power = power || 11;
          select.name = "power-value"; //select.style.float = "left"; // CSS
          select.style.width = "80%";
          var options = [
            3.7, 11, 22, 43, 50, 60, 150, 200, 250, 300, 320, 350, 450,
          ];
          for (var i = 0; i < options.length; i++) {
            var option = (0, _utils.addElem)(
              "",
              options[i] + "",
              select,
              "OPTION"
            );
            option.value = options[i] + "";
            if (options[i] == power) option.selected = true;
          }
          select.disabled = _permissions.lisAccess < 2;
          select.onchange = function (_) {
            evalLisPowerTable();
          }; // SPAN for "kW"
          var kwSpan = (0, _utils.addElem)("", " kW", td2, "SPAN");
          kwSpan.style.lineHeight = "2.5rem"; // add table element for concurrency factor
          var td3 = (0, _utils.addElem)("", "", row, "TD");
          var factor = (0, _utils.addElem)("", "", td3, "INPUT");
          factor.type = "number";
          factor.min = "0.1";
          factor.max = "1.0";
          factor.step = "0.01";
          factor.size = 4;
          factor.value = (demand_factor || 1.0) + "";
          factor.disabled = _permissions.lisAccess < 2;
          factor.onchange = function (_) {
            factor.value =
              Math.min(Math.max(factor.value, factor.min), factor.max) + "";
            evalLisPowerTable();
          }; // add table element for sum
          (0, _utils.addElem)("", " - ", row, "TD"); // used later to display sum of row
          // add table element for removal button
          var cell = row.insertCell(-1);
          if (_permissions.lisAccess >= 2) {
            // insert delete button
            var del_btn = (0, _utils.addElem)(
              "delete-button",
              "",
              cell,
              "BUTTON"
            );
            del_btn.title = "Zeile entfernen";
            del_btn.onclick = function (_) {
              table.deleteRow(row.rowIndex);
              evalLisPowerTable();
            };
            (0, _utils.addElem)(
              "icon ion-md-remove-circle-outline",
              "",
              del_btn,
              "I"
            );
          } // table finished -> write out summary of table
          evalLisPowerTable();
          return row;
        } // write summary of table
        function evalLisPowerTable() {
          var table = document.getElementById("lis-power-table");
          var power_arr = [];
          if (!table) return power_arr;
          var count_sum = 0;
          var power_sum = 0.0;
          var rowcount = table.rows.length; // skip first and last row (header and footer)
          for (var row = 1; row + 1 < rowcount; row++) {
            var id = Number(table.rows[row].cells[0].children[0].textContent);
            var count = Number(table.rows[row].cells[1].children[0].value);
            var power = Number(table.rows[row].cells[2].children[0].value);
            var demand_factor = Number(
              table.rows[row].cells[3].children[0].value
            );
            if (
              Number.isNaN(count) ||
              Number.isNaN(power) ||
              Number.isNaN(demand_factor)
            ) {
              // invalid entry: ignore row result
              table.rows[row].cells[3].textContent = "-";
            } else {
              // valid entries: add to charging point power
              var rowPower = count * power * demand_factor;
              count_sum += count;
              power_sum += rowPower; // display row result
              table.rows[row].cells[4].textContent =
                (0, _utils.roundToStr)(rowPower, 2) + " kW";
              power_arr.push({
                id: id,
                count: count,
                power: power,
                demand_factor: demand_factor,
              });
            }
          } // display charging point power in footer
          table.rows[rowcount - 1].cells[0].textContent = count_sum + "";
          table.rows[rowcount - 1].cells[2].textContent =
            (0, _utils.roundToStr)(power_sum, 2) + " kW"; // any evaluation comes after change -> enable saving
          // Initial evaluation (when view is opened) is executed before save disable
          markDirty("power"); // don't write back results yet (don't have marker anyway), let user save
          return power_arr;
        } // **************** LIS survey  **************** //
        function updateLisSurvey(lis_survey, lis_survey_data) {
          lis_survey_data = lis_survey_data || {};
          var main_div = document.getElementById("lis-survey-div");
          if (!main_div) {
            return;
          }
          main_div.innerHTML = ""; // build tabs
          var tabs = {};
          {
            var tab_header = (0, _utils.addElem)("tabs", "", main_div, "ul");
            tab_header.dataset.tabs = "";
            tab_header.dataDeepLink = false;
            tab_header.id = "lis-survey-tabs";
            var tab_content = (0, _utils.addElem)(
              "tabs-content",
              "",
              main_div,
              "div"
            );
            tab_content.dataset.tabsContent = "lis-survey-tabs";
            var first = true;
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;
            try {
              for (
                var _iterator5 = (lis_survey.tabs || [])[Symbol.iterator](),
                  _step5;
                !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next())
                  .done);
                _iteratorNormalCompletion5 = true
              ) {
                var tab = _step5.value;
                var title = (0, _utils.addElem)(
                  "tabs-title",
                  "",
                  tab_header,
                  "li"
                );
                var a = (0, _utils.addElem)("", tab.label, title, "a");
                a.href = "#lis-survey-tab-" + tab.key;
                var content = (0, _utils.addElem)(
                  "tabs-panel",
                  "",
                  tab_content,
                  "div"
                );
                content.id = "lis-survey-tab-" + tab.key;
                tabs[tab.key] = content;
                if (first) {
                  title.classList.add("is-active");
                  content.classList.add("is-active");
                  first = false;
                }
              }
            } catch (err) {
              _didIteratorError5 = true;
              _iteratorError5 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
                  _iterator5.return();
                }
              } finally {
                if (_didIteratorError5) {
                  throw _iteratorError5;
                }
              }
            }
            new Foundation.Tabs($("#lis-survey-tabs"));
          }
          var used_keys = {}; // add elements (input fields and others)
          var _iteratorNormalCompletion6 = true;
          var _didIteratorError6 = false;
          var _iteratorError6 = undefined;
          try {
            for (
              var _iterator6 = (lis_survey.elems || [])[Symbol.iterator](),
                _step6;
              !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done);
              _iteratorNormalCompletion6 = true
            ) {
              var elem = _step6.value;
              if (elem.type === "caption") {
                (0, _utils.addElem)(
                  "lis-survey-caption",
                  elem.label,
                  tabs[elem.tab] || main_div,
                  "div"
                );
              } else {
                // type === "input" is implicit
                var field_div = (0, _utils.addElem)(
                  "lis-survey-input-div",
                  "",
                  tabs[elem.tab] || main_div,
                  "div"
                );
                var field_label = (0, _utils.addElem)(
                  "",
                  elem.label,
                  field_div,
                  "label"
                );
                var field_input = (0, _utils.addElem)(
                  "lis-survey-input",
                  "",
                  field_label,
                  elem.type === "textarea" ? "textarea" : "input"
                );
                field_input.dataset.fieldKey = elem.key;
                for (
                  var _i5 = 0, _Object$entries = Object.entries(elem.attr);
                  _i5 < _Object$entries.length;
                  _i5++
                ) {
                  var _Object$entries$_i = _slicedToArray(
                      _Object$entries[_i5],
                      2
                    ),
                    a_key = _Object$entries$_i[0],
                    a_value = _Object$entries$_i[1];
                  field_input[a_key] = a_value;
                }
                if (
                  lis_survey_data.fields &&
                  lis_survey_data.fields[elem.key] !== undefined
                ) {
                  field_input.value = lis_survey_data.fields[elem.key];
                }
                if (!elem.no_line_break) {
                  (0, _utils.addElem)("", "", field_div.parentElement, "br");
                }
                if (used_keys[elem.key] !== undefined) {
                  console.error("lis survey key is not unique: " + elem.key);
                }
                used_keys[elem.key] = true;
              }
            }
          } catch (err) {
            _didIteratorError6 = true;
            _iteratorError6 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
                _iterator6.return();
              }
            } finally {
              if (_didIteratorError6) {
                throw _iteratorError6;
              }
            }
          }
        } // **************** images **************** //
        // add images to LIS
        function updateLisImages(images) {
          var files_div = document.getElementById("lis_files_container");
          if (!images || !files_div) return;
          var img_modal = document.getElementById("lis-img-modal");
          var big_img = document.getElementById("lis-big-img");
          var big_img_link = document.getElementById("lis-big-img-link");
          var big_img_download = document.getElementById("lis-img-download");
          var big_file = document.getElementById("lis-big-file");
          var big_filename = document.getElementById("lis-big-filename");
          var prev = document.getElementById("lis-big-img-prev");
          var next = document.getElementById("lis-big-img-next");
          files_div.innerHTML = "";
          if (images.length == 0)
            (0, _utils.addElem)(
              "",
              "Keine Dateien vorhanden.",
              files_div,
              "SPAN"
            );
          var current_idx; // index of currently open image
          var last_idx = null; // index of last added image
          var _loop8 = function _loop8(i) {
            var url = images[i].url;
            var thumb_small_url = images[i].thumb_small_url;
            var thumb_medium_url = images[i].thumb_medium_url;
            var orig_filename = ""; // original filename without random part
            {
              // regex that matches the file name of a URL
              var filename_rx = new RegExp(/[^\/]+$/);
              orig_filename = url.match(filename_rx)[0] || "";
              if (orig_filename) {
                orig_filename = (0, _utils.filenameWithoutRand)(orig_filename);
                orig_filename = decodeURI(orig_filename);
              }
            }
            if (thumb_small_url) {
              // use is_image instead?
              var id = images[i].id;
              var outer = window.document.createElement("div");
              outer.classList.add("lis-img-thumb");
              var inner = window.document.createElement("div");
              var img = window.document.createElement("img");
              img.src = thumb_small_url;
              img.dataset.imgid = id; // save image metadata
              Object.assign(images[i], {
                name: orig_filename,
                prev: last_idx,
                next: null, // index of next image (set with next image, if any)
              });
              if (last_idx !== null) images[last_idx].next = i;
              last_idx = i;
              outer.addEventListener("click", function () {
                current_idx = i;
                big_img_link.href = url;
                big_img_download.href = url;
                big_img_download.download = orig_filename;
                big_img.src = thumb_medium_url;
                big_img.dataset.imgid = id;
                prev.style.visibility =
                  images[i].prev === null ? "hidden" : "visible";
                next.style.visibility =
                  images[i].next === null ? "hidden" : "visible";
                $(img_modal).foundation("open");
                img_modal.onkeydown = function (e) {
                  if (
                    e.key === "ArrowLeft" &&
                    images[current_idx].prev !== null
                  )
                    prev.click();
                  if (
                    e.key === "ArrowRight" &&
                    images[current_idx].next !== null
                  )
                    next.click();
                  if (e.key === "Escape") $(img_modal).foundation("close");
                };
              });
              inner.appendChild(img);
              outer.appendChild(inner);
              files_div.appendChild(outer);
            } else {
              var _id = images[i].id;
              var _outer = window.document.createElement("div");
              _outer.classList.add("lis-img-thumb");
              var _inner = window.document.createElement("div");
              var it = window.document.createElement("i");
              it.classList.add("icon");
              it.classList.add("ion-md-document");
              var txt = window.document.createElement("span");
              txt.classList.add("text-ellipsis");
              txt.appendChild(document.createTextNode(orig_filename));
              _outer.addEventListener("click", function () {
                big_filename.textContent = orig_filename;
                big_file.href = url;
                big_file.download = orig_filename;
                big_file.dataset.imgid = _id;
                $("#lis-file-modal").foundation("open");
              });
              _outer.appendChild(_inner);
              _inner.appendChild(it);
              _inner.appendChild(txt);
              files_div.appendChild(_outer);
            }
          };
          for (var i = 0; i < images.length; i++) {
            _loop8(i);
          }
          prev.onclick = function (_) {
            // show previous image in same modal
            var prev_idx = images[current_idx].prev;
            var prev_img = images[prev_idx];
            current_idx = prev_idx; // update elements in modal view
            big_img_link.href = prev_img.url;
            big_img_download.href = prev_img.url;
            big_img_download.download = prev_img.name;
            big_img.src = prev_img.thumb_medium_url;
            big_img.dataset.imgid = prev_img.id;
            prev.style.visibility =
              prev_img.prev === null ? "hidden" : "visible";
            next.style.visibility = "visible";
          };
          next.onclick = function (_) {
            // show next image in same modal
            var next_idx = images[current_idx].next;
            var next_img = images[next_idx];
            current_idx = next_idx; // update elements in modal view
            big_img_link.href = next_img.url;
            big_img_download.href = next_img.url;
            big_img_download.download = next_img.name;
            big_img.src = next_img.thumb_medium_url;
            big_img.dataset.imgid = next_img.id;
            prev.style.visibility = "visible";
            next.style.visibility =
              next_img.next === null ? "hidden" : "visible";
          };
        } // User uploaded new image for LIS
        function handleNewLisImg() {
          var img = document.getElementById("lis-img-proxy");
          var button = document.getElementById("lis-add-img-btn");
          var form = document.getElementById("lisform"); // used to get CSRF cookie
          var lis_id = document.getElementById("lis_id");
          if (!(form && lis_id)) return;
          var form_data = new FormData(); // add all files under same name to form data -> make list
          for (var i = 0; i < img.files.length; i++) {
            form_data.append("image[]", img.files[i]);
          }
          form_data.append(
            "csrfmiddlewaretoken",
            form.csrfmiddlewaretoken.value
          );
          button.disabled = true;
          (0, _utils.fetchPost)(
            "lis/" + lis_id.value + "/update/",
            form_data,
            30000
          )
            .then(function (response) {
              return response.json();
            })
            .then(function (data) {
              if (data.customLIS.images) {
                // update images
                var marker = _markers.find(function (m) {
                  return m.properties.id == data.customLIS.id;
                });
                marker.properties.images = data.customLIS.images;
                updateLisModal(marker);
              } else if (data.message) {
                if (_map2.DEBUG) console.log(data.message);
              } else {
                console.log("Failed to update files from response:");
                console.log(data);
              }
            })
            .catch(function (err) {
              if (_map2.DEBUG) console.log(err);
            })
            .finally(function () {
              button.disabled = false;
            });
        } // User deleted image from LIS
        function handleDeleteLISFile(isImage) {
          var form = document.getElementById("lisform"); // used to get CSRF cookie
          var lis_id = document.getElementById("lis_id");
          if (!(form && lis_id)) return; // create new form data
          var form_data = new FormData();
          var type = isImage ? "img" : "file";
          var file_a = document.getElementById("lis-big-" + type);
          var button = document.getElementById("lis-" + type + "-delete-btn");
          var image_id = file_a.dataset.imgid;
          form_data.append(
            "csrfmiddlewaretoken",
            form.csrfmiddlewaretoken.value
          );
          button.disabled = true;
          (0, _utils.fetchPost)(
            "lis/deleteimg/" + image_id + "/",
            form_data,
            30000
          )
            .then(function (response) {
              return response.json();
            })
            .then(function (data) {
              if (data.error) {
                if (_map2.DEBUG) console.log(data.error);
              } else {
                // success
                document
                  .getElementById("lis-" + type + "-close-button")
                  .click();
                if (isImage) file_a.src = "";
                else file_a.href = "";
                var marker = _markers.find(function (m) {
                  return m.properties.id == lis_id.value;
                });
                if (marker.properties.images) {
                  marker.properties.images = marker.properties.images.filter(
                    function (x) {
                      return x.id != image_id;
                    }
                  );
                }
                updateLisModal(marker);
              }
            })
            .catch(function (err) {
              if (_map2.DEBUG) console.log(err);
            })
            .finally(function () {
              button.disabled = false;
            });
        } // LIS survey submitted
        function handleLisSurvey() {
          var survey_form = document.getElementById("lis-survey-form");
          var lis_id = document.getElementById("lis_id");
          var form_data = new FormData(survey_form);
          var fields = document.getElementsByClassName("lis-survey-input");
          var survey_json = { fields: {} };
          var _iteratorNormalCompletion7 = true;
          var _didIteratorError7 = false;
          var _iteratorError7 = undefined;
          try {
            for (
              var _iterator7 = fields[Symbol.iterator](), _step7;
              !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done);
              _iteratorNormalCompletion7 = true
            ) {
              var field = _step7.value;
              var key = field.dataset.fieldKey;
              var value = field.value;
              if (value !== "") {
                if (field.type === "number") {
                  value = parseFloat(value);
                }
                survey_json.fields[key] = value;
              }
            }
          } catch (err) {
            _didIteratorError7 = true;
            _iteratorError7 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
                _iterator7.return();
              }
            } finally {
              if (_didIteratorError7) {
                throw _iteratorError7;
              }
            }
          }
          form_data.append("lis_survey", JSON.stringify(survey_json));
          var button = document.getElementById("lis-survey-submit-button");
          button.disabled = true;
          (0, _utils.fetchPost)(
            "lis/" + lis_id.value + "/update/",
            form_data,
            30000
          )
            .then(function (response) {
              return response.json();
            })
            .then(function (data) {
              if (data.error) {
                if (_map2.DEBUG) console.log(data.error);
              } else {
                // success
                var marker = _markers.find(function (m) {
                  return m.properties.id == lis_id.value;
                });
                marker.properties.survey = data.customLIS.survey;
                updateLisModal(marker);
              }
            })
            .catch(function (err) {
              if (_map2.DEBUG) console.log(err);
            })
            .finally(function () {
              button.disabled = false;
            });
        }
      },
      {
        "./chat": 3,
        "./features": 6,
        "./map": 9,
        "./table": 13,
        "./utils": 14,
      },
    ],
    9: [
      function (require, module, exports) {
        "use strict";
        /**
 @copyright ðŸŒµÂ©âŒ¾Â®â„—
 @author Localiser dev team
**/ Object.defineProperty(exports, "__esModule", { value: true });
        exports.handleFormSubmit = handleFormSubmit;
        exports.handleExportLISExcel = handleExportLISExcel;
        exports.handleQuerySave = handleQuerySave;
        exports.handleQueryFetch = handleQueryFetch;
        exports.removeRestrictPoly = removeRestrictPoly;
        exports.initializeMap = initializeMap;
        exports.updateH2Orders = updateH2Orders;
        exports.handleGetH2Orders = handleGetH2Orders;
        exports.handleH2OrderDelete = handleH2OrderDelete;
        exports.handleEvaluationSubmit = handleEvaluationSubmit;
        exports.handleMultiLisDelete = handleMultiLisDelete;
        exports.toggleElemVisibility = toggleElemVisibility;
        exports.COLORS =
          exports.HAS_TOUCH =
          exports.PRECISION =
          exports.MAX_ZOOM =
          exports.DEBUG =
            void 0;
        var _features = require("./features");
        var _layer = require("./layer");
        var _comment_modal = require("./comment_modal");
        var _lis_modal = require("./lis_modal");
        var _chat = require("./chat");
        var _scenario = require("./scenario");
        var _table = require("./table");
        var _debug_info = require("./debug_info");
        var _AHP = require("./AHP");
        var _utils = require("./utils");
        function _slicedToArray(arr, i) {
          return (
            _arrayWithHoles(arr) ||
            _iterableToArrayLimit(arr, i) ||
            _nonIterableRest()
          );
        }
        function _nonIterableRest() {
          throw new TypeError(
            "Invalid attempt to destructure non-iterable instance"
          );
        }
        function _iterableToArrayLimit(arr, i) {
          if (
            !(
              Symbol.iterator in Object(arr) ||
              Object.prototype.toString.call(arr) === "[object Arguments]"
            )
          ) {
            return;
          }
          var _arr = [];
          var _n = true;
          var _d = false;
          var _e = undefined;
          try {
            for (
              var _i = arr[Symbol.iterator](), _s;
              !(_n = (_s = _i.next()).done);
              _n = true
            ) {
              _arr.push(_s.value);
              if (i && _arr.length === i) break;
            }
          } catch (err) {
            _d = true;
            _e = err;
          } finally {
            try {
              if (!_n && _i["return"] != null) _i["return"]();
            } finally {
              if (_d) throw _e;
            }
          }
          return _arr;
        }
        function _arrayWithHoles(arr) {
          if (Array.isArray(arr)) return arr;
        }
        function _typeof(obj) {
          if (
            typeof Symbol === "function" &&
            typeof Symbol.iterator === "symbol"
          ) {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj &&
                typeof Symbol === "function" &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? "symbol"
                : typeof obj;
            };
          }
          return _typeof(obj);
        } /** Basics: Constants, redefinitions and helpers **/ // constants
        var LOCATE_ON_INIT = false; // try to locate user?
        var DEBUG = true; // show debug console output?
        exports.DEBUG = DEBUG;
        var MAX_ZOOM = 18; // maximum map zoom (in)
        exports.MAX_ZOOM = MAX_ZOOM;
        var PRECISION = 5; // maximum number of decimal places shown for lat/lng
        exports.PRECISION = PRECISION;
        var HAS_TOUCH =
          "ontouchstart" in window || !!navigator.msMaxTouchPoints; // German readable colormap names
        exports.HAS_TOUCH = HAS_TOUCH;
        var COLORMAPS_DE = [
          ["Blau", "Blues"],
          ["Rot-Violett", "RdPu"],
          ["Rot", "Reds"],
          ["Violett", "Purples"],
          ["GrÃ¼n-Blau", "GnBu"],
          ["Blau-GrÃ¼n", "BuGn"],
        ];
        var COLORS = {
          // custom colors
          border: "rgb(0, 135, 84)",
          potential: "#ff1a80",
          LIS: "#808080",
          proposed: "#39bfff",
          POI_custom: "skyblue",
          RLI_blue: "MidnightBlue",
          searchPolygon: "#07689F",
          h2Polygon: "#008ede",
          defaultCluster: "#0080ff",
          ruler: "yellow",
          restricted: "#ff4040",
          error: "#FF0000",
          progressBgd: "#104D88",
          progressFgd: "#ffffff",
          progressBgdInverse: "#ccdbdc",
          progressFgdInverse: "#104D88",
        }; // CORRECT WINDOW VIEWPORT UNITS ON MOBILE
        // Fix bug -> map height is bigger than expected on smaller screens due to browser interpretations of the vh unit
        exports.COLORS = COLORS;
        function setCorrectVH() {
          var vh = window.innerHeight * 0.01;
          document
            .getElementById("mapframe")
            .style.setProperty("--vh", "".concat(vh, "px"));
          if (_map) _map.invalidateSize();
        } /************************ requests and forms ************************/ // write hidden values to form: restricted zone, custom LIS, evaluation geometry (called by form.html and is a context menu callback for evaluation)
        function writeHidden(evaluation) {
          var hidden_field = window.document.getElementById("id_hidden");
          if (!hidden_field) {
            //alert("Ups. Wo ist mein Formular? Lade Seite erneut...");
            //location.reload(true);
            return;
          }
          var data = { restrict: undefined, evaluation: undefined };
          if (_restrictPoly.length > 0) {
            // write restricted zone (only user-placed)
            data.restrict = _restrictPoly
              .filter(function (p) {
                return !p.properties || p.properties.desc === "Verbotene Zone";
              })
              .map(function (p) {
                return p.getLatLngs()[0];
              });
          }
          if (evaluation) {
            // write evaluation geometry
            data.evaluation = evaluation.latlng;
          }
          hidden_field.value = JSON.stringify(data);
        } // intercept fast finder form submit for user interface logic
        function handleFormSubmit(event) {
          var button = document.getElementById("compute-button");
          var form = document.getElementById("computation_form");
          var queryform = document.getElementById("queryform");
          var saveBtn = document.getElementById("querysave");
          var message_div = document.getElementById("error-message");
          var spinner = document.getElementById("map-spinner"); // prepare in- and output elements
          button.disabled = true;
          saveBtn.style.visibility = "hidden";
          message_div.textContent = "";
          spinner.style.visibility = ""; // generic loading spinner
          writeHidden(event); // reset error fields
          {
            var x = form.getElementsByClassName("form-error");
            for (var i = 0; i < x.length; i++) {
              x[i].textContent = "";
              x[i].classList.remove("is-visible");
            }
          }
          $("#fastfinder-modal").foundation("close");
          (0, _utils.fetchPost)("computeLIS/", "computation_form", 120000)
            .then(function (response) {
              return response.json();
            })
            .then(function (data) {
              if (data.action && data.action.includes("clear_map")) {
                (0, _layer.removeLayers)(null, true);
              }
              if (data.JSON) {
                // sync computation finished: show result on map
                if (!data.JSON.evaluation) {
                  saveBtn.style.visibility = "visible";
                  queryform.elements["result"].value = JSON.stringify(
                    data.JSON
                  );
                }
                (0, _features.showResult)(data.JSON); // this changes data.JSON
                button.disabled = false; // enable button for new computation
              }
              if (data.task_id) {
                setTimeout(
                  updateProgress,
                  0,
                  data.task_id,
                  "progress-canvas-computelis",
                  2000,
                  function (result) {
                    // success
                    if (!result.evaluation) {
                      var exportBtn = document.getElementById(
                        "potential-export-btn"
                      );
                      saveBtn.style.visibility = "visible";
                      if (exportBtn) exportBtn.style.display = "inline";
                      queryform.elements["result"].value =
                        JSON.stringify(result);
                    }
                    (0, _features.showResult)(result); // this changes result
                    button.disabled = false;
                  },
                  function (message) {
                    // fail
                    //alert("Berechnung fehlgeschlagen");
                    if (DEBUG) console.log(message);
                    button.disabled = false;
                    $("#fastfinder-modal").foundation("open");
                  }
                );
              }
              if (_typeof(data.message) === "object") {
                //TODO improve, translate error messages
                for (var elem_id in data.message) {
                  //if (DEBUG) console.log(elem_id);
                  var input = document.getElementById("id_" + elem_id);
                  input.invalid = true;
                  var elem = document.getElementById(
                    "id_" + elem_id + "_error"
                  );
                  if (elem) {
                    elem.textContent = data.message[elem_id].join(" ");
                    elem.classList.add("is-visible");
                  }
                }
                throw "Das Formular enthÃ¤lt Fehler (siehe oben).";
              } else if (data.message) {
                throw data.message;
              }
            })
            .catch(function (err) {
              //if (DEBUG) console.log(err);
              message_div.textContent = "" + err;
              button.disabled = false; // re-open modal on error
              $("#fastfinder-modal").foundation("open");
            })
            .finally(function () {
              // always hide generic spinner
              spinner.style.visibility = "hidden";
            });
        }
        function handleExportLISExcel(event) {
          var button = document.getElementById("lis-export-excel-button");
          button.disabled = true;
          var form_data = new FormData(); // Add CSRF token
          var token =
            document.getElementById("lisform").csrfmiddlewaretoken.value;
          form_data.append("csrfmiddlewaretoken", token); // for POI in Excel, hold Shift key
          form_data.append("include_poi", event.shiftKey); // Add selected lis from site manager table
          if ($.fn.dataTable.isDataTable("#site-manager-table")) {
            var dt = $("#site-manager-table").DataTable();
            var selected_rows = dt.rows({ selected: true }).data();
            if (selected_rows.length > 0) {
              var lis_ids = [];
              for (var i = 0; i < selected_rows.length; i++) {
                lis_ids.push(selected_rows[i].lis_id);
              }
              form_data.append("selected_lis", JSON.stringify(lis_ids));
            }
          } // fetch!
          (0, _utils.fetchPost)("exportLIS/excel/", form_data, 1200000)
            .then(function (response) {
              if (!response.ok) {
                throw new Error("Network response was not ok");
              }
              return response.blob();
            })
            .then(function (blob) {
              // create a nice file name
              var file_name = "Ladestandorte_Export";
              if (_region && _region.name) {
                file_name += "_" + (0, _utils.stringToFileName)(_region.name);
              }
              file_name += ".xlsx";
              function getDownload(blob) {
                // create temporary link and click it to download blob
                var link = window.document.createElement("a");
                link.href = window.URL.createObjectURL(blob);
                link.target = "_blank";
                link.download = file_name;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
              }
              if (blob.type === "application/json") {
                // async: keep user happy until export finished
                blob.text().then(function (t) {
                  var task_id = JSON.parse(t)["task_id"];
                  setTimeout(
                    updateProgress,
                    0,
                    task_id,
                    "progress-canvas-export",
                    1000,
                    function (info) {
                      // success
                      // decode base64 string
                      var binary = atob(info);
                      var buffer = new Uint8Array(
                        new ArrayBuffer(binary.length)
                      );
                      for (var _i = 0; _i < binary.length; _i++) {
                        buffer[_i] = binary.charCodeAt(_i);
                      }
                      var blob = new Blob([buffer], {
                        type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                      });
                      getDownload(blob);
                      button.disabled = false;
                    },
                    function (message) {
                      // fail
                      if (DEBUG) console.log(message);
                      button.disabled = false;
                    },
                    true
                  );
                });
              } else {
                // already Excel file
                getDownload(blob);
                button.disabled = false;
              }
            })
            .catch(function (err) {
              if (DEBUG) console.log(err);
              button.disabled = false;
            });
        } // hook for async task. Function for repeated timeout callback
        // polls server with task id after `timeout` milliseconds.
        function updateProgress(taskID, canvas_id, timeout, success, fail) {
          var inverse_colors =
            arguments.length > 5 && arguments[5] !== undefined
              ? arguments[5]
              : false;
          var canvas = document.getElementById(canvas_id);
          (0, _utils.request)({ path: "progress", query: taskID })
            .then(function (response) {
              if (response.percent < 0) {
                // error
                fail(response.info);
                canvas.parentElement.style.visibility = "hidden";
              } else if (response.percent == 0) {
                canvas.parentElement.style.visibility = "visible"; // pending, not computing yet
                setTimeout(
                  updateProgress,
                  timeout,
                  taskID,
                  canvas_id,
                  timeout,
                  success,
                  fail,
                  inverse_colors
                );
              } else if (response.percent < 100) {
                // started: show circular progress bar
                var context = canvas.getContext("2d"); //context.lineCap = "round";
                var posX = canvas.width / 2;
                var posY = canvas.height / 2;
                var lineWidth = 4;
                var radius = canvas.width * 0.4;
                canvas.parentElement.style.visibility = "visible";
                context.clearRect(0, 0, canvas.width, canvas.height);
                context.beginPath(); // draw full circle
                context.arc(posX, posY, radius - lineWidth / 2, 0, 2 * Math.PI);
                context.strokeStyle = inverse_colors
                  ? COLORS.progressBgdInverse
                  : COLORS.progressBgd;
                context.lineWidth = lineWidth;
                context.stroke(); // draw circular progress bar (start top)
                context.beginPath();
                context.arc(
                  posX,
                  posY,
                  radius - lineWidth / 2,
                  (Math.PI * 270) / 180,
                  (Math.PI * (270 + (response.percent * 360) / 100)) / 180
                );
                context.strokeStyle = inverse_colors
                  ? COLORS.progressFgdInverse
                  : COLORS.progressFgd;
                context.lineWidth = lineWidth;
                context.stroke();
                setTimeout(
                  updateProgress,
                  timeout,
                  taskID,
                  canvas_id,
                  timeout,
                  success,
                  fail,
                  inverse_colors
                );
              } else if (response.percent == 100) {
                // finished: clean up, return result
                canvas.parentElement.style.visibility = "hidden";
                success(response.info);
              }
            })
            .catch(function (error) {
              canvas.parentElement.style.visibility = "hidden";
              fail(error);
            });
        } // Save query by name.
        //
        // Create or update description in backend.
        // Add/Rename option in dropdown menu.
        function handleQuerySave() {
          var desc = prompt("Beschreibung der Berechnung:");
          var form = document.getElementById("queryform");
          if (desc && form) {
            form.elements["desc"].value = desc; // POST to backend
            (0, _utils.fetchPost)("query/", "queryform", 10000)
              .then(function (response) {
                return response.json();
              })
              .then(function (query) {
                // add/replace description
                var list = document.getElementById("query-select");
                if (list) {
                  // get option by class and value
                  var option = document.querySelector(
                    'option[value="' + query.id + '"].query-option'
                  );
                  if (option) option.text = query.desc; // rename option
                  else {
                    // add option
                    var opt = (0, _utils.addElem)(
                      "query-option",
                      query.desc,
                      list,
                      "option"
                    );
                    opt.value = query.id;
                  }
                }
              }); // hide button
            form.elements["query"].style.visibility = "hidden";
            form.elements["query"].value = "";
          } else {
            alert("Speichern abgebrochen.");
          }
        } // Fetch query result by id.
        //
        // e: selection field with id value.
        function handleQueryFetch(e) {
          if (e && e.value != "0") {
            (0, _utils.request)({
              path: "query",
              query: "?id=" + e.value,
              timeout: 5000,
              method: "GET",
            })
              .then(function (data) {
                // request returned
                if (data.action && data.action.includes("clear_map"))
                  (0, _layer.removeLayers)(null, true);
                if (data.JSON) (0, _features.showResult)(data.JSON);
              })
              .catch(function (err) {
                if (DEBUG) console.log(err);
              });
          }
        } // temporary layer to show radii around point clicked by user
        var _radiiLayer = null;
        function getNearbyCallback(e) {
          // start GET request to get population, POI and existing LIS around user clicked location
          var spinner = document.getElementById("map-spinner");
          if (spinner) spinner.style.visibility = "";
          (0, _utils.request)({
            path: "nearby",
            query: "?x=" + e.latlng.lng + "&y=" + e.latlng.lat,
            timeout: 10000,
            method: "GET",
          })
            .then(function (data) {
              // remove old data
              clearRadii(); // transport mode (key in response), color on map (RGBA), table title
              var keycolor = [
                ["car", "#2a80ff80", "Auto"],
                ["bike", "#8080ff80", "Fahrrad"],
                ["foot", "#0000FF80", "FuÃŸweg"],
              ]; // draw radii with information
              for (
                var _i2 = 0, _keycolor = keycolor;
                _i2 < _keycolor.length;
                _i2++
              ) {
                var k = _keycolor[_i2];
                var info = data[k[0]]; // build table
                var table = "";
                table +=
                  "<tr><td>Einwohner</td><td>" + info.population + "</td></tr>";
                var poi_info = info.poi;
                if (info.poi_cat.length) {
                  // mouseover: most common categories with count
                  poi_info =
                    '<span title="HÃ¤ufigste Kategorien:\n' +
                    info.poi_cat
                      .map(function (e) {
                        return e.amenity + ": " + e.count;
                      })
                      .join("\n") +
                    '" style="border-bottom: 1px dotted black; cursor: default">' +
                    poi_info +
                    "</span>";
                }
                table +=
                  "<tr><td>Points of Interest</td><td>" +
                  poi_info +
                  "</td></tr>";
                var lis_info = info.exlis;
                if (info.exlis_pwr.length) {
                  // mouseover: all nearby LIS powers and number of connectors
                  lis_info =
                    '<span title="' +
                    info.exlis_pwr
                      .map(function (e) {
                        return e.power + " kW: " + e.count;
                      })
                      .join("\n") +
                    '" style="border-bottom: 1px dotted black; cursor: default">' +
                    lis_info +
                    "</span>";
                }
                table +=
                  "<tr><td>Bestehende Ladeinfrastruktur</td><td>" +
                  lis_info +
                  "</td></tr>";
                table =
                  '<table style="width:100%;"><caption>' +
                  k[2] +
                  ' <span style="font-weight: normal;">(Radius = ' +
                  info.radius +
                  " m)</span>" +
                  "</caption>" +
                  table +
                  "</table>";
                _radiiLayer = (0, _features.showData)(
                  [
                    {
                      type: "Feature",
                      geometry: {
                        type: "Point",
                        coordinates: [e.latlng.lat, e.latlng.lng],
                      },
                      properties: { desc: table },
                    },
                  ],
                  { name: "Umkreis", color: k[1], radius: -info.radius }
                );
              }
            })
            .catch(function (err) {
              if (DEBUG) console.log(err);
            })
            .finally(function () {
              if (spinner) spinner.style.visibility = "hidden";
            });
        } // remove layers added by getNearbyCallback
        function clearRadii() {
          if (_radiiLayer) {
            _radiiLayer.clearLayers();
          }
        } /** Drawing **/ // callback to init drawing of forbidden zone
        function drawCallback(_) {
          _map.pm.enableDraw("Poly", {
            allowSelfIntersection: false,
            snappable: false,
            tooltips: false,
            templineStyle: { color: COLORS.restricted },
            hintlineStyle: { color: COLORS.restricted, dashArray: [5, 5] },
            pathOptions: {
              color: COLORS.restricted,
              fillColor: COLORS.restricted,
              fillOpacity: 0.4,
            },
            cursorMarker: true,
          });
          _drawingMode = { restricted: true };
          _map.getContainer().focus(); // focus on map to listen for key events
        } // callback for removing polygon from restricted zones
        function removeRestrictPoly(p) {
          _restrictPoly = _restrictPoly.filter(function (m) {
            return m._leaflet_id != p._leaflet_id;
          });
          _map.removeLayer(p);
        }
        function showRegion() {
          var boundaryLayer = L.polygon(_region.geom.coordinates, {
            color: COLORS.border,
            opacity: 0.5,
            interactive: false,
            noClip: true,
          }).addTo(_map);
          setTimeout(function () {
            _map.removeLayer(boundaryLayer);
          }, 3000);
          _map.fitBounds(boundaryLayer.getBounds());
        } /** Geolocation **/ // entry point for geolocation: get current position from browser. May need HTTPS
        function getLocation(_event) {
          if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition, showError);
          } else {
            console.log("Geolocation wird nicht vom Browser unterstÃ¼tzt.");
          }
        } // callback for geolocation success: zoom to position, show marker
        function showPosition(pos) {
          _map.setView([pos.coords.latitude, pos.coords.longitude], 12); // add marker with confidence radius (accuracy)
          var markerLayer = (0, _features.showData)(
            [
              {
                geometry: {
                  coordinates: [pos.coords.latitude, pos.coords.longitude],
                },
                properties: { color: COLORS.RLI_blue },
              },
            ],
            { radius: pos.coords.accuracy }
          ); // remove after 5 seconds
          setTimeout(function () {
            _map.removeLayer(markerLayer);
          }, 20000);
        } // callback for geolocation failure: print error
        function showError(error) {
          switch (error.code) {
            case error.PERMISSION_DENIED:
              alert("Keine Berechtigung fÃ¼r Geolocation.");
              break;
            case error.POSITION_UNAVAILABLE:
              alert("Standortdaten stehen nicht zur VerfÃ¼gung.");
              break;
            case error.TIMEOUT:
              alert("Anfrage dauerte zu lange.");
              break;
            case error.UNKNOWN_ERROR:
              alert("Ups.");
              break;
          }
        } // Context callback: show location URL, copy to clipboard on demand
        function displayLocation(_event) {
          // get current URL without modifiers
          var url = window.location.origin + window.location.pathname;
          if (!url.endsWith("/")) url += "/"; // get coordinates
          var lat = _map.getCenter()["lat"];
          var lng = _map.getCenter()["lng"];
          var x = (0, _utils.roundToStr)(lng, 3);
          var y = (0, _utils.roundToStr)(lat, 3);
          var z = _map.getZoom(); // append coordinates to url as parameters
          url += "?x=" + x + "&y=" + y + "&z=" + z; // show url to user
          if (confirm("Kopiere in Zwischenablage:\n" + url)) {
            // copy to clipboard
            if (document.execCommand) {
              var dummy = (0, _utils.addElem)(
                "",
                url,
                document.body,
                "textarea"
              );
              dummy.select();
              document.execCommand("copy");
              document.body.removeChild(dummy);
            } else alert("Kopieren wird nicht vom Browser unterstÃ¼tzt.");
          }
        }
        /************ TEST **************/ function test(_event) {
          $("#tab-site-manager")[0].firstElementChild.click();
          var canvas = document.getElementById("progress-canvas-export");
          var context = canvas.getContext("2d");
          context.lineCap = "round";
          var posX = canvas.width / 2;
          var posY = canvas.height / 2;
          var lineWidth = 4;
          canvas.parentElement.style.visibility = "visible";
          var time = 3000;
          var _loop = function _loop(progress) {
            setTimeout(function (_) {
              context.clearRect(0, 0, 2 * posX, 2 * posY);
              context.beginPath(); // draw full circle
              context.arc(posX, posY, posX - lineWidth / 2, 0, 2 * Math.PI);
              context.strokeStyle = COLORS.progressFgd;
              context.lineWidth = lineWidth;
              context.stroke(); // draw circular progress bar (start top)
              context.beginPath();
              context.arc(
                posX,
                posY,
                posX - lineWidth / 2,
                (Math.PI * 270) / 180,
                (Math.PI * (270 + (progress * 360) / 100)) / 180
              );
              context.strokeStyle = COLORS.progressBgd;
              context.lineWidth = lineWidth;
              context.stroke();
            }, (time * progress) / 100);
          };
          for (
            var progress = 0;
            progress < 100;
            progress += Math.floor(Math.random() * 10)
          ) {
            _loop(progress);
          }
          setTimeout(function (_) {
            canvas.parentElement.style.visibility = "hidden";
            $("#tab-site-manager")[0].firstElementChild.click();
          }, time);
        }
        /************ EXPORT: init **************/ function initializeMap() {
          if (_region && _region.geom) {
            (0, _features.reverseCoordinates)(_region.geom);
          }
          (function (leaflet) {
            // custom colored map icon
            leaflet.colorIcon = function (color) {
              color = color || "#FFFFFF";
              var div = leaflet.divIcon({
                className: "",
                iconAnchor: [0, 24],
                labelAnchor: [-6, 0],
                popupAnchor: [0, -36],
                html:
                  '<span style="background-color: ' +
                  color +
                  '; width: 2rem; height: 2rem; display: block; left: -1rem; top: -1rem; position: relative; border-radius: 2rem 2rem 0; transform: rotate(45deg); border: 1px solid #000000"/>',
              });
              return div;
            }; // custom image map icon
            leaflet.ImageIcon = function (iconOptions) {
              if (iconOptions instanceof Array)
                // icon + shadow
                var icon = leaflet.icon({
                  className: "",
                  iconUrl: iconOptions[0],
                  iconSize: [40, 33],
                  iconAnchor: [20, 33],
                  labelAnchor: [0, -10],
                  popupAnchor: [0, -25],
                  shadowUrl: iconOptions[1],
                  shadowSize: [41, 41],
                  shadowAnchor: [13, 41],
                });
              else if (iconOptions instanceof Object) {
                // file, height, width as members
                var icon = leaflet.icon({
                  className: "",
                  iconUrl: iconOptions.file,
                  iconSize: [iconOptions.width, iconOptions.height],
                });
              }
              return icon;
            };
          })(L);
          var customLisDisabled =
            _permissions.lisAccess < 2 ||
            (_region.lisLimit !== null &&
              _region.customLIS.length >= _region.lisLimit) ||
            _region.lis_evaluation.running; // set up map
          _map = L.map("mapframe", {
            // contextmenu
            contextmenu: true,
            contextmenuItems: [
              {
                text: "Hier einen Kommentar setzen",
                iconCls: "ion ion-md-chatboxes",
                callback: _comment_modal.createComment,
                disabled: _permissions.chatAccess < 2,
              },
              {
                text: "Wo bin ich?",
                iconCls: "ion ion-md-locate",
                callback: getLocation,
              },
              {
                text: "Generiere Link",
                iconCls: "ion ion-md-copy",
                callback: displayLocation,
              },
              {
                text: "Leere Karte",
                iconCls: "ion ion-md-trash",
                callback: _layer.removeLayers,
                disabled: _permissions.computation == 0,
              },
            ],
            zoomControl: true, // show zoom control
          });
          if (!_h2activated || _permissions.lisAccess > 0) {
            // LIS project
            _map.contextmenu.insertItem(
              {
                text: "Platziere Ladestandort",
                iconCls: "ion ion-md-pin",
                callback: _lis_modal.addCustomCPCallback,
                disabled: customLisDisabled,
              },
              0
            ); //_map.contextmenu.insertItem({
            //text: 'Bewerte Standort',
            //iconCls: "ion ion-md-thumbs-up",
            //callback: handleFormSubmit,
            //disabled: _permissions.computation<2
            //}, 1);
            _map.contextmenu.insertItem(
              {
                text: "Was ist in der NÃ¤he?",
                iconCls: "ion ion-md-search",
                callback: getNearbyCallback,
                disabled: !_permissions.siteManager,
              },
              2
            );
            _map.contextmenu.insertItem(
              {
                text: "Zeichne verbotene Zone",
                iconCls: "ion ion-md-create",
                callback: drawCallback,
                disabled: _permissions.computation < 2,
              },
              3
            ); /*
        _map.contextmenu.insertItem({
            // unsupported option
            text: 'Platziere POI',
            iconCls: "ion ion-md-add-circle-outline",
            callback: addPoiCallback,
            disabled: _region.name !== "test" //!_permissions.dataAccess
        }, 0);
        */
          } // H2 marketplace: add option at top to add orders
          if (_h2activated) {
            _map.contextmenu.insertItem(
              {
                text: "Neuer H2-Auftrag",
                iconCls: "ion ion-md-basket",
                callback: newH2OrderCallback,
              },
              0
            );
          } // region named test: add "test" menu entry
          if (_region && _region.name === "test")
            _map.contextmenu.addItem({
              text: "Test",
              iconCls: "ion ion-md-help",
              callback: test,
            });
          var viewbox = L.polygon(_region.geom.coordinates).getBounds();
          L.Control.geocoder({
            geocoder: L.Control.Geocoder.nominatim({
              geocodingQueryParams: {
                // restrict geocoder results to project region
                viewbox: viewbox.pad(0.1).toBBoxString(),
                bounded: 1,
              },
            }),
            placeholder: "Suche...",
            errorMessage: "Keine Ergebnisse in der Projektregion.",
            showResultIcons: false,
          }).addTo(_map); // set zoom control position in map
          _map.zoomControl.setPosition("topright"); // add map scale
          L.control
            .scale({ imperial: false, position: "bottomright" })
            .addTo(_map); // Populate messages area
          (0, _chat.renderSidebarChat)();
          {
            // various links
            var osmLink =
              '<a href="https://openstreetmap.org">OpenStreetMap</a>';
            var gisLink =
              "Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community"; // base layers
            var osm_base_layer = L.tileLayer(
              "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
              {
                attribution: "Tiles &copy; " + osmLink + " Contributors",
                maxZoom: Math.min(19, MAX_ZOOM),
              }
            );
            var gis_base_layer = L.tileLayer(
              "https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}",
              {
                attribution: "Tiles &copy; " + gisLink,
                maxZoom: Math.min(19, MAX_ZOOM),
              }
            );
            /*
        const Esri_WorldGrayCanvas = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}', {
            attribution: 'Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ',
            maxZoom: Math.min(16, MAX_ZOOM)
        });
         */ var light_layer = L.tileLayer(
              "https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png",
              {
                attribution:
                  "Tiles &copy; Carto, under CC BY 3.0. Data by " +
                  osmLink +
                  ", under ODbL.",
                maxZoom: MAX_ZOOM,
              }
            ).addTo(_map);
            var dark_layer = L.tileLayer(
              "https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png",
              {
                attribution:
                  "Tiles &copy; Carto, under CC BY 3.0. Data by " +
                  osmLink +
                  ", under ODbL.",
                maxZoom: MAX_ZOOM,
              }
            );
            var light_nolabels_layer = L.tileLayer(
              "https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}.png",
              {
                attribution:
                  "Tiles &copy; Carto, under CC BY 3.0. Data by " +
                  osmLink +
                  ", under ODbL.",
                maxZoom: MAX_ZOOM,
              }
            );
            var baseLayers = {
              OpenStreetMap: osm_base_layer,
              "GIS Satellite": gis_base_layer,
              Dark: dark_layer,
              "Light (stumme Karte)": light_nolabels_layer,
              Light: light_layer,
            };
            _ctrlLayer = L.control.layers(baseLayers, null);
            _ctrlLayer.addTo(_map);
          }
          _commentLayer = L.layerGroup().addTo(_map);
          _restrictPoly = [];
          (0, _utils.request)({ path: "lis" })
            .then(function (response) {
              var _loop2 = function _loop2(i) {
                var marker = _markers[i];
                var marker_id = marker.properties.id;
                marker.properties = response.customLIS.find(function (lis) {
                  return lis.id == marker_id;
                });
                marker.on("click", function (_) {
                  (0, _lis_modal.openLisModal)(marker_id);
                });
              }; // update markers
              for (var i = 0; i < _markers.length; i++) {
                _loop2(i);
              } // enable site manager
              var sm_tab = document.getElementById("tab-site-manager");
              if (sm_tab) {
                sm_tab.classList.remove("disabled-sidebar-tab");
              } // render chat again
              (0, _chat.renderSidebarChat)();
            })
            .catch(function (error) {
              if (DEBUG) console.log(error);
              alert(
                "Nachladen der Ladepunkte fehlgeschlagen. Einige Funktionen stehen nicht zur VerfÃ¼gung."
              );
            });
          if (_h2activated) {
            handleGetH2Orders({}).then(function () {
              var url = new URL(window.location + "");
              if (url.searchParams.get("h2order")) {
                var h2order_id = url.searchParams.get("h2order");
                if (_h2orders) {
                  var _iteratorNormalCompletion = true;
                  var _didIteratorError = false;
                  var _iteratorError = undefined;
                  try {
                    for (
                      var _iterator = _h2orders[Symbol.iterator](), _step;
                      !(_iteratorNormalCompletion = (_step = _iterator.next())
                        .done);
                      _iteratorNormalCompletion = true
                    ) {
                      var order = _step.value;
                      if (order.id + "" === h2order_id) {
                        updateH2OrderModal(order);
                        break;
                      }
                    }
                  } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                  } finally {
                    try {
                      if (
                        !_iteratorNormalCompletion &&
                        _iterator.return != null
                      ) {
                        _iterator.return();
                      }
                    } finally {
                      if (_didIteratorError) {
                        throw _iteratorError;
                      }
                    }
                  }
                }
              }
            });
          } // onload: start where the user is, in selected region or at the RLI in Adlershof. Have to start somewhere...
          window.onload = function (_) {
            setCorrectVH(); // Render debugging information
            (0, _debug_info.renderDebugInfo)(); // set map viewport
            // get URL params (if supported by browser)
            var x, y, z;
            if (URLSearchParams) {
              var params = new URLSearchParams(window.location.search); // location.href.search?
              x = Number(params.get("x"));
              y = Number(params.get("y"));
              z = Number(params.get("z"));
            }
            if (x && y && z) {
              // highest priority: URL params
              _map.setView([y, x], z);
              (0, _features.showResult)(_region);
            } else {
              if (LOCATE_ON_INIT) {
                // second highest priority
                // ask user for location when option is set
                // async call, so next part will be executed as well (show POI etc)
                getLocation(null);
              } // default: zoom to region bounds
              try {
                //_map.fitBounds(L.polyline(_region.geom.coordinates).getBounds());
                showRegion();
                (0, _features.showResult)(_region); // mainly interested in _region.customLIS
              } catch (e) {
                // something really stupid happened
                if (DEBUG) console.log(e);
                _map.setView([52.43, 13.53], 12);
              }
            } // set up colormap
            (0, _features.setHeatColormap)("Blues");
            {
              var cs = window.document.getElementById("colormap-select");
              if (cs) {
                var i;
                for (i in COLORMAPS_DE) {
                  var option = document.createElement("option");
                  option.text = COLORMAPS_DE[i][0];
                  option.value = COLORMAPS_DE[i][1];
                  cs.add(option);
                }
              }
            } // initialize scenario modal (chart and table)
            (0, _scenario.initScenarios)(); // Initialize markdown editor
            {
              var textarea = document.getElementById(
                "lis-description-textarea"
              );
              var form = document.getElementById("lis-description-form");
              if (textarea && form) {
                _simplemde = new SimpleMDE({
                  element: textarea,
                  spellChecker: false,
                  autoDownloadFontAwesome: false,
                });
                {
                  var last_width = null;
                  _simplemde.codemirror.on("refresh", function () {
                    if (
                      form.scrollWidth > 0 &&
                      form.scrollWidth != last_width
                    ) {
                      last_width = form.scrollWidth;
                      _simplemde.codemirror.refresh();
                    }
                  });
                }
                $("#lis_modal_accordion").on("down.zf.accordion", function () {
                  _simplemde.codemirror.refresh();
                });
              }
            }
          }; // On resize
          window.addEventListener("resize", function () {
            setCorrectVH();
          }); // override map's onClick behavior
          // CTRL-key pressed: ruler
          _map.on("click", function onMapClick(e) {
            if (e.originalEvent.ctrlKey) {
              if (!_ruler) {
                // create new ruler
                _ruler = L.polyline([e.latlng, e.latlng], {
                  color: COLORS.ruler,
                }).addTo(_map);
              } else {
                // add section to ruler
                _ruler.addLatLng(e.latlng);
                var latlngs = _ruler.getLatLngs(); // iterate over ruler sections to get total length (m)
                var dist = 0;
                for (var i = 1; i < latlngs.length; i++) {
                  dist += latlngs[i].distanceTo(latlngs[i - 1]);
                }
                dist = Math.floor(dist); // write distance to ruler tooltip
                var tooltip = _ruler.getTooltip();
                if (tooltip)
                  _ruler.setTooltipContent(dist + "m").openTooltip(e.latlng);
                else
                  _ruler
                    .bindTooltip(dist + "m", { permanent: true })
                    .openTooltip(e.latlng);
                _ruler.redraw();
              }
            } else {
              // default
              if (DEBUG) console.log(e.latlng); // clear ruler
              if (_ruler) _ruler.remove();
              _ruler = null;
              clearRadii();
            }
          });
          {
            var _keys; // listen for keypresses on map. Esc cancels polygon drawing.
            document.onkeydown = function (e) {
              if (e.key === "Escape") {
                _map.pm.disableDraw("Poly");
                _drawingMode = null;
                clearRadii();
              }
              _keys =
                e.keyCode == 38 && _keys != 38 ? 38 : _keys * 38 + e.keyCode;
              if (_keys === 6448128025120785) {
                L.TileLayer.Konami = L.TileLayer.extend({
                  getTileUrl: function getTileUrl(_c) {
                    return (
                      "https://placekitten.com/256/256?image=" +
                      (Math.ceil(Math.random() * 16) % 16)
                    );
                  },
                  getAttribution: function getAttribution() {
                    return "<a href='https://placekitten.com/attribution.html'>PlaceKitten</a>";
                  },
                });
                var layer = new L.TileLayer.Konami();
                _ctrlLayer.addBaseLayer(layer, "???");
                layer.addTo(_map);
              }
            };
          } // zoom callback
          // change height level label
          // heatmap: rescale radius (pixel based)
          _map.on("zoomend", function (_) {
            // recompute heat point radius (must be given in pixels -> convert absolute radius in meters to pixels)
            // cutoff at 100 pixels radius, strange artefacts otherwise
            if (
              _heatLayer &&
              _heatLayer._map &&
              (0, _utils.metersInPixels)(_heatLayer.options.abs_radius) < 100
            ) {
              _heatLayer.setOptions({
                radius: (0, _utils.metersInPixels)(
                  _heatLayer.options.abs_radius
                ),
                blur:
                  (0, _utils.metersInPixels)(_heatLayer.options.abs_radius) / 2,
                blendMultiply: true,
              });
            }
          });
          var sidebar = _region
            ? L.control.sidebar("sidebar").addTo(_map)
            : null;
          {
            sidebar.addEventListener("content", function (tab) {
              if (tab.id == "site-manager") {
                // Open sidebar in full width for site manager
                document.getElementById("sidebar").style.width = "100%";
                (0, _table.renderSiteManagerTable)();
              } else if (tab.id == "debug-info") {
                // Open sidebar in full width for debug info
                document.getElementById("sidebar").style.width = "100%";
              } else if (tab.id == "h2market") {
                renderH2FilterState();
              } else {
                // other tabs get normal width
                document.getElementById("sidebar").style.width = "";
              } // Scroll to bottom of chat
              if (tab.id == "chat") {
                var form = document.getElementById("chatform");
                form.scrollIntoView();
              }
            });
            sidebar.addEventListener("closing", function () {
              document.getElementById("sidebar").style.width = "";
            });
          }
          if (_region.lis_evaluation.task) {
            setTimeout(
              updateProgress,
              0,
              _region.lis_evaluation.task,
              "progress-canvas-evaluation",
              3000,
              function () {
                // success
                if (
                  confirm(
                    "Bewertung abgeschlossen. Seite neu laden, um Ergebnisse abzurufen?"
                  )
                )
                  location.reload();
              },
              function (message) {
                // fail
                if (DEBUG) console.log(message);
              }
            );
          }
          if (_region.filesTask) {
            setTimeout(
              updateProgress,
              0,
              _region.filesTask,
              "progress-canvas-files",
              3000,
              function () {
                // success
                _region.filesTask = null;
                (0, _AHP.loadAHPData)();
              },
              function (message) {
                // fail
                if (DEBUG) console.log(message);
              }
            );
          } // listen to when a new layer is created (drawing finished)
          _map.on("pm:create", function (e) {
            // get new layer of drawing
            var l = e.layer;
            if (_drawingMode.restricted) {
              // bind new contextmenu to allow for deleting polygon
              l.bindContextMenu({
                contextmenu: true,
                contextmenuInheritItems: false,
                contextmenuItems: [
                  {
                    text: "Entferne Zone",
                    iconCls: "ion ion-md-close",
                    callback: function callback(_) {
                      removeRestrictPoly(l);
                    },
                  },
                ],
              });
              _drawingMode = null;
              _restrictPoly.push(e.layer);
              return;
            }
            if (_drawingMode.search) {
              // send to backend for checking and saving
              if (!(0, _lis_modal.resetLISForm)()) return;
              var lisform = document.getElementById("lisform");
              lisform.id_search.value = JSON.stringify(
                e.layer.toGeoJSON().geometry
              );
              (0, _utils.fetchPost)(
                "lis/" + _drawingMode.search.properties.id + "/update/",
                "lisform",
                10000
              )
                .then(function (_) {
                  // success: link polygon to marker
                  _drawingMode.search.searchPoly = e.layer; // adjust context menu entry
                  _drawingMode.search.options.contextmenuItems[0] = {
                    text: "Entferne Suchraum",
                    iconCls: "ion ion-md-close",
                    callback: _lis_modal.removeSearchPoly,
                  };
                  _drawingMode = null; // remove polygon fro  map after timeout (still has mouseover callback)
                  setTimeout(function (_) {
                    _map.removeLayer(e.layer);
                  }, 3000);
                  return;
                })
                .catch(function (err) {
                  alert("Suchraum konnte nicht erstellt werden.");
                  _map.removeLayer(e.layer);
                  if (DEBUG) console.log(err);
                });
            }
          });
        }
        var _h2OrderLayer = null;
        function addH2OrdersToMap(orders) {
          // reset order layer
          if (_h2OrderLayer) _h2OrderLayer.clearLayers();
          orders = orders.map(function (o) {
            if (o.geom_point) {
              o.geom = {
                type: "Point",
                coordinates: [o.geom_point.lng, o.geom_point.lat],
              };
              o.icon = {
                file:
                  _h2info.icon_base_path +
                  _h2info.products[o.product_super_type][o.product_type][
                    o.product
                  ].icon_s,
                width: 23,
                height: 23,
              }; // polygon geometry: prepare mouseover
              if (o.geom_poly) {
                o.polygon = L.polygon(o.geom_poly, {
                  stroke: true,
                  color: COLORS.h2Polygon,
                  opacity: 1,
                  weight: 2,
                  interactive: false,
                  fill: true,
                  fillColor: COLORS.h2Polygon,
                  fillOpacity: 0.4,
                  noClip: true,
                });
              }
              return o;
            }
          });
          orders = (0, _features.obj2FeatureArray)(orders);
          _h2OrderLayer = (0, _features.showData)(orders, {
            name: "Hâ‚‚ Angebote/Suchen",
            clustered: true,
            clusterClass: "h2order-markercluster",
            divIconFunc: "h2order",
          });
          if (_h2OrderLayer) {
            _h2OrderLayer.on("click", function (m) {
              // open modal on click
              updateH2OrderModal(m.layer.properties);
            });
            _h2OrderLayer.on("mouseover", function (e) {
              // show polygon on hover
              if (e.sourceTarget.properties.polygon)
                _map.addLayer(e.sourceTarget.properties.polygon);
            });
            _h2OrderLayer.on("mouseout", function (e) {
              // hide polygon when mouse leaves marker
              if (e.sourceTarget.properties.polygon)
                _map.removeLayer(e.sourceTarget.properties.polygon);
            });
          }
        }
        function newH2OrderCallback(e) {
          window.location.href =
            window.location.origin +
            window.location.pathname +
            "h2order/?x=" +
            e.latlng.lng +
            "&y=" +
            e.latlng.lat;
        }
        function updateH2Orders(orders, ordering) {
          _h2orders = orders;
          {
            var _loop3 = function _loop3(field) {
              var direction = ordering[field];
              _h2orders.sort(function (a, b) {
                var va = a[field];
                var vb = b[field]; // a 'set' of fields that should be translated before sorting
                var translate_fields = {
                  order_type: 1,
                  product: 1,
                  product_type: 1,
                  product_super_type: 1,
                };
                if (field in translate_fields) {
                  va = _h2info.trans[field][a[field]];
                  vb = _h2info.trans[field][b[field]];
                }
                if (va < vb) {
                  return -1 * direction;
                } else if (va > vb) {
                  return 1 * direction;
                } else {
                  return 0;
                }
              });
            };
            for (var field in ordering) {
              _loop3(field);
            }
          }
          var orders_tbody = document.getElementById("tbody_h2orders");
          orders_tbody.innerHTML = "";
          var order_types = { 1: "Suche", 2: "Biete" };
          var _loop4 = function _loop4(i) {
            var row = window.document.createElement("tr");
            function addText(text) {
              var td = document.createElement("td");
              td.innerText = text;
              row.appendChild(td);
            }
            function addImage(src, caption) {
              var td = document.createElement("td");
              var i = new Image();
              i.src = _h2info.icon_base_path + src;
              i.width = 32;
              td.appendChild(i);
              var span = document.createElement("span");
              span.className = "h2order_product_name";
              span.innerText = caption;
              td.appendChild(span);
              row.appendChild(td);
            }
            addText(orders[i].index || "-");
            addText(order_types[orders[i].order_type]);
            addText(
              _h2info.trans.product_super_type[orders[i].product_super_type] ||
                "-"
            );
            addText(_h2info.trans.product_type[orders[i].product_type] || "-");
            addImage(
              _h2info.products[orders[i].product_super_type][
                orders[i].product_type
              ].icon_s ||
                _h2info.products[orders[i].product_super_type][
                  orders[i].product_type
                ][orders[i].product].icon_s,
              _h2info.trans.product[orders[i].product] || "-"
            );
            addText(_h2info.trans.status[orders[i].status] || "-");
            addText(_h2info.trans.purity[orders[i].purity] || "-");
            addText(_h2info.trans.pressure[orders[i].pressure] || "-");
            addText(orders[i].max_h2_mass || "-");
            row.onclick = function () {
              updateH2OrderModal(orders[i]);
            };
            orders_tbody.appendChild(row);
          };
          for (var i = 0; i < orders.length; i++) {
            _loop4(i);
          }
          addH2OrdersToMap(orders);
        }
        function updateH2OrderModal(order) {
          var order_types = { 1: "SUCHE", 2: "ANGEBOT" };
          var order_classes = { 1: "h2order-typ-buy", 2: "h2order-typ-sell" };
          {
            var t = document.getElementById("h2order-modal-order-type");
            t.innerText = order_types[order.order_type];
            var c = document.getElementById("h2order-modal-order-circle");
            c.className = order_classes[order.order_type];
          }
          var div = document.getElementById("h2order-modal-desc");
          div.innerText = order.description || "-";
          {
            var img = document.getElementById("h2order-modal-product-img");
            img.src = order.icon.file;
          }
          {
            var prod = document.getElementById("h2order-modal-product");
            prod.innerText = _h2info.trans.product[order.product] || "-";
            var cat = document.getElementById("h2order-modal-category");
            if (order.product != order.product_type) {
              cat.innerText =
                " (" +
                (_h2info.trans.product_type[order.product_type] || "-") +
                ")";
            } else {
              cat.innerText = "";
            }
          }
          {
            var elem = document.getElementById("h2order-modal-coords");
            elem.innerText =
              order.geom_point.lat.toLocaleString() +
              "    " +
              order.geom_point.lng.toLocaleString();
          }
          {
            var _elem = document.getElementById("h2order-modal-location-div");
            _elem.onclick = function (_) {
              // close order modal
              $("#h2order-modal").foundation("close"); // close sidebar
              $(".sidebar-close").click(); // zoom to order location
              var zoom = Math.max(_map.getZoom(), 11);
              _map.flyTo([order.geom_point.lat, order.geom_point.lng], zoom);
            };
          }
          {
            var _elem2 = document.getElementById("h2order-modal-status");
            var status = _h2info.trans.status[order.status] || "-";
            if (order.status_date) status += " bis " + order.status_date;
            _elem2.innerText = status;
          }
          {
            var _elem3 = document.getElementById("h2order-modal-purity");
            _elem3.innerText = _h2info.trans.purity[order.purity] || "-";
          }
          {
            var _elem4 = document.getElementById("h2order-modal-pressure");
            _elem4.innerText = _h2info.trans.pressure[order.pressure] || "-";
          }
          {
            var _elem5 = document.getElementById(
              "h2order-modal-inlet-temperature"
            );
            _elem5.innerText =
              _h2info.trans.inlet_temperature[order.inlet_temperature] || "-";
          }
          {
            var _elem6 = document.getElementById(
              "h2order-modal-outlet-temperature"
            );
            _elem6.innerText =
              _h2info.trans.outlet_temperature[order.outlet_temperature] || "-";
          }
          {
            var _elem7 = document.getElementById("h2order-modal-company");
            _elem7.innerText = order.company.name || "";
            var mail = document.getElementById("h2order-modal-contact_email");
            var val = order.contact_email;
            mail.innerText = val || "-";
            mail.href = val ? "mailto:" + val : "#";
            var tel_elem = document.getElementById(
              "h2order-modal-contact_telephone"
            );
            var tel = order.contact_telephone;
            tel_elem.innerText = tel || "-";
            tel_elem.href = tel ? "tel:" + tel : "#";
            var koop_elem = document.getElementById(
              "h2order-modal-contact_koop_bb_url"
            );
            var koop = order.contact_koop_bb_url;
            var abs_koop_url = ""; // Try to make URL absolute
            if (
              koop.indexOf("https://") === 0 ||
              koop.indexOf("http://") === 0 ||
              koop.indexOf("//") === 0
            ) {
              // URL is absolute
            } else {
              // URL is strange or relative -> Add https protocol to avoid a relative link to localiser
              abs_koop_url = "https://" + koop;
            }
            koop_elem.innerText = koop || "-";
            koop_elem.href = koop ? abs_koop_url : "#";
          }
          {
            var _elem8 = document.getElementById("h2order-modal-share-url");
            _elem8.value =
              window.location.origin +
              "/h2link/" +
              _h2info.h2market.url_name +
              "/" +
              order.id +
              "/";
          }
          {
            var a = document.getElementById("h2order-modal-edit-link");
            if (order.is_own) {
              a.href = "h2order/" + order.id + "/";
              a.style.display = "";
            } else {
              a.href = "#";
              a.style.display = "none";
            }
          }
          {
            var btn = document.getElementById("h2order-delete-button");
            btn.dataset.order_id = order.id;
            if (order.is_own) {
              btn.style.display = "";
            } else {
              btn.style.display = "none";
            }
          } // yearly fields
          {
            var add_yearly_chart = function add_yearly_chart(field, unit_y) {
              var chart_div = document.createElement("div");
              chart_div.className = "h2order-chart";
              var years = Object.keys(order.yearly_fields);
              var series = [];
              var chart_is_relevant = false;
              for (var _i3 = 0, _years = years; _i3 < _years.length; _i3++) {
                var year = _years[_i3];
                var value = order.yearly_fields[year + ""][field];
                series.push({ x: year, y: value });
                if (value) {
                  chart_is_relevant = true;
                }
              }
              var data = { series: [series], labels: [] };
              var options = {
                showPoint: true,
                lineSmooth: Chartist.Interpolation.none(),
                axisX: {
                  showGrid: true,
                  axisTitle: "",
                  type: Chartist.FixedScaleAxis,
                  ticks: years,
                },
                axisY: { showGrid: true, low: 0 }, //classNames: classNames,
                plugins: [
                  Chartist.plugins.ctAxisTitle({
                    axisX: { axisTitle: "", offset: { x: 0, y: 30 } },
                    axisY: {
                      axisTitle: unit_y,
                      offset: { x: 0, y: 10 },
                      flipTitle: true,
                    },
                  }),
                ],
              };
              var chart = new Chartist.Line(chart_div, data, options); // update chart on resize / accordion open
              new ResizeObserver(function (_) {
                chart.update();
              }).observe(chart_div);
              return [chart_div, chart_is_relevant];
            };
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;
            try {
              for (
                var _iterator2 = _h2info.yearly_fields[Symbol.iterator](),
                  _step2;
                !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next())
                  .done);
                _iteratorNormalCompletion2 = true
              ) {
                var field = _step2.value;
                var _div = document.getElementById(
                  "h2order-modal-chart-" + field
                );
                _div.innerHTML = "";
                var _add_yearly_chart = add_yearly_chart(
                    field,
                    _h2info.yearly_field_units[field]
                  ),
                  _add_yearly_chart2 = _slicedToArray(_add_yearly_chart, 2),
                  chart_elem = _add_yearly_chart2[0],
                  is_relevant = _add_yearly_chart2[1];
                _div.appendChild(chart_elem);
                if (is_relevant) {
                  _div.parentElement.parentElement.style.display = "";
                } else {
                  // hide accordion item if chart is empty
                  _div.parentElement.parentElement.style.display = "none";
                }
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                  _iterator2.return();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          }
          $("#h2order-modal").foundation("open");
        }
        function handleGetH2Orders(filter) {
          var url = new URL(
            window.location.origin + window.location.pathname + "h2orders/"
          );
          if (filter.order_type) {
            url.searchParams.append("order_type", filter.order_type);
          }
          if (filter.product_super_type) {
            url.searchParams.append(
              "product_super_type",
              filter.product_super_type
            );
          }
          if (filter["status"]) {
            url.searchParams.append("status", filter["status"]);
          }
          if (filter.same_project) {
            url.searchParams.append("same_project", "1");
          }
          return fetch(url.href)
            .then(function (resp) {
              return resp.json();
            })
            .then(function (data) {
              var orders = data["orders"];
              updateH2Orders(orders, filter.ordering || {});
            });
        }
        function handleH2OrderDelete(order_id) {
          var form_data = new FormData(); // Add CSRF token
          var token =
            document.getElementById("lisform").csrfmiddlewaretoken.value;
          form_data.append("csrfmiddlewaretoken", token);
          if (!confirm("MÃ¶chten Sie dieses Angebot / diese Suche lÃ¶schen?")) {
            return;
          } // fetch!
          (0, _utils.fetchPost)(
            "h2order/" + order_id + "/delete/",
            form_data,
            30000
          )
            .then(function (response) {
              return response.json();
            })
            .then(function (data) {
              console.log(data);
              if (data.success) {
                $("#h2order-modal").foundation("close");
                handleGetH2Orders(_h2filter);
              }
            });
        }
        function handleEvaluationSubmit() {
          var eval_form = document.getElementById("customlis_evaluation_form");
          var selected_lis_field = eval_form.elements["selected_lis"];
          selected_lis_field.value = "[]"; // Add selected lis from site manager table
          if ($.fn.dataTable.isDataTable("#site-manager-table")) {
            var dt = $("#site-manager-table").DataTable();
            var selected_rows = dt.rows({ selected: true }).data();
            if (selected_rows.length > 0) {
              var lis_ids = [];
              for (var i = 0; i < selected_rows.length; i++) {
                lis_ids.push(selected_rows[i].lis_id);
              }
              selected_lis_field.value = JSON.stringify(lis_ids);
            }
          }
          eval_form.submit();
        }
        function handleMultiLisDelete() {
          var lis_ids = []; // Add selected lis from site manager table
          if ($.fn.dataTable.isDataTable("#site-manager-table")) {
            var dt = $("#site-manager-table").DataTable();
            var selected_rows = dt.rows({ selected: true }).data();
            if (selected_rows.length > 0) {
              for (var i = 0; i < selected_rows.length; i++) {
                lis_ids.push(selected_rows[i].lis_id);
              }
            }
          }
          if (lis_ids.length == 0) {
            alert("Keine Standorte ausgewÃ¤hlt.");
            return;
          } else {
            var msg =
              lis_ids.length === 1
                ? "MÃ¶chten Sie diesen Standort wirklich lÃ¶schen?"
                : "MÃ¶chten Sie diese " +
                  lis_ids.length +
                  " Standorte wirklich lÃ¶schen?";
            var okay = confirm(msg);
            if (!okay) {
              return;
            }
          }
          var form_data = new FormData(); // Add CSRF token
          var token =
            document.getElementById("lisform").csrfmiddlewaretoken.value;
          form_data.append("csrfmiddlewaretoken", token);
          form_data.append("selected_lis", JSON.stringify(lis_ids));
          (0, _utils.fetchPost)("lis/multidelete/", form_data, 30000)
            .then(function (response) {
              return response.json();
            })
            .then(function (data) {
              if (!data.error) {
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;
                try {
                  var _loop5 = function _loop5() {
                    var lis_id = _step3.value;
                    var marker = _markers.find(function (m) {
                      return m.properties.id == lis_id;
                    });
                    (0, _lis_modal.removeCustomCPFromMap)(marker);
                    var customLisDisabled =
                      _region.lisLimit !== null &&
                      _markers.length >= _region.lisLimit; // find context menu entry by string, may enable it
                    _map.contextmenu.setDisabled(
                      (0, _utils.getCMItemByLabel)("Platziere Ladestandort"),
                      customLisDisabled
                    );
                  };
                  for (
                    var _iterator3 = lis_ids[Symbol.iterator](), _step3;
                    !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next())
                      .done);
                    _iteratorNormalCompletion3 = true
                  ) {
                    _loop5();
                  }
                } catch (err) {
                  _didIteratorError3 = true;
                  _iteratorError3 = err;
                } finally {
                  try {
                    if (
                      !_iteratorNormalCompletion3 &&
                      _iterator3.return != null
                    ) {
                      _iterator3.return();
                    }
                  } finally {
                    if (_didIteratorError3) {
                      throw _iteratorError3;
                    }
                  }
                }
                (0, _table.renderSiteManagerTable)();
              }
            });
        }
        function toggleElemVisibility(elem_id) {
          var elem = document.getElementById(elem_id);
          if (elem.style.display === "") {
            elem.style.display = "none";
          } else {
            elem.style.display = "";
          }
        }
      },
      {
        "./AHP": 1,
        "./chat": 3,
        "./comment_modal": 4,
        "./debug_info": 5,
        "./features": 6,
        "./layer": 7,
        "./lis_modal": 8,
        "./scenario": 12,
        "./table": 13,
        "./utils": 14,
      },
    ],
    10: [
      function (require, module, exports) {
        "use strict";
        var _features = require("./features");
        var _map = require("./map");
        var _lis_modal = require("./lis_modal");
        var _poi_modal = require("./poi_modal");
        var _comment_modal = require("./comment_modal");
        var _AHP = require("./AHP");
        var _chat = require("./chat");
        var _scenario = require("./scenario");
        var _utils = require("./utils"); // export functions to the browser's scope
        {
          // Unfortunately, we can't use <function>.name because it doesn't work well
          // with minification.
          var functions = [
            ["addNewLisChecklistItem", _lis_modal.addNewLisChecklistItem],
            ["addLisPowerTableRow", _lis_modal.addLisPowerTableRow],
            ["exportLISasCSV", _features.exportLISasCSV],
            ["exportLISasJSON", _features.exportLISasJSON],
            ["exportPotential", _features.exportPotential],
            ["handleChatRefresh", _chat.handleChatRefresh],
            ["handleChatSubmit", _chat.handleChatSubmit],
            ["handleGetH2Orders", _map.handleGetH2Orders],
            ["updateH2Orders", _map.updateH2Orders],
            ["handleH2OrderDelete", _map.handleH2OrderDelete],
            ["handleNewLisDescription", _lis_modal.handleNewLisDescription],
            ["handleNewLisMessage", _lis_modal.handleNewLisMessage],
            ["handleDeleteLISFile", _lis_modal.handleDeleteLISFile],
            ["handleFormSubmit", _map.handleFormSubmit],
            ["handleNewLisImg", _lis_modal.handleNewLisImg],
            ["handleLisSurvey", _lis_modal.handleLisSurvey],
            ["handleCommentRefresh", _comment_modal.handleCommentRefresh],
            ["handleCommentSubmit", _comment_modal.handleCommentSubmit],
            ["handleQuerySave", _map.handleQuerySave],
            ["handleQueryFetch", _map.handleQueryFetch],
            ["handleExportLISExcel", _map.handleExportLISExcel],
            ["handleEvaluationSubmit", _map.handleEvaluationSubmit],
            ["handleMultiLisDelete", _map.handleMultiLisDelete],
            ["toggleElemVisibility", _map.toggleElemVisibility],
            ["highlightCCP", _lis_modal.highlightCCP],
            ["markDirty", _lis_modal.markDirty],
            ["openLisModal", _lis_modal.openLisModal],
            ["postPOI", _poi_modal.postPOI],
            ["saveLisChanges", _lis_modal.saveLisChanges],
            ["setHeatColormap", _features.setHeatColormap],
            ["sliderChange", _utils.sliderChange],
            ["updateScenarioDropdown", _scenario.updateScenarioDropdown],
          ];
          for (var i = 0; i < functions.length; i++) {
            // Add functions as property of window object to make it global
            window[functions[i][0]] = functions[i][1];
          }
        }
        (0, _map.initializeMap)(); // Initialize foundation
        $(document).foundation();
        (0, _AHP.loadAHPData)();
      },
      {
        "./AHP": 1,
        "./chat": 3,
        "./comment_modal": 4,
        "./features": 6,
        "./lis_modal": 8,
        "./map": 9,
        "./poi_modal": 11,
        "./scenario": 12,
        "./utils": 14,
      },
    ],
    11: [
      function (require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.addPoiCallback = addPoiCallback;
        exports.postPOI = postPOI;
        var _map2 = require("./map");
        var _features = require("./features");
        var _utils = require("./utils"); // Callback that opens window for POI adding/editing
        function addPoiCallback(e) {
          var form = document.getElementById("poiform");
          var button = document.getElementById("post-poi-button");
          if (!(form && button)) {
            if (_map2.DEBUG) console.log("Oops. POI form not found");
            return;
          }
          if (e.relatedTarget) {
            form.elements.id.value = e.relatedTarget.properties.pk;
            form.elements.name.value = e.relatedTarget.properties.Beschreibung;
            form.elements.amenity.value = e.relatedTarget.properties.Typ;
            button.disabled = false;
          } else {
            form.elements.id.value = "";
            form.elements.geom.value = (0, _utils.geoJSONdumps)(e.latlng);
            form.elements.name.value = "";
            form.elements.amenity.value = "";
            button.disabled = true;
          }
          form.elements.name.onchange = function (_) {
            button.disabled = !checkInput();
          };
          form.elements.amenity.onchange = function (_) {
            button.disabled = !checkInput();
          };
          $("#poi-modal").foundation("open");
          form.elements.name.focus();
        }
        function removePOICallback(e) {
          var form = document.getElementById("poiform");
          if (!form) {
            if (_map2.DEBUG) console.log("Oops. POI form not found");
            return;
          }
          form.elements.id.value = "-" + e.relatedTarget.properties.pk;
          (0, _utils.fetchPost)("poi/user/", "poiform");
          e.relatedTarget.removeFrom(_map);
        } // are all necessary fields set in form?
        function checkInput() {
          var form = document.getElementById("poiform");
          return (
            form &&
            form.elements.name.value.length &&
            form.elements.amenity.value.length
          );
        } // post POI data to backend
        // id set: edit/delete POI, otherwise add POI
        // shows all user POI in region on success
        function postPOI() {
          var form = document.getElementById("poiform");
          if (!form) {
            if (_map2.DEBUG) console.log("Oops. POI form not found");
            return;
          }
          if (
            !form.elements.id.value &&
            (!form.elements.geom.value ||
              !form.elements.name.value ||
              !form.elements.amenity.value)
          ) {
            if (_map2.DEBUG) console.log("Insufficient info");
            return;
          }
          (0, _utils.fetchPost)("poi/user/", "poiform")
            .then(function (r) {
              return r.json();
            })
            .then(function (res) {
              if (res && res.features) {
                res.features.map(function (d) {
                  (0, _features.reverseCoordinates)(d.geometry);
                  d.properties.desc =
                    "<table><tr><td>Beschreibung</td><td>" +
                    d.properties.Beschreibung +
                    "</td></tr><tr><td>Typ</td><td>" +
                    d.properties.Typ +
                    "</td></tr></table>";
                });
                var layer = (0, _features.showData)(res.features, {
                  color: _map2.COLORS.POI_custom,
                  rejectDoubles: "pk",
                });
                layer.eachLayer(function (l) {
                  l.bindContextMenu({
                    contextmenu: true,
                    contextmenuInheritItems: false,
                    contextmenuItems: [
                      {
                        text: "Editiere POI",
                        iconCls: "ion ion-md-create",
                        callback: addPoiCallback,
                      },
                      {
                        text: "Entferne POI",
                        iconCls: "ion ion-md-trash",
                        callback: removePOICallback,
                      },
                    ],
                  });
                });
              } else if (_map2.DEBUG) console.log(res);
            })
            .catch(function (error) {
              if (_map2.DEBUG) console.log(error);
            });
          $("#poi-modal").foundation("close");
        }
      },
      { "./features": 6, "./map": 9, "./utils": 14 },
    ],
    12: [
      function (require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.initScenarios = initScenarios;
        exports.updateScenarioDropdown = updateScenarioDropdown;
        var _map = require("./map");
        var _utils = require("./utils");
        function initScenarios() {
          // build scenario table
          var table = document.getElementById("scenarios");
          if (!table) return; // create header (used as labels)
          if (!_region.scenarios) return; // reset table
          table.innerHTML = ""; // create header row
          var row = table.insertRow(-1);
          var th = row.insertCell(0);
          th.textContent = "Scenario"; // header of first column
          for (var i = 0; i < _region.scenarios.years.length; i++) {
            th = row.insertCell(-1);
            th.textContent = _region.scenarios.years[i]; // year headers
          } // create individual scenario rows
          for (var _i = 0; _i < _region.scenarios.names.length; _i++) {
            row = table.insertRow(-1);
            var td = row.insertCell(0); // cell for name input
            var input = (0, _utils.addElem)("", "", td, "INPUT");
            input.type = "text";
            input.placeholder = "Name";
            input.value = _region.scenarios.names[_i];
            input.onchange = function (_) {
              updateScenarioChart(true);
            }; // add input cells for each time column
            for (var j = 1; j < table.rows[0].cells.length; j++) {
              td = row.insertCell(-1);
              input = (0, _utils.addElem)("", "", td, "INPUT");
              input.type = "text";
              input.value = _region.scenarios.data[_i][j - 1];
              input.onchange = function (_) {
                updateScenarioChart(true);
              };
            }
          }
          updateScenarioDropdown();
          updateScenarioChart(false);
        } // repaint chart when opening modal view
        $("#scenario-modal").on("open.zf.reveal", function (_) {
          updateScenarioChart(false);
        }); // save changes when closing modal view
        $("#scenario-modal").on("closed.zf.reveal", saveScenarioChanges);
        function updateScenarioDropdown() {
          // update scenario selection box
          // get choices from _region.scenarios dict
          var choices = document.getElementById("id_scenario");
          if (choices) choices.innerHTML = "";
          for (var i = 0; choices && i < _region.scenarios.names.length; i++) {
            var option = (0, _utils.addElem)(
              null,
              _region.scenarios.names[i],
              choices,
              "OPTION"
            );
            option.value = _region.scenarios.names[i];
          }
        }
        function updateScenarioChart(markDirty) {
          // draw line chart
          // markDirty: set hidden input after change
          var chart = document.getElementById("scenario-chart");
          if (!chart) return;
          var scenarioData = getScenarioDataFromTable();
          var data = {
            legend: scenarioData.names,
            labels: scenarioData.years,
            series: scenarioData.data,
          };
          var max = data.series.reduce(function (a, c) {
            return Math.max(
              a,
              c.reduce(function (a, c) {
                return Math.max(a, c);
              }, 0)
            );
          }, 0);
          var legend = document.getElementById("legend");
          legend.innerHTML = ""; // draw line
          new Chartist.Line(chart, data, {
            chartPadding: { left: 40, right: 40 }, //lineSmooth: Chartist.Interpolation.cardinal({fillHoles: true}), // smoothing?
            low: 0,
            high: max,
            fullWidth: true,
            axisX: { labelOffset: { x: -15, y: 0 } },
            axisY: { labelOffset: { x: 0, y: 5 } },
            plugins: [
              Chartist.plugins.legend({
                legendNames: data.legend,
                position: legend, //"bottom"
              }),
              Chartist.plugins.ctAxisTitle({
                axisY: {
                  axisTitle: "E-Fahrzeuge",
                  axisClass: "ct-axis-title",
                  offset: { x: 0, y: 25 },
                  flipTitle: true,
                },
              }),
            ],
          });
          addEmptyRow();
          var dirtyElem = document.getElementById("scenario-dirty");
          if (dirtyElem) dirtyElem.checked = dirtyElem.checked || markDirty;
        }
        function addEmptyRow() {
          // add empty row to bottom of table if last row is not empty
          var table = document.getElementById("scenarios");
          if (!table) return; // last row empty: abort
          if (!table.rows[table.rows.length - 1].firstChild.firstChild.value)
            return;
          var row = table.tBodies[0].insertRow(-1);
          var td = row.insertCell(0); // cell for name input
          var input = document.createElement("INPUT");
          input.type = "text";
          input.placeholder = "Name";
          input.onchange = function (_) {
            updateScenarioChart(true);
          };
          td.appendChild(input); // add input cells for each time column
          for (var i = 1; i < table.rows[0].cells.length; i++) {
            td = row.insertCell(-1);
            input = document.createElement("INPUT");
            input.type = "text";
            input.onchange = function (_) {
              updateScenarioChart(true);
            };
            td.appendChild(input);
          }
        }
        function getScenarioDataFromTable() {
          var table = document.getElementById("scenarios");
          var data = { years: [], names: [], data: [] };
          if (!table) return data; // get year labels from first table row
          var row = table.rows[0].cells;
          for (var j = 1; j < row.length; j++) {
            data.years.push(row[j].textContent);
          } // read table values row-wise
          for (var i = 1; i < table.rows.length; i++) {
            // current table row
            row = table.rows[i].cells; // no scenario name: ignore
            if (!row[0].firstChild.value) continue; // data row
            // prepare array for row data
            data.data.push([]); // get row name for legend
            data.names.push(row[0].firstChild.value); // get row values
            for (var _j = 1; _j < row.length; _j++) {
              var input = row[_j].firstChild.value; // user-entered string
              input = input.replace(",", "."); // JS needs dots as decimal place
              var value = parseFloat(input); // string -> float
              value = Math.max(value, 0.0); // 0 is lower limit
              data.data[data.data.length - 1].push(value); // add converted value into current array
            }
          }
          return data;
        } // send scenario data to backend when it has changed (check dirty bit)
        function saveScenarioChanges() {
          var form = document.getElementById("scenario-form");
          var table = document.getElementById("scenarios");
          var dirtyElem = document.getElementById("scenario-dirty");
          if (!(form && table && dirtyElem && dirtyElem.checked)) return;
          var scenarios = getScenarioDataFromTable(); // make sure all names within project are unique
          var uniqueNames =
            scenarios.names.length === new Set(scenarios.names).size;
          if (!uniqueNames) {
            alert("Szenarios brauchen einen eindeutigen Namen."); // there is no foundation event that fires BEFORE closing the modal, so it has to be reopened
            // when this function is called by closed.zf.reveal, the modal is still in state "open", so reopening it right away puts it in an invalid state
            setTimeout(function (_) {
              $("#scenario-modal").foundation("open");
            }, 100);
            return;
          } // warn on missing data
          var hasNaN = scenarios.data.reduce(function (a, c) {
            return (
              a ||
              c.reduce(function (a, c) {
                return a || Number.isNaN(c);
              }, false)
            );
          }, false);
          if (
            hasNaN &&
            !confirm(
              "Mindestens ein Szenario enthÃ¤lt lÃ¼ckenhafte Daten. Trotzdem fortfahren?"
            )
          ) {
            setTimeout(function (_) {
              $("#scenario-modal").foundation("open");
            }, 100);
            return;
          } // mark clean
          dirtyElem.checked = false; // build form
          var form_data = new FormData();
          form_data.append("scenarios", JSON.stringify(scenarios));
          form_data.append(
            "csrfmiddlewaretoken",
            form.csrfmiddlewaretoken.value
          ); // send form. Timeout: 30s
          (0, _utils.fetchPost)("scenario/", form_data, 30000)
            .then(function (response) {
              return response.json();
            })
            .then(function (data) {
              console.log(data);
              _region.scenarios = data;
              updateScenarioDropdown();
            })
            .catch(function (err) {
              if (_map.DEBUG) console.log(err);
              alert(
                "Es gab einen Fehler beim Aktualisieren der Szenarien. bitte Ã¼berprÃ¼fen Sie Ihre Eingaben."
              );
              $("#scenario-modal").foundation("open");
            });
        }
      },
      { "./map": 9, "./utils": 14 },
    ],
    13: [
      function (require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.renderSiteManagerTable = renderSiteManagerTable;
        var _utils = require("./utils");
        function lisTypeToString(ltype) {
          switch ("" + ltype) {
            case "1":
              return "privat";
            case "2":
              return "halb Ã¶ffentlich";
            case "3":
              return "Ã¶ffentlich";
            default:
              return "<Unbekannt " + ltype + ">";
          }
        }
        function getTableRows() {
          var evalYearSelect = document.getElementById("evalYear");
          var sorted_markers = _markers.sort(function (a, b) {
            return a.properties.id - b.properties.id;
          });
          var rows = [];
          var year =
            evalYearSelect && evalYearSelect.value ? evalYearSelect.value : 0;
          for (var i = 0; i < sorted_markers.length; i++) {
            var p = sorted_markers[i].properties;
            var power = 0.0;
            var count = 0;
            for (var k = 0; k < p.power_table.length; k++) {
              var t = p.power_table[k];
              power += t.power * t.count * t.demand_factor;
              count += t.count;
            } // build displayed name string
            // base name that opens modal on click
            var name =
              '<a href="#" onclick="openLisModal(' +
              p.id +
              ')">' +
              (0, _utils.escapeHTML)(p.name) +
              "</a>"; // prepend with map icon (jump to marker on map)
            name =
              '<a href="#" onclick=\'$(".sidebar-close").click(); highlightCCP(' +
              p.id +
              ');\'><i class="icon icon--small ion-md-map"></i></a> ' +
              name; // append lock when locked
            if (p.locked)
              name +=
                ' <i class="icon icon--small ion-md-lock" title="Dieser Standort kann nicht mehr verschoben werden."></i>';
            var row = {
              index: i + 1,
              lis_id: p.id,
              name: { display: name, value: p.name },
              public_type: lisTypeToString(p.public_type),
              count_str:
                '<a href="#" onclick="openLisModal(' +
                p.id +
                ", '#acc-item-power')\">" +
                count +
                "</a>",
              count: count,
              power: {
                display:
                  '<a href="#" onclick="openLisModal(' +
                  p.id +
                  ", '#acc-item-power')\">" +
                  (0, _utils.roundToStr)(power, 2) +
                  " kW</a>",
                num: power,
              },
              files_str:
                '<a href="#" onclick="openLisModal(' +
                p.id +
                ", '#acc-item-files')\">" +
                p.images.length +
                "</a>",
              files: p.images.length,
            };
            if (_permissions.evaluateCustomLis > 0) {
              for (var key in p.evaluation) {
                // evaluation may be empty, key may be "info"
                try {
                  var num_val = p.evaluation[key][year].power / 1000.0;
                  var str_val = (0, _utils.roundToStr)(num_val, 1) + " MWh/a";
                  row["eval_" + key] = {
                    display:
                      '<a href="#" onclick="openLisModal(' +
                      p.id +
                      ", '#acc-item-evaluation')\">" +
                      str_val +
                      "</a>",
                    num: num_val,
                  };
                } catch (_a) {}
              }
            }
            rows.push(row);
          }
          return rows;
        }
        function renderSiteManagerTable() {
          if (!$.fn.dataTable.isDataTable("#site-manager-table")) {
            // Add listener: Render table again when year select changes
            {
              var evalYearSelect = document.getElementById("evalYear");
              if (evalYearSelect) {
                evalYearSelect.addEventListener("change", function (_) {
                  if (table) {
                    var page = table.page();
                    renderSiteManagerTable();
                    table.page(page).draw(false);
                  }
                });
              }
            } // columns are dependent on marker data
            var columns = [
              {
                title: " ",
                data: function data(_) {
                  return "";
                },
              },
              {
                data: "index",
                title: "Index",
                render: $.fn.dataTable.render.number(""),
              },
              {
                title: "Name",
                data: {
                  _: "name.display",
                  type: "name.value",
                  sort: "name.value",
                },
              },
              {
                data: "public_type",
                title: "ZugÃ¤nglichkeit",
                render: $.fn.dataTable.render.text(),
              },
              { data: "count_str", title: "Ladepunkte" },
              {
                title: "Leistung",
                data: {
                  _: "power.display",
                  sort: "power.num",
                  type: "power.num",
                },
              },
              { data: "files_str", title: "Dateien", sort: "files" },
            ];
            if (_permissions.evaluateCustomLis > 0 && _markers.length > 0) {
              var evalData = _markers[0].properties.evaluation;
              if (evalData && evalData.info) {
                var key;
                for (key in evalData.info.scenarios) {
                  var title = key + " kW";
                  if (key == "150") {
                    title = ">= " + title;
                  }
                  columns.push({
                    title: title,
                    data: {
                      _: "eval_" + key + ".display",
                      sort: "eval_" + key + ".num",
                      type: "eval_" + key + ".num",
                    },
                    defaultContent: "-",
                  });
                } // populate year dropdown menu
                var _evalYearSelect = document.getElementById("evalYear");
                for (
                  var i = 0;
                  _evalYearSelect && evalData[key] && i < evalData[key].length;
                  i++
                ) {
                  var option = (0, _utils.addElem)(
                    "",
                    evalData[key][i].year,
                    _evalYearSelect,
                    "OPTION"
                  );
                  option.value = i;
                }
              }
            } // Initialise datatable
            var table = $("#site-manager-table").DataTable({
              data: getTableRows(),
              paginate: true,
              columnDefs: [
                { orderable: false, className: "select-checkbox", targets: 0 },
                { targets: 1, width: "5%" },
                { targets: 2, width: "30%", type: "natural" },
                { targets: [4, 5, 6], width: "10%" },
              ],
              order: [[1, "asc"]],
              columns: columns,
              select: {
                style: "multi+shift",
                selector: "td:first-child",
                className: "custom-selected",
                language: {},
              },
              language: {
                search: "Suche:",
                zeroRecords: "Keine passenden Suchergebnisse gefunden",
                emptyTable:
                  '<b>Keine Ladestandorte vorhanden.</b><br><br>Erstellen Sie einen Ladestandort mit einem Rechtsklick auf der <a href="#" onclick="document.querySelector(\'#site-manager .sidebar-close\').click()">Karte</a> und wÃ¤hlen Sie im MenÃ¼ <b>"Platziere Ladestandort"</b>:<br><br><img src="/static/LISMap/img/screenshot_create_lis.png">',
                info: "Zeilen _START_ - _END_ von _TOTAL_",
                infoEmpty: "",
                infoFiltered: "(aus _MAX_ Zeilen insgesamt)",
                lengthMenu: "Zeige _MENU_ Zeilen",
                select: {
                  cells: { _: "", 0: "", 1: "" },
                  rows: {
                    _: "%d Zeilen ausgewÃ¤hlt",
                    0: "",
                    1: "1 Zeile ausgewÃ¤hlt",
                  },
                },
                paginate: {
                  first: "Erste",
                  last: "Letzte",
                  next: "Vor",
                  previous: "ZurÃ¼ck",
                },
              },
            });
            table.on("select", update_delete_btn);
            table.on("deselect", update_delete_btn);
            document.getElementById("site-manager-table").style.width = "";
          } else {
            // Already initialised -> Update rows
            var dt = $("#site-manager-table").DataTable();
            dt.clear();
            dt.rows.add(getTableRows());
            dt.draw();
          } // update evaluation button visibility
          var eval_buttons = document.getElementById("eval-buttons-div");
          if (eval_buttons)
            eval_buttons.style.visibility = _markers.length
              ? "visible"
              : "hidden"; // update delete button visibility
          update_delete_btn();
        }
        function update_delete_btn() {
          var dt = $("#site-manager-table").DataTable();
          var btn = document.getElementById("lis-multi-delete-button");
          var selection_len = dt.rows({ selected: true }).data().length;
          if (btn) btn.style.visibility = selection_len ? "visible" : "hidden";
        }
      },
      { "./utils": 14 },
    ],
    14: [
      function (require, module, exports) {
        "use strict";
        /* utility functions */ Object.defineProperty(exports, "__esModule", {
          value: true,
        });
        exports.request = request;
        exports.fetchPost = fetchPost;
        exports.addElem = addElem;
        exports.escapeCsvString = escapeCsvString;
        exports.escapeCsvStringUgly = escapeCsvStringUgly;
        exports.escapeHTML = escapeHTML;
        exports.stringToFileName = stringToFileName;
        exports.sliderChange = sliderChange;
        exports.setProgressbarValue = setProgressbarValue;
        exports.togglePWVisibility = togglePWVisibility;
        exports.metersInPixels = metersInPixels;
        exports.geoJSONdumps = geoJSONdumps;
        exports.getLatLngFromString = getLatLngFromString;
        exports.roundToStr = roundToStr;
        exports.filenameWithoutRand = filenameWithoutRand;
        exports.safeMin = safeMin;
        exports.safeMax = safeMax;
        exports.colormapToGradient = colormapToGradient;
        exports.colormapToCSSGradient = colormapToCSSGradient;
        exports.getCMItemByLabel = getCMItemByLabel;
        var _map2 = require("./map"); // Start server request (GET). No return value. Use .then(function(result){} ... (promises) instead
        // options: path, query, timeout (ms) [none], method ([GET] or POST)
        function request(options) {
          var _this = this; // get own URL, append query. window.location.href gives full URL, with every character (like trailing hashes -> not good for appending)
          options = options || [];
          if (!options.path) throw "Request path required.";
          options.query = options.query || "";
          options.method = options.method || "GET";
          var pathname = window.location.origin + window.location.pathname;
          if (pathname[pathname.length - 1] != "/") {
            pathname += "/";
          } //append trailing slash
          var request = pathname + options.path + "/" + options.query;
          if (request[request.length - 1] != "/") {
            request += "/";
          } //append trailing slash
          // create promise
          var p = new Promise(function (resolve, reject) {
            if (self.fetch) {
              // fetch API supported
              if (_map2.DEBUG) console.log("fetching " + request + "...");
              fetch(request, {
                method: options.method,
                mode: "cors",
                headers: {
                  Accept: "application/json",
                  "Content-Type": "text/plain", //"X-CSRFToken": getCookie("csrftoken")
                },
                credentials: "same-origin",
              })
                .then(function (response) {
                  if (response.ok) {
                    response.json().then(function (response) {
                      //if (DEBUG) console.log(response);
                      resolve(response);
                    });
                  } else {
                    if (_map2.DEBUG) console.log(response);
                    reject(response.statusText);
                  }
                })
                .catch(function (error) {
                  if (_map2.DEBUG) console.log("Request failed", error);
                  reject(error);
                });
            } else {
              if (_map2.DEBUG) console.log("No fetch support"); // XMLHttpRequest
              var xhr = new XMLHttpRequest();
              xhr.open(options.method, request, true);
              xhr.setRequestHeader("Content-Type", "text/plain"); //xhr.setRequestHeader("X-CSRFToken", getCookie("csrftoken"));
              xhr.onreadystatechange = function (_) {
                if (_this.readyState === 4 && _this.status === 200) {
                  if (_map2.DEBUG) console.log("Done"); // if(DEBUG) console.log(JSON.parse(this.responseText));
                  resolve(JSON.parse(_this.responseText));
                } else {
                  if (_map2.DEBUG) console.log("Request failed");
                  if (_map2.DEBUG) console.log(_this);
                  reject(_this);
                }
              };
              xhr.send();
              if (_map2.DEBUG) console.log(xhr);
            }
          }); //wait for result (timeout optional)
          if (options.timeout) {
            return Promise.race([
              p,
              new Promise(function (_, reject) {
                return setTimeout(function () {
                  return reject(new Error("timeout"));
                }, options.timeout);
              }),
            ]);
          } else return p;
        }
        /*
    POST form data and return server result as Promise.
    Inputs:
        path: relative path to send data to. May need closing slash.
        id_or_formdata: already FormData object or form id
        timeout: timeout of POST request
    Output: Promise
*/ function fetchPost(path, id_or_formdata) {
          var timeout =
            arguments.length > 2 && arguments[2] !== undefined
              ? arguments[2]
              : 0;
          var post_data;
          if (typeof id_or_formdata === "string") {
            // collect form data, CSRF token
            post_data = new FormData(
              window.document.getElementById(id_or_formdata)
            );
          } else {
            post_data = id_or_formdata;
          } // request URL
          var url = window.location.origin + window.location.pathname + path;
          if (_map2.DEBUG) console.log(url); // fetch POST request
          var p = new Promise(function (resolve, reject) {
            fetch(url, {
              method: "post",
              body: post_data,
              credentials: "include",
            })
              .then(function (response) {
                if (response.ok) {
                  resolve(response);
                } else {
                  if (_map2.DEBUG) console.log(response);
                  reject(response.statusText);
                }
              })
              .catch(function (error) {
                if (_map2.DEBUG) console.log("Request failed", error);
                reject(error);
              });
          }); // Add timeout
          if (timeout) {
            return Promise.race([
              p,
              new Promise(function (_, reject) {
                return setTimeout(function () {
                  return reject(new Error("timeout " + timeout + " ms"));
                }, timeout);
              }),
            ]);
          }
          return p;
        }
        /* helper function for fast element adding
   inputs:
    classes: string of class names or null
    content: text content of element or null
    parent_elem: parent of element to create or null
    elem: HTML element name (e.g. "DIV"), required
   output: element
*/ function addElem(classes, content, parent_elem, elem) {
          var e = document.createElement(elem);
          if (classes != null) e.className = classes;
          if (content != null) e.innerText = content;
          if (parent_elem != null) parent_elem.appendChild(e);
          return e;
        } // Escapes a string to be used as a value in a CSV row
        //
        // Quotes (") will be replaced by two quotes.
        // Line breaks and commas don't have to be escaped if the string is surrounded by quotes.
        function escapeCsvString(input) {
          // Replace quotes by two quotes
          var escaped = input.replace(/"/g, '""');
          return '"' + escaped + '"';
        } // Escapes a string so Excel can cope with it...
        //
        // Line endings will be replaced. Excel can export fields with line breaks but can't import them m(
        function escapeCsvStringUgly(input) {
          var ugly = input.replace(/\r\n|\n\r|\n/gm, "<br>");
          return escapeCsvString(ugly);
        } // replace HTML symbols with JS safe ones for display in HTML
        function escapeHTML(input) {
          return input
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#39;");
        } // Takes an input string and converts it to a String that is save to use as a file name.
        function stringToFileName(input) {
          return input // replace special characters with _
            .replace(
              /[^a-zA-Z0-9\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF_-]/g,
              "_"
            ) // collapse multiple _ into one _
            .replace(/[_]+/g, "_") // remove leading and trailing _
            .replace(/_$|^_/g, "");
        } // slider callback: set label/value on slider change
        function sliderChange(e, a) {
          var slider = e.target; // DIV container
          var values = JSON.parse(slider.getAttribute("_values")); // custom attribute
          var value = a.attr("aria-valuenow"); // get selected value
          $('label[for="' + slider.id + '"]')[0].textContent = values[value][1]; // set label
          slider.lastElementChild.value = values[value][0]; // set hidden input value
        } // generic function to display progress with any progress bar
        function setProgressbarValue(progressElement, percent) {
          progressElement.firstElementChild.style.width = percent + "%"; // meter
          progressElement.lastElementChild.textContent = percent
            ? percent + "%"
            : ""; // text
        } // displays/hides password in form
        // input: id of input field to toggle and icon element that has been pressed
        function togglePWVisibility(pw_id, icon) {
          var pwField = document.getElementById(pw_id);
          if (!(pwField && icon)) return;
          if (pwField.type == "password") {
            pwField.type = "text";
            icon.classList.remove("ion-md-eye-off");
            icon.classList.add("ion-md-eye");
          } else {
            pwField.type = "password";
            icon.classList.remove("ion-md-eye");
            icon.classList.add("ion-md-eye-off");
          }
        } // meters to pixels, based on zoom level
        function metersInPixels(meters) {
          var EARTH_DIAMETER = 40075016.686; // Magic. Don't touch it.
          //Source: https://wiki.openstreetmap.org/wiki/Zoom_levels
          var metersPerPixel =
            (EARTH_DIAMETER *
              Math.abs(Math.cos((_map.getCenter().lat * Math.PI) / 180))) /
            Math.pow(2, _map.getZoom() + 8);
          return meters / metersPerPixel;
        } // latlng to string
        function geoJSONdumps(latlng) {
          return JSON.stringify({
            type: "Point",
            coordinates: [latlng.lng, latlng.lat],
          });
        }
        function getLatLngFromString(s) {
          var coordRegex =
            /^(\d{1,2}[.,]\d+)Â°([NS]); (\d{1,3}[,.]\d+)Â°([EOW])$/;
          var matches = s.match(coordRegex);
          if (!matches) throw "invalid coordinates";
          var lat = Number.parseFloat(matches[1].replace(",", "."));
          lat = matches[2] == "S" ? -lat : lat;
          var lng = Number.parseFloat(matches[3].replace(",", "."));
          lng = matches[4] == "W" ? -lng : lng;
          return { lat: lat, lng: lng };
        } // round number to given decimal places and return as str
        function roundToStr(num, decimals) {
          return num.toFixed(decimals).replace(/[,.]0+$/, "");
        } // like Python's os.path.splitext
        function splitExt(path) {
          var parts = path.split(".");
          if (parts.length == 1) {
            return [path, ""];
          } else if (parts.length == 2 && parts[0].length == 0) {
            return [path, ""];
          } else {
            var root = parts.slice(0, -1).join(".");
            var ext = "." + parts[parts.length - 1];
            return [root, ext];
          }
        } // Return the given filename without the random substring from Django
        function filenameWithoutRand(filename) {
          var parts = splitExt(filename);
          var rx = new RegExp(/_[^_]+$/);
          return parts[0].split(rx)[0] + parts[1];
        } // Returns minimum of the two arguments but ignores null, undefined, Nan values.
        // Returns null if there is no valid number
        function safeMin(a, b) {
          // handle undefined and Nan
          if (typeof a === "undefined" || isNaN(a)) {
            a = null;
          }
          if (typeof b === "undefined" || isNaN(b)) {
            b = null;
          }
          if (a === null) {
            return b;
          } else if (b === null) {
            return a;
          } else {
            return Math.min(a, b);
          }
        }
        function safeMax(a, b) {
          // handle undefined and Nan
          if (typeof a === "undefined" || isNaN(a)) {
            a = null;
          }
          if (typeof b === "undefined" || isNaN(b)) {
            b = null;
          }
          if (a === null) {
            return b;
          } else if (b === null) {
            return a;
          } else {
            return Math.max(a, b);
          }
        } // create color gradient depending on colormap name in chroma.brewer
        function colormapToGradient(name) {
          var grad = {};
          var colormap = chroma.brewer[name] || [];
          for (var i = 0; i < colormap.length; i++) {
            grad[i / (colormap.length - 1.0)] = colormap[i];
          }
          return grad;
        } // build CSS gradient string from colormap array. Adjustable direction.
        function colormapToCSSGradient(colormapArr) {
          var direction =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : "to top";
          var cols = [];
          for (var i = 0; i < colormapArr.length; i++) {
            var t = (100.0 * i) / (colormapArr.length - 1);
            cols.push(
              "rgba(" +
                chroma(colormapArr[i]).rgba().toString() +
                ") " +
                t +
                "%"
            );
          }
          return "linear-gradient(" + direction + "," + cols.join(",") + ")";
        } // get context menu HTML item by shown label
        function getCMItemByLabel(label) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;
          try {
            for (
              var _iterator = _map.contextmenu._items[Symbol.iterator](), _step;
              !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
              _iteratorNormalCompletion = true
            ) {
              var item = _step.value;
              if (item.el.innerText === label) {
                return item.el;
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
          return null;
        }
      },
      { "./map": 9 },
    ],
  },
  {},
  [10]
);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
