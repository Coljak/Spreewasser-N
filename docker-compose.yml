version: '3.8'

services:
  redis:
    image: redis:latest
    container_name: swn_redis
    ports: 
      - 6379:6379
    networks:
      - swn_network

  app:
    build: 
      context: .
      dockerfile: Dockerfile.django
      # for DEV=false, expose port 80
      args:
        - DEV=true
    ports:
      - 8000:8000 
    volumes:
      - ./app:/app
      - ./app/klim4cast/data/netcdf:/app/klim4cast/data/netcdf 
      # - ./thredds_data/data:/app/thredds_data
    command: 
      sh -c "python3 manage.py wait_for_db &&
      python3 manage.py migrate &&
      python3 manage.py runserver 0.0.0.0:8000"
        
    environment:
      - DB_HOST=db
      - DB_NAME=postgis
      - DB_USER=postgis
      - DB_PASS=postgis

      - GEOSERVER_URL=http://geoserver:8080/geoserver
      - GEOSERVER_USER=admin
      - GEOSERVER_PASS=geoserver

      - THREDDS_URL=http://thredds:8080/thredds
      # - NETCDF_DATA_PATH=/path/to/thredds_data
      
      
    container_name: swn_geo_django
    # if the container does not run, this line delays the runserver command
    entrypoint: ["sh", "-c", "sleep 2073600"]
    depends_on:
      - db
    networks:
      - swn_network

  # Postgres database
  db:
    image: postgis/postgis:14-3.3
    volumes:
    - ./database:/pg_data_2
    #user: 1000:1000 
    environment:
      POSTGRES_DB: postgis
      POSTGRES_USER: postgis
      POSTGRES_PASSWORD: postgis
      PGDATA: /pg_data_2

    ports:
      - 5432:5432
    container_name: swn_postgis
    networks:
      - swn_network

  # #geoserver for visualisation and sharing of geodata
  geoserver:
    image: kartoza/geoserver:2.23.2
    #user: "1000:1000"
    container_name: swn_geoserver
    volumes:
      - ./geoserver/data:/geoserver_data/data
    environment:
      - GEOSERVER_URL=geoserver
      - GEOSERVER_ADMIN_USER=admin
      - GEOSERVER_ADMIN_PASSWORD=geoserver
      - GEOSERVER_DATA_DIR=/geoserver_data/data
    ports:
      - 8080:8080
    depends_on:
      - db
    networks:
      - swn_network


  # thredds for sharing of netcdf data
  thredds:
    build:
      context: .
      dockerfile: Dockerfile.thredds
    container_name: swn_thredds
    volumes:
      - ./thredds_tomcat/tomcat_logs:/usr/local/tomcat/logs/
      - ./thredds_tomcat/thredds_logs:/usr/local/tomcat/content/thredds/logs/
      - ./app/klim4cast/data/netcdf:/usr/local/tomcat/content/thredds/public/data/Klim4Cast
      - ./thredds_data/data/DWD_Data:/usr/local/tomcat/content/thredds/public/data/DWD_Data

   
    environment:
      - THREDDS_URL=thredds
  
      - THREDDS_DATA_DIR=/usr/local/tomcat/content/thredds/public/data
    ports:
      - 8088:8080
    depends_on:
      - db
    networks:
      - swn_network
    # aliases:
    #   - swn_thredds

  # MONICA
  monica:
    # image: zalfrpm/monica-cluster:3.6.10.soil_organic_fixed
    image: zalfrpm/monica-cluster:3.6.33.auto_irrig_start_date
    
    container_name: swn_monica
    # volumes:
    #   - ./monica:/run/monica
    expose:
      - 6666  # monica_producer_port
      - 6677  # monica_intern_in_port
      - 7777  # monica_consumer_port
      - 7788  # monica_intern_out_port
    ports:
      - 6666:6666
      - 6677:6677
      - 7777:7777
      - 7788:7788
    # entrypoint: ["sh", "-c", "sleep 2073600"]
    networks:
      - swn_network

  # redis:
  #   image: redis:latest
  #   container_name: swn_redis
  #   ports: 
  #     - 6379:6379
  #   networks:
  #     - swn_network
  #   command: sh -c "apt-get update && apt-get install -y redis-tools && redis-server"

  # celery-worker:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.django
  #   command: celery -A app worker --loglevel=info
  #   volumes:
  #     - ./app:/app
  #   depends_on:
  #     - redis
  #     - db
  #   environment:
  #     - CELERY_BROKER_URL=redis://redis:6379/0
  #     - CELERY_RESULT_BACKEND=redis://redis:6379/0
  #   networks:
  #     - swn_network

  # celery-beat:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.django
  #   command: celery -A app beat --loglevel=info
  #   volumes:
  #     - ./app:/app
  #   depends_on:
  #     - redis
  #     - db
  #   environment:
  #     - CELERY_BROKER_URL=redis://redis:6379/0
  #     - CELERY_RESULT_BACKEND=redis://redis:6379/0
  #   networks:
  #     - swn_network


  # TODO Django Celery: https://www.youtube.com/watch?v=CWF-pTr1p68&list=PLOLrQ9Pn6cayGytG1fgUPEsUp3Onol8V7&index=5
networks:
  swn_network:

